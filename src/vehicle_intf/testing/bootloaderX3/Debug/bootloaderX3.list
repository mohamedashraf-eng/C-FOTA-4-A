
bootloaderX3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001d1c  08001d1c  00011d1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001da0  08001da0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001da0  08001da0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001da0  08001da0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001da0  08001da0  00011da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000020  08001dc8  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08001dc8  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea3b  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003081  00000000  00000000  0002ea84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000088b9  00000000  00000000  00031b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0003a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de0  00000000  00000000  0003ace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188d6  00000000  00000000  0003bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118de  00000000  00000000  00054396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086e56  00000000  00000000  00065c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ecaca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016bc  00000000  00000000  000ecb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d04 	.word	0x08001d04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08001d04 	.word	0x08001d04

0800014c <__vJumpToApplication>:
		local_enThisFuncErrStatus = BL_E_INVALID_ADDR;
	}
	return local_enThisFuncErrStatus;
}

__STATIC __NORETURN __vJumpToApplication(void) {
 800014c:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800014e:	b672      	cpsid	i
	__disable_irq();
	if( (BL_E_INVALID_ADDR != __enVerifyAddress(APP_START_ADDR)) ) {
		/* Set shared flags */
		__WRITE_FLAG_APP_TO_BL_ADDR(FALSE);
 8000150:	4c16      	ldr	r4, [pc, #88]	; (80001ac <__vJumpToApplication+0x60>)
 8000152:	2200      	movs	r2, #0
 8000154:	4620      	mov	r0, r4
 8000156:	2103      	movs	r1, #3
 8000158:	f001 fc4c 	bl	80019f4 <HAL_RTCEx_BKUPWrite>
		__WRITE_FLAG_VALID_APP_ADDR(TRUE);
 800015c:	2201      	movs	r2, #1
 800015e:	4620      	mov	r0, r4
 8000160:	4611      	mov	r1, r2
 8000162:	f001 fc47 	bl	80019f4 <HAL_RTCEx_BKUPWrite>
		__WRITE_FLAG_VALID_HASH_ADDR(TRUE);
 8000166:	4620      	mov	r0, r4
 8000168:	2201      	movs	r2, #1
 800016a:	2102      	movs	r1, #2
 800016c:	f001 fc42 	bl	80019f4 <HAL_RTCEx_BKUPWrite>
		/* Pre Init Jump */
		memset((uint32*)NVIC->ICER, 0xFF, sizeof(NVIC->ICER));
 8000170:	2220      	movs	r2, #32
 8000172:	21ff      	movs	r1, #255	; 0xff
 8000174:	480e      	ldr	r0, [pc, #56]	; (80001b0 <__vJumpToApplication+0x64>)
 8000176:	f001 fdbd 	bl	8001cf4 <memset>
		SysTick->CTRL = 0;
 800017a:	2500      	movs	r5, #0
 800017c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
		SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8000180:	4c0c      	ldr	r4, [pc, #48]	; (80001b4 <__vJumpToApplication+0x68>)
		SysTick->CTRL = 0;
 8000182:	611d      	str	r5, [r3, #16]
		SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8000184:	6863      	ldr	r3, [r4, #4]
		memset((uint32*)NVIC->ICPR, 0xFF, sizeof(NVIC->ICPR));
 8000186:	2220      	movs	r2, #32
		SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8000188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800018c:	6063      	str	r3, [r4, #4]
		memset((uint32*)NVIC->ICPR, 0xFF, sizeof(NVIC->ICPR));
 800018e:	21ff      	movs	r1, #255	; 0xff
 8000190:	4809      	ldr	r0, [pc, #36]	; (80001b8 <__vJumpToApplication+0x6c>)
 8000192:	f001 fdaf 	bl	8001cf4 <memset>
		/* Load Vector Table */
		SCB->VTOR = (uint32)(APP_START_ADDR);
 8000196:	4b09      	ldr	r3, [pc, #36]	; (80001bc <__vJumpToApplication+0x70>)
 8000198:	60a3      	str	r3, [r4, #8]
		/* Read the data stored in the first 4 bytes (Main Stack Pointer) */
		uint32 local_u32MspValue = *((uint32_t volatile *)(APP_START_ADDR));
 800019a:	681a      	ldr	r2, [r3, #0]
		/* Read the next 4 bytes from the base address (Reset Handler Function) */
		uint32 local_u32ResetHandler = *((uint32_t volatile *) (APP_START_ADDR + 4u));
 800019c:	685c      	ldr	r4, [r3, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800019e:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80001a2:	f385 8814 	msr	CONTROL, r5
		/* Set the MSP for the application */
		__set_MSP(local_u32MspValue);
		/* Set stack pointer */
		__set_CONTROL(0);
		/* Reset clock before start */
		HAL_RCC_DeInit();
 80001a6:	f000 fe99 	bl	8000edc <HAL_RCC_DeInit>
		/* Call the reset function to start the application */
		BL_DBG_SEND("Succesfully jumped to application.");
		local_vAppResetFunc();
 80001aa:	47a0      	blx	r4
	} else {
		/* Error handle */
		BL_DBG_SEND("Invalid application address");
 80001ac:	20000344 	.word	0x20000344
 80001b0:	e000e180 	.word	0xe000e180
 80001b4:	e000ed00 	.word	0xe000ed00
 80001b8:	e000e280 	.word	0xe000e280
 80001bc:	08008000 	.word	0x08008000

080001c0 <__vPipeEcho.part.0>:
__STATIC __NORETURN __vPipeEcho(const uint8* pArg_u8TxBuffer, uint8 Arg_u8Length) {
 80001c0:	b570      	push	{r4, r5, r6, lr}
 80001c2:	460c      	mov	r4, r1
		memcpy(local_u8TxBuffer, pArg_u8TxBuffer, Arg_u8Length);
 80001c4:	4d07      	ldr	r5, [pc, #28]	; (80001e4 <__vPipeEcho.part.0+0x24>)
 80001c6:	460a      	mov	r2, r1
 80001c8:	4601      	mov	r1, r0
 80001ca:	4628      	mov	r0, r5
 80001cc:	f001 fd84 	bl	8001cd8 <memcpy>
		if( (HAL_OK != PIPE_ECHO((uint8*)&local_u8TxBuffer[0], Arg_u8Length)) ) {
 80001d0:	4622      	mov	r2, r4
 80001d2:	4629      	mov	r1, r5
}
 80001d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( (HAL_OK != PIPE_ECHO((uint8*)&local_u8TxBuffer[0], Arg_u8Length)) ) {
 80001d8:	f04f 33ff 	mov.w	r3, #4294967295
 80001dc:	4802      	ldr	r0, [pc, #8]	; (80001e8 <__vPipeEcho.part.0+0x28>)
 80001de:	f001 bcb8 	b.w	8001b52 <HAL_UART_Transmit>
 80001e2:	bf00      	nop
 80001e4:	2000023c 	.word	0x2000023c
 80001e8:	20000358 	.word	0x20000358

080001ec <__vSendAck>:
	uint8 local_u8AckValue[2u] = {BL_CMD_RESPONSE_ACK, Arg_u8DatatoHostLength};
 80001ec:	2301      	movs	r3, #1
__STATIC __NORETURN __vSendAck(uint8 Arg_u8DatatoHostLength) {
 80001ee:	b507      	push	{r0, r1, r2, lr}
 80001f0:	2102      	movs	r1, #2
	uint8 local_u8AckValue[2u] = {BL_CMD_RESPONSE_ACK, Arg_u8DatatoHostLength};
 80001f2:	f88d 0005 	strb.w	r0, [sp, #5]
	if( ((NULL == pArg_u8TxBuffer) || (Arg_u8Length <= 0u)) ) {
 80001f6:	a801      	add	r0, sp, #4
	uint8 local_u8AckValue[2u] = {BL_CMD_RESPONSE_ACK, Arg_u8DatatoHostLength};
 80001f8:	f88d 3004 	strb.w	r3, [sp, #4]
 80001fc:	f7ff ffe0 	bl	80001c0 <__vPipeEcho.part.0>
}
 8000200:	b003      	add	sp, #12
 8000202:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000208 <__enPipeListen.isra.0>:
 * 
 * Max Packet length (Excluding Length): 12 + n Bytes
 * Min Packet length (Excluding Length): 12 Bytes
 * 
 */
__en_blErrStatus_t __enPipeListen(void) {
 8000208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BL_DBG_SEND("Command Listening Start pipe: %d | type: %d\n", BL_COMM_PIPE, BL_COMM_TYPE);
	__en_blErrStatus_t local_enThisFuncErrStatus = BL_E_NONE;
	packet_t local_tPacketSeralized = {0};
	
	__STATIC uint8 volatile local_u8PipeListenrBuffer[PIPE_BUFFER_MAX_SIZE];
	memset(local_u8PipeListenrBuffer, 0, PIPE_BUFFER_MAX_SIZE);
 800020c:	4da4      	ldr	r5, [pc, #656]	; (80004a0 <__enPipeListen.isra.0+0x298>)
__en_blErrStatus_t __enPipeListen(void) {
 800020e:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
	packet_t local_tPacketSeralized = {0};
 8000212:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8000216:	2100      	movs	r1, #0
 8000218:	a841      	add	r0, sp, #260	; 0x104
 800021a:	f001 fd6b 	bl	8001cf4 <memset>
	memset(local_u8PipeListenrBuffer, 0, PIPE_BUFFER_MAX_SIZE);
 800021e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000222:	2100      	movs	r1, #0
 8000224:	4628      	mov	r0, r5
 8000226:	f001 fd65 	bl	8001cf4 <memset>
	
	/* Start listening for the packet */
	BL_DBG_SEND("Waitsing for the packet length.");
	if( (HAL_OK != PIPE_LISTEN((uint8*)&local_u8PipeListenrBuffer[0], 1u)) ) {
 800022a:	f04f 33ff 	mov.w	r3, #4294967295
 800022e:	2201      	movs	r2, #1
 8000230:	4629      	mov	r1, r5
 8000232:	489c      	ldr	r0, [pc, #624]	; (80004a4 <__enPipeListen.isra.0+0x29c>)
 8000234:	f001 fcd8 	bl	8001be8 <HAL_UART_Receive>
 8000238:	2800      	cmp	r0, #0
 800023a:	f040 809f 	bne.w	800037c <__enPipeListen.isra.0+0x174>
		BL_LOG_SEND(LOGL_INFO, "Bad message");
		BL_DBG_SEND("The pipe listner is not ok.");
		local_enThisFuncErrStatus = BL_E_NOK;
	} else {	
		/* Receive the data */
		local_tPacketSeralized.PacketLength = local_u8PipeListenrBuffer[0];
 800023e:	4629      	mov	r1, r5
 8000240:	f811 4b01 	ldrb.w	r4, [r1], #1
		BL_DBG_SEND("Waiting for the packet with length (%d).", local_tPacketSeralized.PacketLength);
		
//		__vStartSessiontimeOutCount();

		if( (HAL_OK != PIPE_LISTEN((uint8*)&local_u8PipeListenrBuffer[1], local_tPacketSeralized.PacketLength)) ) {
 8000244:	f04f 33ff 	mov.w	r3, #4294967295
		local_tPacketSeralized.PacketLength = local_u8PipeListenrBuffer[0];
 8000248:	b2e4      	uxtb	r4, r4
		if( (HAL_OK != PIPE_LISTEN((uint8*)&local_u8PipeListenrBuffer[1], local_tPacketSeralized.PacketLength)) ) {
 800024a:	4622      	mov	r2, r4
 800024c:	4895      	ldr	r0, [pc, #596]	; (80004a4 <__enPipeListen.isra.0+0x29c>)
		local_tPacketSeralized.PacketLength = local_u8PipeListenrBuffer[0];
 800024e:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
		if( (HAL_OK != PIPE_LISTEN((uint8*)&local_u8PipeListenrBuffer[1], local_tPacketSeralized.PacketLength)) ) {
 8000252:	f001 fcc9 	bl	8001be8 <HAL_UART_Receive>
 8000256:	4682      	mov	sl, r0
 8000258:	2800      	cmp	r0, #0
 800025a:	f040 808f 	bne.w	800037c <__enPipeListen.isra.0+0x174>
		pArg_tPacket->DataLength = pArg_tReceivedBuffer[2];
 800025e:	78ee      	ldrb	r6, [r5, #3]
		pArg_tPacket->PacketType = pArg_tReceivedBuffer[0];
 8000260:	786b      	ldrb	r3, [r5, #1]
		pArg_tPacket->Command = pArg_tReceivedBuffer[1];
 8000262:	78af      	ldrb	r7, [r5, #2]
		memcpy((uint8*)pArg_tPacket->Data, (uint8*)&pArg_tReceivedBuffer[3], pArg_tPacket->DataLength);
 8000264:	4632      	mov	r2, r6
 8000266:	1d29      	adds	r1, r5, #4
 8000268:	a842      	add	r0, sp, #264	; 0x108
		pArg_tPacket->PacketType = pArg_tReceivedBuffer[0];
 800026a:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
		pArg_tPacket->Command = pArg_tReceivedBuffer[1];
 800026e:	f88d 7106 	strb.w	r7, [sp, #262]	; 0x106
		pArg_tPacket->DataLength = pArg_tReceivedBuffer[2];
 8000272:	f88d 6107 	strb.w	r6, [sp, #263]	; 0x107
		memcpy((uint8*)pArg_tPacket->Data, (uint8*)&pArg_tReceivedBuffer[3], pArg_tPacket->DataLength);
 8000276:	f001 fd2f 	bl	8001cd8 <memcpy>
	return local_enThisFuncErrStatus;
}

__LOCAL_INLINE __en_blErrStatus_t __enVerifyPacketCRC32(const uint32 Arg_u32ReceivedCrc32, const uint8* pArg_u8ReceivedBuffer, const uint8 Arg_u8ReceivedBufferSize) {
	__en_blErrStatus_t local_enThisFuncErrStatus = BL_E_INVALID_CRC;
	uint32 local_u32CalculatedCrc32 = 0;
 800027a:	4650      	mov	r0, sl
 800027c:	19ab      	adds	r3, r5, r6
 800027e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8000282:	f8d3 9008 	ldr.w	r9, [r3, #8]
			if( (BL_E_INVALID_CRC != __enVerifyPacketCRC32(local_tPacketSeralized.PacketCRC32, (uint8*)&local_u8PipeListenrBuffer[1], (local_tPacketSeralized.PacketLength - 4u))) ) {
 8000286:	3c04      	subs	r4, #4
	/* CRC32 using standard poly: 0x04C11DB7 */
	uint8 local_u8Counter = 0;
	for(local_u8Counter = 0; (local_u8Counter < Arg_u8ReceivedBufferSize); ++local_u8Counter) {
		uint32 temp = (uint32)pArg_u8ReceivedBuffer[local_u8Counter];
		local_u32CalculatedCrc32 = 
			HAL_CRC_Accumulate(&hcrc, &temp, 1u);
 8000288:	f8df b21c 	ldr.w	fp, [pc, #540]	; 80004a8 <__enPipeListen.isra.0+0x2a0>
		memcpy(&pArg_tPacket->DataCRC32, (uint8*)&pArg_tReceivedBuffer[3u + pArg_tPacket->DataLength], sizeof(uint32));
 800028c:	f8cd 8308 	str.w	r8, [sp, #776]	; 0x308
		memcpy(&pArg_tPacket->PacketCRC32, (uint8*)&pArg_tReceivedBuffer[7u + pArg_tPacket->DataLength], sizeof(uint32));
 8000290:	f8cd 930c 	str.w	r9, [sp, #780]	; 0x30c
			if( (BL_E_INVALID_CRC != __enVerifyPacketCRC32(local_tPacketSeralized.PacketCRC32, (uint8*)&local_u8PipeListenrBuffer[1], (local_tPacketSeralized.PacketLength - 4u))) ) {
 8000294:	b2e4      	uxtb	r4, r4
	for(local_u8Counter = 0; (local_u8Counter < Arg_u8ReceivedBufferSize); ++local_u8Counter) {
 8000296:	fa5f f38a 	uxtb.w	r3, sl
 800029a:	429c      	cmp	r4, r3
 800029c:	f105 0501 	add.w	r5, r5, #1
 80002a0:	d823      	bhi.n	80002ea <__enPipeListen.isra.0+0xe2>
	}
 	__HAL_CRC_DR_RESET(&hcrc);
 80002a2:	4d81      	ldr	r5, [pc, #516]	; (80004a8 <__enPipeListen.isra.0+0x2a0>)
	
	BL_DBG_SEND("Calculated CRC32 for packet: %X", local_u32CalculatedCrc32);
	if( (Arg_u32ReceivedCrc32 == local_u32CalculatedCrc32) ) {
 80002a4:	4548      	cmp	r0, r9
 	__HAL_CRC_DR_RESET(&hcrc);
 80002a6:	682a      	ldr	r2, [r5, #0]
 80002a8:	6893      	ldr	r3, [r2, #8]
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6093      	str	r3, [r2, #8]
	if( (Arg_u32ReceivedCrc32 == local_u32CalculatedCrc32) ) {
 80002b0:	d164      	bne.n	800037c <__enPipeListen.isra.0+0x174>
 80002b2:	f04f 0900 	mov.w	r9, #0
	uint32 local_u32CalculatedCrc32 = 0xFFFFFFFFU;
 80002b6:	f04f 30ff 	mov.w	r0, #4294967295
 80002ba:	ac42      	add	r4, sp, #264	; 0x108
	for(local_u8Counter = 0; (local_u8Counter < pArg_tReceivedPacket->DataLength); ++local_u8Counter) {
 80002bc:	fa5f f389 	uxtb.w	r3, r9
 80002c0:	429e      	cmp	r6, r3
 80002c2:	d81c      	bhi.n	80002fe <__enPipeListen.isra.0+0xf6>
  __HAL_CRC_DR_RESET(&hcrc);
 80002c4:	682a      	ldr	r2, [r5, #0]
	if( (local_u32CalculatedCrc32 == pArg_tReceivedPacket->DataCRC32 ) ) {
 80002c6:	4580      	cmp	r8, r0
  __HAL_CRC_DR_RESET(&hcrc);
 80002c8:	6893      	ldr	r3, [r2, #8]
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6093      	str	r3, [r2, #8]
	if( (local_u32CalculatedCrc32 == pArg_tReceivedPacket->DataCRC32 ) ) {
 80002d0:	d154      	bne.n	800037c <__enPipeListen.isra.0+0x174>
	switch(pArg_tPacket->Command) {
 80002d2:	2f0e      	cmp	r7, #14
 80002d4:	d848      	bhi.n	8000368 <__enPipeListen.isra.0+0x160>
 80002d6:	e8df f007 	tbb	[pc, r7]
 80002da:	3630      	.short	0x3630
 80002dc:	6462553c 	.word	0x6462553c
 80002e0:	47474797 	.word	0x47474797
 80002e4:	471d4747 	.word	0x471d4747
 80002e8:	d5          	.byte	0xd5
 80002e9:	00          	.byte	0x00
		uint32 temp = (uint32)pArg_u8ReceivedBuffer[local_u8Counter];
 80002ea:	782b      	ldrb	r3, [r5, #0]
			HAL_CRC_Accumulate(&hcrc, &temp, 1u);
 80002ec:	2201      	movs	r2, #1
 80002ee:	4658      	mov	r0, fp
 80002f0:	a901      	add	r1, sp, #4
		uint32 temp = (uint32)pArg_u8ReceivedBuffer[local_u8Counter];
 80002f2:	9301      	str	r3, [sp, #4]
		local_u32CalculatedCrc32 = 
 80002f4:	f10a 0a01 	add.w	sl, sl, #1
			HAL_CRC_Accumulate(&hcrc, &temp, 1u);
 80002f8:	f000 fbc6 	bl	8000a88 <HAL_CRC_Accumulate>
	for(local_u8Counter = 0; (local_u8Counter < Arg_u8ReceivedBufferSize); ++local_u8Counter) {
 80002fc:	e7cb      	b.n	8000296 <__enPipeListen.isra.0+0x8e>
		uint32 temp = (uint32)pArg_tReceivedPacket->Data[local_u8Counter];
 80002fe:	f814 3b01 	ldrb.w	r3, [r4], #1
			HAL_CRC_Accumulate(&hcrc, &temp, 1u);
 8000302:	2201      	movs	r2, #1
 8000304:	4628      	mov	r0, r5
 8000306:	a901      	add	r1, sp, #4
		uint32 temp = (uint32)pArg_tReceivedPacket->Data[local_u8Counter];
 8000308:	9301      	str	r3, [sp, #4]
		local_u32CalculatedCrc32 = 
 800030a:	f109 0901 	add.w	r9, r9, #1
			HAL_CRC_Accumulate(&hcrc, &temp, 1u);
 800030e:	f000 fbbb 	bl	8000a88 <HAL_CRC_Accumulate>
	for(local_u8Counter = 0; (local_u8Counter < pArg_tReceivedPacket->DataLength); ++local_u8Counter) {
 8000312:	e7d3      	b.n	80002bc <__enPipeListen.isra.0+0xb4>
 * 
 */

__STATIC __en_blErrStatus_t __enCmdHandler_CBL_GET_INFO_CMD(void) {
	__en_blErrStatus_t local_enThisFuncErrStatus = BL_E_OK;
	uint8 local_u8Info[] = "This bootloader is made by Mohamed Ashraf Wx Copyright (C) Wx Inc, 2023";
 8000314:	4965      	ldr	r1, [pc, #404]	; (80004ac <__enPipeListen.isra.0+0x2a4>)
 8000316:	2248      	movs	r2, #72	; 0x48
 8000318:	a801      	add	r0, sp, #4
 800031a:	f001 fcdd 	bl	8001cd8 <memcpy>

	__vSendAck(sizeof(local_u8Info));
 800031e:	2048      	movs	r0, #72	; 0x48
 8000320:	f7ff ff64 	bl	80001ec <__vSendAck>
	if( ((NULL == pArg_u8TxBuffer) || (Arg_u8Length <= 0u)) ) {
 8000324:	2148      	movs	r1, #72	; 0x48
 8000326:	a801      	add	r0, sp, #4
 8000328:	f7ff ff4a 	bl	80001c0 <__vPipeEcho.part.0>
						__vSendAck(0u);
 800032c:	2000      	movs	r0, #0
}
 800032e:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
 8000332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						__vSendAck(0u);
 8000336:	f7ff bf59 	b.w	80001ec <__vSendAck>
		BOOTLOADER_SW_MAJOR_VERSION,
		BOOTLOADER_SW_MINOR_VERSION,
		BOOTLOADER_SW_PATCH_VERSION
	};
	
	__vSendAck(sizeof(local_u8BootloaderVersion));
 800033a:	2003      	movs	r0, #3
 800033c:	f7ff ff56 	bl	80001ec <__vSendAck>
	if( ((NULL == pArg_u8TxBuffer) || (Arg_u8Length <= 0u)) ) {
 8000340:	2103      	movs	r1, #3
 8000342:	485b      	ldr	r0, [pc, #364]	; (80004b0 <__enPipeListen.isra.0+0x2a8>)
 8000344:	e7f0      	b.n	8000328 <__enPipeListen.isra.0+0x120>
		[9] =	CBL_OTP_READ_CMD,			
		[10] =	CBL_DIS_R_W_PROTECT_CMD,
		[11] =	CBL_READ_SECTOR_STATUS 
	};
	
	__vSendAck(sizeof(local_u8Commands));
 8000346:	200f      	movs	r0, #15
 8000348:	f7ff ff50 	bl	80001ec <__vSendAck>
	if( ((NULL == pArg_u8TxBuffer) || (Arg_u8Length <= 0u)) ) {
 800034c:	210f      	movs	r1, #15
 800034e:	4859      	ldr	r0, [pc, #356]	; (80004b4 <__enPipeListen.isra.0+0x2ac>)
 8000350:	e7ea      	b.n	8000328 <__enPipeListen.isra.0+0x120>
	return local_enThisFuncErrStatus; 
}
__STATIC __en_blErrStatus_t __enCmdHandler_CBL_GET_CID_CMD(void) {
	__en_blErrStatus_t local_enThisFuncErrStatus = BL_E_NONE;
	
	uint32 local_u32CID = HAL_GetDEVID();
 8000352:	f000 fb29 	bl	80009a8 <HAL_GetDEVID>
 8000356:	9001      	str	r0, [sp, #4]
	__vSendAck(4u);
 8000358:	2004      	movs	r0, #4
 800035a:	f7ff ff47 	bl	80001ec <__vSendAck>
	if( ((NULL == pArg_u8TxBuffer) || (Arg_u8Length <= 0u)) ) {
 800035e:	2104      	movs	r1, #4
 8000360:	eb0d 0001 	add.w	r0, sp, r1
 8000364:	f7ff ff2c 	bl	80001c0 <__vPipeEcho.part.0>
	uint8 local_u8NackValue[2u] = {BL_CMD_RESPONSE_NACK, Arg_u8ErrorCode};
 8000368:	2300      	movs	r3, #0
 800036a:	f88d 3004 	strb.w	r3, [sp, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	2102      	movs	r1, #2
 8000372:	a801      	add	r0, sp, #4
 8000374:	f88d 3005 	strb.w	r3, [sp, #5]
	if( ((NULL == pArg_u8TxBuffer) || (Arg_u8Length <= 0u)) ) {
 8000378:	f7ff ff22 	bl	80001c0 <__vPipeEcho.part.0>
}
 800037c:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
 8000380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__en_blErrStatus_t local_enThisFuncErrStatus = BL_E_NONE;

	FLASH_OBProgramInitTypeDef L_StMyFlashRDPSett;

	/* Get the RDP level */
	HAL_FLASHEx_OBGetConfig(&L_StMyFlashRDPSett);
 8000384:	a801      	add	r0, sp, #4
 8000386:	f000 fc4f 	bl	8000c28 <HAL_FLASHEx_OBGetConfig>

	if( (L_StMyFlashRDPSett.RDPLevel < 0) ) {
		BL_DBG_SEND("Invalid RDP level read");
		local_enThisFuncErrStatus = BL_E_NOK;
	} else {
		*pArg_u8RdpLevel = (uint8)L_StMyFlashRDPSett.RDPLevel;
 800038a:	f89d 3014 	ldrb.w	r3, [sp, #20]
		__vSendAck(1u);
 800038e:	2001      	movs	r0, #1
		*pArg_u8RdpLevel = (uint8)L_StMyFlashRDPSett.RDPLevel;
 8000390:	f88d 3000 	strb.w	r3, [sp]
		__vSendAck(1u);
 8000394:	f7ff ff2a 	bl	80001ec <__vSendAck>
	if( ((NULL == pArg_u8TxBuffer) || (Arg_u8Length <= 0u)) ) {
 8000398:	2101      	movs	r1, #1
 800039a:	4668      	mov	r0, sp
 800039c:	e7c4      	b.n	8000328 <__enPipeListen.isra.0+0x120>
	BTL_SELF_TERMINATE_GUARD:
	return local_enThisFuncErrStatus;
}

__LOCAL_INLINE __en_blErrStatus_t __enJumpToAddress(uint32 Arg_u32Address) {
	__vJumpToApplication();
 800039e:	f7ff fed5 	bl	800014c <__vJumpToApplication>
	uint8 local_u8PageIdx = pArg_u8Data[0];
 80003a2:	f89d 3108 	ldrb.w	r3, [sp, #264]	; 0x108
	if (Arg_u8PageIdx > BTL_FLASH_MASS_ERASE) {
 80003a6:	2b41      	cmp	r3, #65	; 0x41
 80003a8:	d8de      	bhi.n	8000368 <__enPipeListen.isra.0+0x160>
		if (BTL_FLASH_MASS_ERASE == Arg_u8PageIdx) {
 80003aa:	d115      	bne.n	80003d8 <__enPipeListen.isra.0+0x1d0>
			local_stMyErasingConfig.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80003ac:	2302      	movs	r3, #2
 80003ae:	9301      	str	r3, [sp, #4]
			local_stMyErasingConfig.Banks = FLASH_BANK_1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	9302      	str	r3, [sp, #8]
			uint32 local_u32PageEraseErr = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	9300      	str	r3, [sp, #0]
			if (HAL_OK == HAL_FLASH_Unlock()) {
 80003b8:	f000 fba0 	bl	8000afc <HAL_FLASH_Unlock>
 80003bc:	2800      	cmp	r0, #0
 80003be:	d1d3      	bne.n	8000368 <__enPipeListen.isra.0+0x160>
				if(HAL_OK == HAL_FLASHEx_Erase(&local_stMyErasingConfig, &local_u32PageEraseErr)) {
 80003c0:	4669      	mov	r1, sp
 80003c2:	a801      	add	r0, sp, #4
 80003c4:	f000 fc56 	bl	8000c74 <HAL_FLASHEx_Erase>
 80003c8:	2800      	cmp	r0, #0
 80003ca:	d1cd      	bne.n	8000368 <__enPipeListen.isra.0+0x160>
						if (0xFFFFFFFFU == local_u32PageEraseErr) { 
 80003cc:	9b00      	ldr	r3, [sp, #0]
 80003ce:	3301      	adds	r3, #1
 80003d0:	d017      	beq.n	8000402 <__enPipeListen.isra.0+0x1fa>
						if (HAL_OK == HAL_FLASH_Lock()) {
 80003d2:	f000 fba5 	bl	8000b20 <HAL_FLASH_Lock>
	return local_enThisFuncErrStatus;
 80003d6:	e7c7      	b.n	8000368 <__enPipeListen.isra.0+0x160>
				local_stMyErasingConfig.TypeErase = FLASH_TYPEERASE_PAGES;
 80003d8:	2000      	movs	r0, #0
			uint8_t local_u8RemainingPages = BTL_FLASH_MAX_PAGE_NUM - Arg_u8PageIdx;
 80003da:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
	uint32 local_u32PageAddress = (FLASH_BASE) | (Arg_u8PageIdx * STM32F103C8Tx_FLASH_PAGE_SIZE);
 80003de:	029b      	lsls	r3, r3, #10
 80003e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003e4:	f89d 1109 	ldrb.w	r1, [sp, #265]	; 0x109
 80003e8:	b2d2      	uxtb	r2, r2
				local_stMyErasingConfig.PageAddress = __vPageIdx2PhysicalAddress(Arg_u8PageIdx);
 80003ea:	9303      	str	r3, [sp, #12]
	if( (local_u32PageAddress < FLASH_BASE) || (local_u32PageAddress > STM32F103C8Tx_FLASH_END) ) {
 80003ec:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
				local_stMyErasingConfig.NbPages = Arg_u8NumOfPages;
 80003f0:	4291      	cmp	r1, r2
 80003f2:	bf94      	ite	ls
 80003f4:	9104      	strls	r1, [sp, #16]
 80003f6:	9204      	strhi	r2, [sp, #16]
				if( (local_stMyErasingConfig.PageAddress >= BTL_FIRMWARE_START_ADDRESS) &&
 80003f8:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
				local_stMyErasingConfig.TypeErase = FLASH_TYPEERASE_PAGES;
 80003fc:	9001      	str	r0, [sp, #4]
				if( (local_stMyErasingConfig.PageAddress >= BTL_FIRMWARE_START_ADDRESS) &&
 80003fe:	d8d7      	bhi.n	80003b0 <__enPipeListen.isra.0+0x1a8>
 8000400:	e7b2      	b.n	8000368 <__enPipeListen.isra.0+0x160>
						if (HAL_OK == HAL_FLASH_Lock()) {
 8000402:	f000 fb8d 	bl	8000b20 <HAL_FLASH_Lock>
	return local_enThisFuncErrStatus;
 8000406:	e791      	b.n	800032c <__enPipeListen.isra.0+0x124>
	uint8 local_u8Data[256] = {0};
 8000408:	2100      	movs	r1, #0
	uint8 local_u8DataLength = *((uint8*)&pArg_u8Data[4]);
 800040a:	f89d 510c 	ldrb.w	r5, [sp, #268]	; 0x10c
	uint8 local_u8Data[256] = {0};
 800040e:	22fc      	movs	r2, #252	; 0xfc
	uint32 local_u32BaseAdrress = *((uint32*)&pArg_u8Data[0]);
 8000410:	9e42      	ldr	r6, [sp, #264]	; 0x108
	uint8 local_u8Data[256] = {0};
 8000412:	af01      	add	r7, sp, #4
 8000414:	6039      	str	r1, [r7, #0]
 8000416:	a802      	add	r0, sp, #8
 8000418:	f001 fc6c 	bl	8001cf4 <memset>
	memcpy((uint8*)&local_u8Data[0], (uint8*)&pArg_u8Data[5], local_u8DataLength);
 800041c:	462a      	mov	r2, r5
 800041e:	4638      	mov	r0, r7
 8000420:	f20d 110d 	addw	r1, sp, #269	; 0x10d
 8000424:	f001 fc58 	bl	8001cd8 <memcpy>
	if( ((Arg_u32McuAddressValue >= FLASH_BASE) && (Arg_u32McuAddressValue <= STM32F103C8Tx_FLASH_END)) ||
 8000428:	f106 4378 	add.w	r3, r6, #4160749568	; 0xf8000000
 800042c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000430:	d904      	bls.n	800043c <__enPipeListen.isra.0+0x234>
			((Arg_u32McuAddressValue >= SRAM_BASE) && (Arg_u32McuAddressValue <= STM32F103C8Tx_SRAM1_END))) {
 8000432:	f106 4360 	add.w	r3, r6, #3758096384	; 0xe0000000
	if( ((Arg_u32McuAddressValue >= FLASH_BASE) && (Arg_u32McuAddressValue <= STM32F103C8Tx_FLASH_END)) ||
 8000436:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800043a:	d895      	bhi.n	8000368 <__enPipeListen.isra.0+0x160>
 */
__LOCAL_INLINE __en_blErrStatus_t __enWriteToAddr(const uint8* pArg_u8Data, const uint32 Arg_u32BaseAddr, uint16 Arg_u16Length) {
  __en_blErrStatus_t local_enThisFuncErrStatus = BL_E_OK;
  
  if (BL_E_OK == __enVerifyAddress(Arg_u32BaseAddr)) {
    if (HAL_OK == HAL_FLASH_Unlock()) {
 800043c:	f000 fb5e 	bl	8000afc <HAL_FLASH_Unlock>
 8000440:	4604      	mov	r4, r0
 8000442:	2800      	cmp	r0, #0
 8000444:	f47f af72 	bne.w	800032c <__enPipeListen.isra.0+0x124>
      uint16 local_u16DataCounter = 0;
      uint16 local_u16HwordData = 0;
      
      for (local_u16DataCounter = 0; local_u16DataCounter < (Arg_u16Length-1u); local_u16DataCounter += 2u) {
 8000448:	3d01      	subs	r5, #1
        local_u16HwordData = /* Combining two QW as HW for HWORD RES FPEC compatbility */
					(pArg_u8Data[local_u16DataCounter] | (pArg_u8Data[local_u16DataCounter + 1] << 8u));
 800044a:	f10d 0805 	add.w	r8, sp, #5
 800044e:	e00c      	b.n	800046a <__enPipeListen.isra.0+0x262>
 8000450:	5d3b      	ldrb	r3, [r7, r4]
 8000452:	f818 2004 	ldrb.w	r2, [r8, r4]
      	BL_DBG_SEND("Writing %X to address %p", local_u16HwordData, (Arg_u32BaseAddr + local_u16DataCounter));
        if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, (Arg_u32BaseAddr + local_u16DataCounter), local_u16HwordData)) {
 8000456:	2001      	movs	r0, #1
 8000458:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800045c:	1931      	adds	r1, r6, r4
 800045e:	2300      	movs	r3, #0
 8000460:	f000 fb92 	bl	8000b88 <HAL_FLASH_Program>
 8000464:	b960      	cbnz	r0, 8000480 <__enPipeListen.isra.0+0x278>
      for (local_u16DataCounter = 0; local_u16DataCounter < (Arg_u16Length-1u); local_u16DataCounter += 2u) {
 8000466:	3402      	adds	r4, #2
 8000468:	b2a4      	uxth	r4, r4
 800046a:	42ac      	cmp	r4, r5
 800046c:	d3f0      	bcc.n	8000450 <__enPipeListen.isra.0+0x248>
  __en_blErrStatus_t local_enThisFuncErrStatus = BL_E_OK;
 800046e:	2400      	movs	r4, #0
        } else {
          BL_DBG_SEND("Written 0x%04X to address %p successfully", local_u16HwordData, (Arg_u32BaseAddr + local_u16DataCounter));
        }
      }
      
      if (HAL_OK == HAL_FLASH_Lock()) {
 8000470:	f000 fb56 	bl	8000b20 <HAL_FLASH_Lock>
 8000474:	4320      	orrs	r0, r4
 8000476:	b2c0      	uxtb	r0, r0
 8000478:	2800      	cmp	r0, #0
 800047a:	f43f af57 	beq.w	800032c <__enPipeListen.isra.0+0x124>
 800047e:	e773      	b.n	8000368 <__enPipeListen.isra.0+0x160>
					local_enThisFuncErrStatus = BL_E_NOK;
 8000480:	2401      	movs	r4, #1
 8000482:	e7f5      	b.n	8000470 <__enPipeListen.isra.0+0x268>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000484:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000488:	490b      	ldr	r1, [pc, #44]	; (80004b8 <__enPipeListen.isra.0+0x2b0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <__enPipeListen.isra.0+0x2b4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800048c:	68ca      	ldr	r2, [r1, #12]
 800048e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000492:	4313      	orrs	r3, r2
 8000494:	60cb      	str	r3, [r1, #12]
 8000496:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800049a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800049c:	e7fd      	b.n	800049a <__enPipeListen.isra.0+0x292>
 800049e:	bf00      	nop
 80004a0:	2000003c 	.word	0x2000003c
 80004a4:	20000358 	.word	0x20000358
 80004a8:	2000033c 	.word	0x2000033c
 80004ac:	08001d1c 	.word	0x08001d1c
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000003 	.word	0x20000003
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	05fa0004 	.word	0x05fa0004

080004c0 <BL_enBootManager>:
 */
__NORETURN BL_enBootManager(void) {
	BL_LOG_SEND(LOGL_INFO, "Bootloader manager started, looking for a valid application");
	BL_DBG_SEND("Started the boot manager");

	if(FALSE == __READ_FLAG_APP_TO_BL_ADDR()) {
 80004c0:	2103      	movs	r1, #3
__NORETURN BL_enBootManager(void) {
 80004c2:	b508      	push	{r3, lr}
	if(FALSE == __READ_FLAG_APP_TO_BL_ADDR()) {
 80004c4:	480f      	ldr	r0, [pc, #60]	; (8000504 <BL_enBootManager+0x44>)
 80004c6:	f001 fa9d 	bl	8001a04 <HAL_RTCEx_BKUPRead>
 80004ca:	4602      	mov	r2, r0
 80004cc:	b940      	cbnz	r0, 80004e0 <BL_enBootManager+0x20>
	uint32 local_u32ResetVectorAddrValue = *((uint32*)APP_START_ADDR + 4);
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <BL_enBootManager+0x48>)
		__WRITE_FLAG_VALID_APP_ADDR(FALSE);
 80004d0:	2101      	movs	r1, #1
	if (local_u32ResetVectorAddrValue != 0xFFFFFFFFUL) {
 80004d2:	691b      	ldr	r3, [r3, #16]
		__WRITE_FLAG_VALID_APP_ADDR(FALSE);
 80004d4:	480b      	ldr	r0, [pc, #44]	; (8000504 <BL_enBootManager+0x44>)
	if (local_u32ResetVectorAddrValue != 0xFFFFFFFFUL) {
 80004d6:	3301      	adds	r3, #1
		__WRITE_FLAG_VALID_APP_ADDR(TRUE);
 80004d8:	bf18      	it	ne
 80004da:	2201      	movne	r2, #1
		__WRITE_FLAG_VALID_APP_ADDR(FALSE);
 80004dc:	f001 fa8a 	bl	80019f4 <HAL_RTCEx_BKUPWrite>
		__vCheckForAppValidity();
	} else;

	if( (TRUE == __READ_FLAG_APP_TO_BL_ADDR()) || (FALSE == __READ_FLAG_VALID_APP_ADDR()) ) {
 80004e0:	2103      	movs	r1, #3
 80004e2:	4808      	ldr	r0, [pc, #32]	; (8000504 <BL_enBootManager+0x44>)
 80004e4:	f001 fa8e 	bl	8001a04 <HAL_RTCEx_BKUPRead>
 80004e8:	2801      	cmp	r0, #1
 80004ea:	d103      	bne.n	80004f4 <BL_enBootManager+0x34>
		} else {
			;
		}
#endif /* BL_SECURE_BOOT */
	}
}
 80004ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__enPipeListen();
 80004f0:	f7ff be8a 	b.w	8000208 <__enPipeListen.isra.0>
	if( (TRUE == __READ_FLAG_APP_TO_BL_ADDR()) || (FALSE == __READ_FLAG_VALID_APP_ADDR()) ) {
 80004f4:	2101      	movs	r1, #1
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <BL_enBootManager+0x44>)
 80004f8:	f001 fa84 	bl	8001a04 <HAL_RTCEx_BKUPRead>
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d0f5      	beq.n	80004ec <BL_enBootManager+0x2c>
		__vJumpToApplication();
 8000500:	f7ff fe24 	bl	800014c <__vJumpToApplication>
 8000504:	20000344 	.word	0x20000344
 8000508:	08008000 	.word	0x08008000

0800050c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800050c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_CRC_Init+0x18>)
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <MX_CRC_Init+0x1c>)
 8000512:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000514:	f000 faa8 	bl	8000a68 <HAL_CRC_Init>
 8000518:	b118      	cbz	r0, 8000522 <MX_CRC_Init+0x16>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800051a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800051e:	f000 b8bc 	b.w	800069a <Error_Handler>
}
 8000522:	bd08      	pop	{r3, pc}
 8000524:	2000033c 	.word	0x2000033c
 8000528:	40023000 	.word	0x40023000

0800052c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800052c:	6802      	ldr	r2, [r0, #0]
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_CRC_MspInit+0x24>)
{
 8000530:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000532:	429a      	cmp	r2, r3
 8000534:	d10a      	bne.n	800054c <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000536:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000540:	615a      	str	r2, [r3, #20]
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800054c:	b002      	add	sp, #8
 800054e:	4770      	bx	lr
 8000550:	40023000 	.word	0x40023000

08000554 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	2300      	movs	r3, #0
{
 8000556:	b510      	push	{r4, lr}
 8000558:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000562:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000566:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000568:	2403      	movs	r4, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	f042 0210 	orr.w	r2, r2, #16
 800056e:	619a      	str	r2, [r3, #24]
 8000570:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000572:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000574:	f002 0210 	and.w	r2, r2, #16
 8000578:	9200      	str	r2, [sp, #0]
 800057a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057e:	4819      	ldr	r0, [pc, #100]	; (80005e4 <MX_GPIO_Init+0x90>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000580:	f042 0220 	orr.w	r2, r2, #32
 8000584:	619a      	str	r2, [r3, #24]
 8000586:	699a      	ldr	r2, [r3, #24]
 8000588:	f002 0220 	and.w	r2, r2, #32
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	699a      	ldr	r2, [r3, #24]
 8000592:	f042 0204 	orr.w	r2, r2, #4
 8000596:	619a      	str	r2, [r3, #24]
 8000598:	699a      	ldr	r2, [r3, #24]
 800059a:	f002 0204 	and.w	r2, r2, #4
 800059e:	9202      	str	r2, [sp, #8]
 80005a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	699a      	ldr	r2, [r3, #24]
 80005a4:	f042 0208 	orr.w	r2, r2, #8
 80005a8:	619a      	str	r2, [r3, #24]
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0308 	and.w	r3, r3, #8
 80005b0:	9303      	str	r3, [sp, #12]
 80005b2:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80005b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	f000 fbae 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005c0:	f64f 13f3 	movw	r3, #63987	; 0xf9f3
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	a904      	add	r1, sp, #16
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <MX_GPIO_Init+0x94>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f000 fba6 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80005d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_GPIO_Init+0x98>)
 80005d6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	f000 fb9e 	bl	8000d1c <HAL_GPIO_Init>

}
 80005e0:	b008      	add	sp, #32
 80005e2:	bd10      	pop	{r4, pc}
 80005e4:	40011000 	.word	0x40011000
 80005e8:	40010800 	.word	0x40010800
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f4:	2210      	movs	r2, #16
 80005f6:	2100      	movs	r1, #0
 80005f8:	a80c      	add	r0, sp, #48	; 0x30
 80005fa:	f001 fb7b 	bl	8001cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fe:	2214      	movs	r2, #20
 8000600:	2100      	movs	r1, #0
 8000602:	eb0d 0002 	add.w	r0, sp, r2
 8000606:	f001 fb75 	bl	8001cf4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060a:	2210      	movs	r2, #16
 800060c:	2100      	movs	r1, #0
 800060e:	a801      	add	r0, sp, #4
 8000610:	f001 fb70 	bl	8001cf4 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	2209      	movs	r2, #9
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000626:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800062e:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000630:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f000 fcbf 	bl	8000fb4 <HAL_RCC_OscConfig>
 8000636:	b108      	cbz	r0, 800063c <SystemClock_Config+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063a:	e7fe      	b.n	800063a <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064c:	4629      	mov	r1, r5
 800064e:	a805      	add	r0, sp, #20
 8000650:	f000 fe78 	bl	8001344 <HAL_RCC_ClockConfig>
 8000654:	b108      	cbz	r0, 800065a <SystemClock_Config+0x6a>
 8000656:	b672      	cpsid	i
  while (1)
 8000658:	e7fe      	b.n	8000658 <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800065a:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000660:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000662:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000664:	f000 ff38 	bl	80014d8 <HAL_RCCEx_PeriphCLKConfig>
 8000668:	b108      	cbz	r0, 800066e <SystemClock_Config+0x7e>
 800066a:	b672      	cpsid	i
  while (1)
 800066c:	e7fe      	b.n	800066c <SystemClock_Config+0x7c>
  HAL_RCC_EnableCSS();
 800066e:	f000 fe3d 	bl	80012ec <HAL_RCC_EnableCSS>
}
 8000672:	b015      	add	sp, #84	; 0x54
 8000674:	bd30      	pop	{r4, r5, pc}

08000676 <main>:
{
 8000676:	b508      	push	{r3, lr}
  HAL_Init();
 8000678:	f000 f972 	bl	8000960 <HAL_Init>
  SystemClock_Config();
 800067c:	f7ff ffb8 	bl	80005f0 <SystemClock_Config>
  MX_GPIO_Init();
 8000680:	f7ff ff68 	bl	8000554 <MX_GPIO_Init>
  MX_CRC_Init();
 8000684:	f7ff ff42 	bl	800050c <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000688:	f000 f886 	bl	8000798 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800068c:	f000 f8a0 	bl	80007d0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000690:	f000 f806 	bl	80006a0 <MX_RTC_Init>
	  BL_enBootManager();
 8000694:	f7ff ff14 	bl	80004c0 <BL_enBootManager>
  while (1)
 8000698:	e7fc      	b.n	8000694 <main+0x1e>

0800069a <Error_Handler>:
 800069a:	b672      	cpsid	i
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x2>
	...

080006a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80006a0:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
  RTC_TimeTypeDef sTime = {0};
 80006a6:	2400      	movs	r4, #0
  hrtc.Instance = RTC;
 80006a8:	4817      	ldr	r0, [pc, #92]	; (8000708 <MX_RTC_Init+0x68>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80006aa:	4a18      	ldr	r2, [pc, #96]	; (800070c <MX_RTC_Init+0x6c>)
  RTC_TimeTypeDef sTime = {0};
 80006ac:	f8ad 4000 	strh.w	r4, [sp]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80006b0:	e9c0 2300 	strd	r2, r3, [r0]
  RTC_TimeTypeDef sTime = {0};
 80006b4:	f88d 4002 	strb.w	r4, [sp, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80006b8:	9401      	str	r4, [sp, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80006ba:	6084      	str	r4, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006bc:	f001 f952 	bl	8001964 <HAL_RTC_Init>
 80006c0:	b108      	cbz	r0, 80006c6 <MX_RTC_Init+0x26>
  {
    Error_Handler();
 80006c2:	f7ff ffea 	bl	800069a <Error_Handler>
  */
  sTime.Hours = 0;
  sTime.Minutes = 0;
  sTime.Seconds = 0;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006c6:	2200      	movs	r2, #0
 80006c8:	4669      	mov	r1, sp
 80006ca:	480f      	ldr	r0, [pc, #60]	; (8000708 <MX_RTC_Init+0x68>)
  sTime.Hours = 0;
 80006cc:	f88d 4000 	strb.w	r4, [sp]
  sTime.Minutes = 0;
 80006d0:	f88d 4001 	strb.w	r4, [sp, #1]
  sTime.Seconds = 0;
 80006d4:	f88d 4002 	strb.w	r4, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006d8:	f001 f880 	bl	80017dc <HAL_RTC_SetTime>
 80006dc:	b108      	cbz	r0, 80006e2 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 80006de:	f7ff ffdc 	bl	800069a <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006e2:	2301      	movs	r3, #1
  DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.Date = 1;
  DateToUpdate.Year = 0;
 80006e4:	2200      	movs	r2, #0

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <MX_RTC_Init+0x68>)
 80006e8:	a901      	add	r1, sp, #4
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006ea:	f88d 3004 	strb.w	r3, [sp, #4]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80006ee:	f88d 3005 	strb.w	r3, [sp, #5]
  DateToUpdate.Date = 1;
 80006f2:	f88d 3006 	strb.w	r3, [sp, #6]
  DateToUpdate.Year = 0;
 80006f6:	f88d 2007 	strb.w	r2, [sp, #7]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80006fa:	f001 f8bf 	bl	800187c <HAL_RTC_SetDate>
 80006fe:	b108      	cbz	r0, 8000704 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000700:	f7ff ffcb 	bl	800069a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000704:	b002      	add	sp, #8
 8000706:	bd10      	pop	{r4, pc}
 8000708:	20000344 	.word	0x20000344
 800070c:	40002800 	.word	0x40002800

08000710 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000710:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <HAL_RTC_MspInit+0x30>)
 8000714:	6802      	ldr	r2, [r0, #0]
 8000716:	429a      	cmp	r2, r3
 8000718:	d10f      	bne.n	800073a <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800071a:	f000 fbd9 	bl	8000ed0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_RTC_MspInit+0x34>)
 8000720:	69da      	ldr	r2, [r3, #28]
 8000722:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000726:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000728:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <HAL_RTC_MspInit+0x38>)
 8000736:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800073a:	b003      	add	sp, #12
 800073c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000740:	40002800 	.word	0x40002800
 8000744:	40021000 	.word	0x40021000
 8000748:	42420000 	.word	0x42420000

0800074c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <HAL_MspInit+0x2c>)
{
 800074e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	f042 0201 	orr.w	r2, r2, #1
 8000756:	619a      	str	r2, [r3, #24]
 8000758:	699a      	ldr	r2, [r3, #24]
 800075a:	f002 0201 	and.w	r2, r2, #1
 800075e:	9200      	str	r2, [sp, #0]
 8000760:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	69da      	ldr	r2, [r3, #28]
 8000764:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000768:	61da      	str	r2, [r3, #28]
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000774:	b002      	add	sp, #8
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800077e:	f000 fe9f 	bl	80014c0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <NMI_Handler+0x6>

08000784 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <HardFault_Handler>

08000786 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <MemManage_Handler>

08000788 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <BusFault_Handler>

0800078a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <UsageFault_Handler>

0800078c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078c:	4770      	bx	lr

0800078e <DebugMon_Handler>:
 800078e:	4770      	bx	lr

08000790 <PendSV_Handler>:
 8000790:	4770      	bx	lr

08000792 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000792:	f000 b8f7 	b.w	8000984 <HAL_IncTick>

08000796 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000796:	4770      	bx	lr

08000798 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000798:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800079a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <MX_USART1_UART_Init+0x34>)
 80007a2:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b2:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b6:	f001 f99d 	bl	8001af4 <HAL_UART_Init>
 80007ba:	b118      	cbz	r0, 80007c4 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80007c0:	f7ff bf6b 	b.w	800069a <Error_Handler>
}
 80007c4:	bd08      	pop	{r3, pc}
 80007c6:	bf00      	nop
 80007c8:	20000358 	.word	0x20000358
 80007cc:	40013800 	.word	0x40013800

080007d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007d0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate = 1500000;
 80007d4:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <MX_USART2_UART_Init+0x30>)
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x34>)
 80007d8:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007dc:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007de:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e4:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e8:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ea:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ec:	f001 f982 	bl	8001af4 <HAL_UART_Init>
 80007f0:	b118      	cbz	r0, 80007fa <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80007f6:	f7ff bf50 	b.w	800069a <Error_Handler>
}
 80007fa:	bd08      	pop	{r3, pc}
 80007fc:	200003a0 	.word	0x200003a0
 8000800:	40004400 	.word	0x40004400
 8000804:	0016e360 	.word	0x0016e360

08000808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	2210      	movs	r2, #16
{
 800080a:	b510      	push	{r4, lr}
 800080c:	4604      	mov	r4, r0
 800080e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	eb0d 0002 	add.w	r0, sp, r2
 8000814:	2100      	movs	r1, #0
 8000816:	f001 fa6d 	bl	8001cf4 <memset>
  if(uartHandle->Instance==USART1)
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	4a27      	ldr	r2, [pc, #156]	; (80008bc <HAL_UART_MspInit+0xb4>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d129      	bne.n	8000876 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <HAL_UART_MspInit+0xb8>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8000828:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	4826      	ldr	r0, [pc, #152]	; (80008c4 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800082c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000830:	619a      	str	r2, [r3, #24]
 8000832:	699a      	ldr	r2, [r3, #24]
 8000834:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000838:	9200      	str	r2, [sp, #0]
 800083a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	699a      	ldr	r2, [r3, #24]
 800083e:	f042 0204 	orr.w	r2, r2, #4
 8000842:	619a      	str	r2, [r3, #24]
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000854:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f000 fa5f 	bl	8000d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800085e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000862:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	4817      	ldr	r0, [pc, #92]	; (80008c4 <HAL_UART_MspInit+0xbc>)
 8000868:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f000 fa55 	bl	8000d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000872:	b008      	add	sp, #32
 8000874:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <HAL_UART_MspInit+0xc0>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d1fa      	bne.n	8000872 <HAL_UART_MspInit+0x6a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_UART_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	4811      	ldr	r0, [pc, #68]	; (80008c4 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000880:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8000884:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000888:	61da      	str	r2, [r3, #28]
 800088a:	69da      	ldr	r2, [r3, #28]
 800088c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000890:	9202      	str	r2, [sp, #8]
 8000892:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	699a      	ldr	r2, [r3, #24]
 8000896:	f042 0204 	orr.w	r2, r2, #4
 800089a:	619a      	str	r2, [r3, #24]
 800089c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	9303      	str	r3, [sp, #12]
 80008a6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f000 fa33 	bl	8000d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b6:	2308      	movs	r3, #8
 80008b8:	e7d3      	b.n	8000862 <HAL_UART_MspInit+0x5a>
 80008ba:	bf00      	nop
 80008bc:	40013800 	.word	0x40013800
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010800 	.word	0x40010800
 80008c8:	40004400 	.word	0x40004400

080008cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008cc:	f7ff ff63 	bl	8000796 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008d2:	490c      	ldr	r1, [pc, #48]	; (8000904 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008d4:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a09      	ldr	r2, [pc, #36]	; (800090c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008e8:	4c09      	ldr	r4, [pc, #36]	; (8000910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f6:	f001 f9cb 	bl	8001c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fa:	f7ff febc 	bl	8000676 <main>
  bx lr
 80008fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000908:	08001da8 	.word	0x08001da8
  ldr r2, =_sbss
 800090c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000910:	20000410 	.word	0x20000410

08000914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC1_2_IRQHandler>
	...

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_InitTick+0x3c>)
{
 800091c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091e:	7818      	ldrb	r0, [r3, #0]
 8000920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000924:	fbb3 f3f0 	udiv	r3, r3, r0
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <HAL_InitTick+0x40>)
 800092a:	6810      	ldr	r0, [r2, #0]
 800092c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000930:	f000 f886 	bl	8000a40 <HAL_SYSTICK_Config>
 8000934:	4604      	mov	r4, r0
 8000936:	b958      	cbnz	r0, 8000950 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000938:	2d0f      	cmp	r5, #15
 800093a:	d809      	bhi.n	8000950 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	4602      	mov	r2, r0
 800093e:	4629      	mov	r1, r5
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f84a 	bl	80009dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4620      	mov	r0, r4
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <HAL_InitTick+0x44>)
 800094c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800094e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000950:	2001      	movs	r0, #1
 8000952:	e7fc      	b.n	800094e <HAL_InitTick+0x36>
 8000954:	20000018 	.word	0x20000018
 8000958:	20000014 	.word	0x20000014
 800095c:	2000001c 	.word	0x2000001c

08000960 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <HAL_Init+0x20>)
{
 8000962:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000966:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	f043 0310 	orr.w	r3, r3, #16
 800096c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096e:	f000 f823 	bl	80009b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	200f      	movs	r0, #15
 8000974:	f7ff ffd0 	bl	8000918 <HAL_InitTick>
  HAL_MspInit();
 8000978:	f7ff fee8 	bl	800074c <HAL_MspInit>
}
 800097c:	2000      	movs	r0, #0
 800097e:	bd08      	pop	{r3, pc}
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000984:	4a03      	ldr	r2, [pc, #12]	; (8000994 <HAL_IncTick+0x10>)
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <HAL_IncTick+0x14>)
 8000988:	6811      	ldr	r1, [r2, #0]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	440b      	add	r3, r1
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	200003e8 	.word	0x200003e8
 8000998:	20000018 	.word	0x20000018

0800099c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800099c:	4b01      	ldr	r3, [pc, #4]	; (80009a4 <HAL_GetTick+0x8>)
 800099e:	6818      	ldr	r0, [r3, #0]
}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200003e8 	.word	0x200003e8

080009a8 <HAL_GetDEVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <HAL_GetDEVID+0xc>)
 80009aa:	6818      	ldr	r0, [r3, #0]
}
 80009ac:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e0042000 	.word	0xe0042000

080009b8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4907      	ldr	r1, [pc, #28]	; (80009d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009ba:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80009c6:	0412      	lsls	r2, r2, #16
 80009c8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80009d4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009de:	b530      	push	{r4, r5, lr}
 80009e0:	68dc      	ldr	r4, [r3, #12]
 80009e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	bf28      	it	cs
 80009f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f8:	bf98      	it	ls
 80009fa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a00:	bf88      	it	hi
 8000a02:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	ea21 0303 	bic.w	r3, r1, r3
 8000a08:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0a:	fa05 f404 	lsl.w	r4, r5, r4
 8000a0e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000a12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	bfac      	ite	ge
 8000a1a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	4a07      	ldrlt	r2, [pc, #28]	; (8000a3c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	bfab      	itete	ge
 8000a28:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a36:	bd30      	pop	{r4, r5, pc}
 8000a38:	e000ed00 	.word	0xe000ed00
 8000a3c:	e000ed14 	.word	0xe000ed14

08000a40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a40:	3801      	subs	r0, #1
 8000a42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a46:	d20b      	bcs.n	8000a60 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	21f0      	movs	r1, #240	; 0xf0
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a50:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a56:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a58:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a60:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a68:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	b150      	cbz	r0, 8000a84 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a6e:	7943      	ldrb	r3, [r0, #5]
 8000a70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a74:	b913      	cbnz	r3, 8000a7c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a76:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a78:	f7ff fd58 	bl	800052c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a7c:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8000a7e:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8000a80:	7163      	strb	r3, [r4, #5]
}
 8000a82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000a84:	2001      	movs	r0, #1
 8000a86:	e7fc      	b.n	8000a82 <HAL_CRC_Init+0x1a>

08000a88 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000a88:	4603      	mov	r3, r0
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a8a:	2002      	movs	r0, #2
{
 8000a8c:	b510      	push	{r4, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a8e:	7158      	strb	r0, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
  {
    hcrc->Instance->DR = pBuffer[index];
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (index = 0U; index < BufferLength; index++)
 8000a96:	4291      	cmp	r1, r2
 8000a98:	d103      	bne.n	8000aa2 <HAL_CRC_Accumulate+0x1a>
  }
  temp = hcrc->Instance->DR;

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a9a:	2201      	movs	r2, #1
  temp = hcrc->Instance->DR;
 8000a9c:	6800      	ldr	r0, [r0, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8000a9e:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
}
 8000aa0:	bd10      	pop	{r4, pc}
    hcrc->Instance->DR = pBuffer[index];
 8000aa2:	f851 4b04 	ldr.w	r4, [r1], #4
 8000aa6:	6004      	str	r4, [r0, #0]
  for (index = 0U; index < BufferLength; index++)
 8000aa8:	e7f5      	b.n	8000a96 <HAL_CRC_Accumulate+0xe>
	...

08000aac <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000aac:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <FLASH_SetErrorCode+0x48>)
 8000aae:	68d3      	ldr	r3, [r2, #12]
 8000ab0:	f013 0310 	ands.w	r3, r3, #16
 8000ab4:	d005      	beq.n	8000ac2 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000ab6:	4910      	ldr	r1, [pc, #64]	; (8000af8 <FLASH_SetErrorCode+0x4c>)
 8000ab8:	69cb      	ldr	r3, [r1, #28]
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000ac0:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ac2:	68d2      	ldr	r2, [r2, #12]
 8000ac4:	0750      	lsls	r0, r2, #29
 8000ac6:	d506      	bpl.n	8000ad6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000ac8:	490b      	ldr	r1, [pc, #44]	; (8000af8 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000aca:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000ace:	69ca      	ldr	r2, [r1, #28]
 8000ad0:	f042 0201 	orr.w	r2, r2, #1
 8000ad4:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <FLASH_SetErrorCode+0x48>)
 8000ad8:	69d1      	ldr	r1, [r2, #28]
 8000ada:	07c9      	lsls	r1, r1, #31
 8000adc:	d508      	bpl.n	8000af0 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <FLASH_SetErrorCode+0x4c>)
 8000ae0:	69c1      	ldr	r1, [r0, #28]
 8000ae2:	f041 0104 	orr.w	r1, r1, #4
 8000ae6:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ae8:	69d1      	ldr	r1, [r2, #28]
 8000aea:	f021 0101 	bic.w	r1, r1, #1
 8000aee:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000af0:	60d3      	str	r3, [r2, #12]
}  
 8000af2:	4770      	bx	lr
 8000af4:	40022000 	.word	0x40022000
 8000af8:	200003f0 	.word	0x200003f0

08000afc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_FLASH_Unlock+0x1c>)
 8000afe:	6918      	ldr	r0, [r3, #16]
 8000b00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b04:	d007      	beq.n	8000b16 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <HAL_FLASH_Unlock+0x20>)
 8000b08:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000b0a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000b0e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b10:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000b12:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000b16:	4770      	bx	lr
 8000b18:	40022000 	.word	0x40022000
 8000b1c:	45670123 	.word	0x45670123

08000b20 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_FLASH_Lock+0x10>)
}
 8000b22:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b24:	6913      	ldr	r3, [r2, #16]
 8000b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2a:	6113      	str	r3, [r2, #16]
}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40022000 	.word	0x40022000

08000b34 <FLASH_WaitForLastOperation>:
{
 8000b34:	b570      	push	{r4, r5, r6, lr}
 8000b36:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000b38:	f7ff ff30 	bl	800099c <HAL_GetTick>
 8000b3c:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b3e:	4c11      	ldr	r4, [pc, #68]	; (8000b84 <FLASH_WaitForLastOperation+0x50>)
 8000b40:	68e3      	ldr	r3, [r4, #12]
 8000b42:	07d8      	lsls	r0, r3, #31
 8000b44:	d412      	bmi.n	8000b6c <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b46:	68e3      	ldr	r3, [r4, #12]
 8000b48:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b4a:	bf44      	itt	mi
 8000b4c:	2320      	movmi	r3, #32
 8000b4e:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b50:	68e3      	ldr	r3, [r4, #12]
 8000b52:	06da      	lsls	r2, r3, #27
 8000b54:	d406      	bmi.n	8000b64 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b56:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b58:	07db      	lsls	r3, r3, #31
 8000b5a:	d403      	bmi.n	8000b64 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b5c:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b5e:	f010 0004 	ands.w	r0, r0, #4
 8000b62:	d007      	beq.n	8000b74 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8000b64:	f7ff ffa2 	bl	8000aac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b68:	2001      	movs	r0, #1
 8000b6a:	e003      	b.n	8000b74 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8000b6c:	1c6b      	adds	r3, r5, #1
 8000b6e:	d0e7      	beq.n	8000b40 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b70:	b90d      	cbnz	r5, 8000b76 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 8000b72:	2003      	movs	r0, #3
}
 8000b74:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b76:	f7ff ff11 	bl	800099c <HAL_GetTick>
 8000b7a:	1b80      	subs	r0, r0, r6
 8000b7c:	42a8      	cmp	r0, r5
 8000b7e:	d9df      	bls.n	8000b40 <FLASH_WaitForLastOperation+0xc>
 8000b80:	e7f7      	b.n	8000b72 <FLASH_WaitForLastOperation+0x3e>
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_FLASH_Program>:
{
 8000b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000b8c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8000c20 <HAL_FLASH_Program+0x98>
{
 8000b90:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8000b92:	f899 3018 	ldrb.w	r3, [r9, #24]
{
 8000b96:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8000b98:	2b01      	cmp	r3, #1
{
 8000b9a:	460f      	mov	r7, r1
 8000b9c:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8000b9e:	d03d      	beq.n	8000c1c <HAL_FLASH_Program+0x94>
 8000ba0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ba2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000ba6:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000baa:	f7ff ffc3 	bl	8000b34 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000bae:	bb80      	cbnz	r0, 8000c12 <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000bb0:	2c01      	cmp	r4, #1
 8000bb2:	d003      	beq.n	8000bbc <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 8000bb4:	2c02      	cmp	r4, #2
 8000bb6:	bf0c      	ite	eq
 8000bb8:	2402      	moveq	r4, #2
 8000bba:	2404      	movne	r4, #4
 8000bbc:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bbe:	46ab      	mov	fp, r5
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000bc0:	f8df a060 	ldr.w	sl, [pc, #96]	; 8000c24 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000bc4:	0128      	lsls	r0, r5, #4
 8000bc6:	f1c0 0220 	rsb	r2, r0, #32
 8000bca:	f1a0 0320 	sub.w	r3, r0, #32
 8000bce:	fa06 f202 	lsl.w	r2, r6, r2
 8000bd2:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bd6:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000bda:	4310      	orrs	r0, r2
 8000bdc:	fa26 f303 	lsr.w	r3, r6, r3
 8000be0:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000be2:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000be6:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 8000bf0:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bf4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bf8:	f7ff ff9c 	bl	8000b34 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000bfc:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000c00:	f023 0301 	bic.w	r3, r3, #1
 8000c04:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8000c08:	b918      	cbnz	r0, 8000c12 <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 8000c0a:	3501      	adds	r5, #1
 8000c0c:	b2eb      	uxtb	r3, r5
 8000c0e:	429c      	cmp	r4, r3
 8000c10:	d8d8      	bhi.n	8000bc4 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8000c12:	2300      	movs	r3, #0
 8000c14:	f889 3018 	strb.w	r3, [r9, #24]
}
 8000c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	e7fb      	b.n	8000c18 <HAL_FLASH_Program+0x90>
 8000c20:	200003f0 	.word	0x200003f0
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_FLASHEx_OBGetConfig>:
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	6003      	str	r3, [r0, #0]
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <HAL_FLASHEx_OBGetConfig+0x24>)
 8000c2e:	6a1a      	ldr	r2, [r3, #32]
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8000c30:	6082      	str	r2, [r0, #8]
{
  uint32_t readstatus = OB_RDP_LEVEL_0;
  uint32_t tmp_reg = 0U;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8000c32:	69da      	ldr	r2, [r3, #28]
  {
    readstatus = OB_RDP_LEVEL_1;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8000c34:	f012 0f02 	tst.w	r2, #2
 8000c38:	bf14      	ite	ne
 8000c3a:	2200      	movne	r2, #0
 8000c3c:	22a5      	moveq	r2, #165	; 0xa5
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8000c3e:	7402      	strb	r2, [r0, #16]
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	f3c3 0382 	ubfx	r3, r3, #2, #3
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000c46:	7443      	strb	r3, [r0, #17]
}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40022000 	.word	0x40022000

08000c50 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c50:	2200      	movs	r2, #0
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <FLASH_PageErase+0x1c>)
 8000c54:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <FLASH_PageErase+0x20>)
 8000c58:	691a      	ldr	r2, [r3, #16]
 8000c5a:	f042 0202 	orr.w	r2, r2, #2
 8000c5e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000c60:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c68:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000c6a:	4770      	bx	lr
 8000c6c:	200003f0 	.word	0x200003f0
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_FLASHEx_Erase>:
{
 8000c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000c78:	4f26      	ldr	r7, [pc, #152]	; (8000d14 <HAL_FLASHEx_Erase+0xa0>)
{
 8000c7a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000c7c:	7e3b      	ldrb	r3, [r7, #24]
{
 8000c7e:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d044      	beq.n	8000d0e <HAL_FLASHEx_Erase+0x9a>
 8000c84:	2401      	movs	r4, #1
 8000c86:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c88:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c8a:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d11a      	bne.n	8000cc8 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c92:	f7ff ff4f 	bl	8000b34 <FLASH_WaitForLastOperation>
 8000c96:	b120      	cbz	r0, 8000ca2 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c98:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	763b      	strb	r3, [r7, #24]
}
 8000c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000ca2:	4c1d      	ldr	r4, [pc, #116]	; (8000d18 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ca4:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000ca6:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ca8:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000cb2:	6923      	ldr	r3, [r4, #16]
 8000cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb8:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cba:	f7ff ff3b 	bl	8000b34 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000cbe:	6923      	ldr	r3, [r4, #16]
 8000cc0:	f023 0304 	bic.w	r3, r3, #4
 8000cc4:	6123      	str	r3, [r4, #16]
 8000cc6:	e7e8      	b.n	8000c9a <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000cc8:	f7ff ff34 	bl	8000b34 <FLASH_WaitForLastOperation>
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d1e3      	bne.n	8000c98 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd4:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cd8:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000cda:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000cdc:	4c0e      	ldr	r4, [pc, #56]	; (8000d18 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000cde:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8000ce2:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8000ce6:	42b3      	cmp	r3, r6
 8000ce8:	d9d7      	bls.n	8000c9a <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000cea:	4630      	mov	r0, r6
 8000cec:	f7ff ffb0 	bl	8000c50 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cf4:	f7ff ff1e 	bl	8000b34 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000cf8:	6923      	ldr	r3, [r4, #16]
 8000cfa:	f023 0302 	bic.w	r3, r3, #2
 8000cfe:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000d00:	b110      	cbz	r0, 8000d08 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 8000d02:	f8c8 6000 	str.w	r6, [r8]
            break;
 8000d06:	e7c8      	b.n	8000c9a <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000d08:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d0c:	e7e7      	b.n	8000cde <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8000d0e:	2002      	movs	r0, #2
 8000d10:	e7c5      	b.n	8000c9e <HAL_FLASHEx_Erase+0x2a>
 8000d12:	bf00      	nop
 8000d14:	200003f0 	.word	0x200003f0
 8000d18:	40022000 	.word	0x40022000

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d20:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000d22:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d24:	4f64      	ldr	r7, [pc, #400]	; (8000eb8 <HAL_GPIO_Init+0x19c>)
 8000d26:	4b65      	ldr	r3, [pc, #404]	; (8000ebc <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8000d28:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000ec0 <HAL_GPIO_Init+0x1a4>
 8000d2c:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000ec4 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d30:	680d      	ldr	r5, [r1, #0]
 8000d32:	fa35 f406 	lsrs.w	r4, r5, r6
 8000d36:	d102      	bne.n	8000d3e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000d38:	b003      	add	sp, #12
 8000d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000d3e:	f04f 0801 	mov.w	r8, #1
 8000d42:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000d4a:	ea38 0505 	bics.w	r5, r8, r5
 8000d4e:	d17b      	bne.n	8000e48 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8000d50:	684d      	ldr	r5, [r1, #4]
 8000d52:	2d03      	cmp	r5, #3
 8000d54:	d807      	bhi.n	8000d66 <HAL_GPIO_Init+0x4a>
 8000d56:	3d01      	subs	r5, #1
 8000d58:	2d02      	cmp	r5, #2
 8000d5a:	f200 8088 	bhi.w	8000e6e <HAL_GPIO_Init+0x152>
 8000d5e:	e8df f005 	tbb	[pc, r5]
 8000d62:	9b96      	.short	0x9b96
 8000d64:	a1          	.byte	0xa1
 8000d65:	00          	.byte	0x00
 8000d66:	2d12      	cmp	r5, #18
 8000d68:	f000 8099 	beq.w	8000e9e <HAL_GPIO_Init+0x182>
 8000d6c:	d86e      	bhi.n	8000e4c <HAL_GPIO_Init+0x130>
 8000d6e:	2d11      	cmp	r5, #17
 8000d70:	f000 808f 	beq.w	8000e92 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d74:	2cff      	cmp	r4, #255	; 0xff
 8000d76:	bf98      	it	ls
 8000d78:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d7a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d7e:	bf88      	it	hi
 8000d80:	f100 0a04 	addhi.w	sl, r0, #4
 8000d84:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d88:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d8c:	bf88      	it	hi
 8000d8e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d90:	fa09 fb05 	lsl.w	fp, r9, r5
 8000d94:	ea28 080b 	bic.w	r8, r8, fp
 8000d98:	fa02 f505 	lsl.w	r5, r2, r5
 8000d9c:	ea48 0505 	orr.w	r5, r8, r5
 8000da0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000da8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000dac:	d04c      	beq.n	8000e48 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dae:	69bd      	ldr	r5, [r7, #24]
 8000db0:	f026 0803 	bic.w	r8, r6, #3
 8000db4:	f045 0501 	orr.w	r5, r5, #1
 8000db8:	61bd      	str	r5, [r7, #24]
 8000dba:	69bd      	ldr	r5, [r7, #24]
 8000dbc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000dc0:	f005 0501 	and.w	r5, r5, #1
 8000dc4:	9501      	str	r5, [sp, #4]
 8000dc6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dca:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dce:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dd0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000dd4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dd8:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ddc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000de0:	4d39      	ldr	r5, [pc, #228]	; (8000ec8 <HAL_GPIO_Init+0x1ac>)
 8000de2:	42a8      	cmp	r0, r5
 8000de4:	d062      	beq.n	8000eac <HAL_GPIO_Init+0x190>
 8000de6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dea:	42a8      	cmp	r0, r5
 8000dec:	d060      	beq.n	8000eb0 <HAL_GPIO_Init+0x194>
 8000dee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000df2:	42a8      	cmp	r0, r5
 8000df4:	d05e      	beq.n	8000eb4 <HAL_GPIO_Init+0x198>
 8000df6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dfa:	42a8      	cmp	r0, r5
 8000dfc:	bf0c      	ite	eq
 8000dfe:	2503      	moveq	r5, #3
 8000e00:	2504      	movne	r5, #4
 8000e02:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e06:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000e0a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e0e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e10:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e14:	bf14      	ite	ne
 8000e16:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e18:	43a5      	biceq	r5, r4
 8000e1a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e1c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e1e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e22:	bf14      	ite	ne
 8000e24:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e26:	43a5      	biceq	r5, r4
 8000e28:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000e2a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000e30:	bf14      	ite	ne
 8000e32:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e34:	43a5      	biceq	r5, r4
 8000e36:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000e38:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e3a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000e3e:	bf14      	ite	ne
 8000e40:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e42:	ea25 0404 	biceq.w	r4, r5, r4
 8000e46:	601c      	str	r4, [r3, #0]
	position++;
 8000e48:	3601      	adds	r6, #1
 8000e4a:	e771      	b.n	8000d30 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000e4c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000ecc <HAL_GPIO_Init+0x1b0>
 8000e50:	454d      	cmp	r5, r9
 8000e52:	d00c      	beq.n	8000e6e <HAL_GPIO_Init+0x152>
 8000e54:	d817      	bhi.n	8000e86 <HAL_GPIO_Init+0x16a>
 8000e56:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000e5a:	454d      	cmp	r5, r9
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x152>
 8000e5e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000e62:	454d      	cmp	r5, r9
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x152>
 8000e66:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000e6a:	454d      	cmp	r5, r9
 8000e6c:	d182      	bne.n	8000d74 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e6e:	688a      	ldr	r2, [r1, #8]
 8000e70:	b1d2      	cbz	r2, 8000ea8 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e72:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000e74:	bf08      	it	eq
 8000e76:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e7a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000e7e:	bf18      	it	ne
 8000e80:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000e84:	e776      	b.n	8000d74 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000e86:	4565      	cmp	r5, ip
 8000e88:	d0f1      	beq.n	8000e6e <HAL_GPIO_Init+0x152>
 8000e8a:	4575      	cmp	r5, lr
 8000e8c:	e7ee      	b.n	8000e6c <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e8e:	68ca      	ldr	r2, [r1, #12]
          break;
 8000e90:	e770      	b.n	8000d74 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e92:	68ca      	ldr	r2, [r1, #12]
 8000e94:	3204      	adds	r2, #4
          break;
 8000e96:	e76d      	b.n	8000d74 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e98:	68ca      	ldr	r2, [r1, #12]
 8000e9a:	3208      	adds	r2, #8
          break;
 8000e9c:	e76a      	b.n	8000d74 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e9e:	68ca      	ldr	r2, [r1, #12]
 8000ea0:	320c      	adds	r2, #12
          break;
 8000ea2:	e767      	b.n	8000d74 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e765      	b.n	8000d74 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	e763      	b.n	8000d74 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eac:	2500      	movs	r5, #0
 8000eae:	e7a8      	b.n	8000e02 <HAL_GPIO_Init+0xe6>
 8000eb0:	2501      	movs	r5, #1
 8000eb2:	e7a6      	b.n	8000e02 <HAL_GPIO_Init+0xe6>
 8000eb4:	2502      	movs	r5, #2
 8000eb6:	e7a4      	b.n	8000e02 <HAL_GPIO_Init+0xe6>
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010400 	.word	0x40010400
 8000ec0:	10310000 	.word	0x10310000
 8000ec4:	10320000 	.word	0x10320000
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	10220000 	.word	0x10220000

08000ed0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4b01      	ldr	r3, [pc, #4]	; (8000ed8 <HAL_PWR_EnableBkUpAccess+0x8>)
 8000ed4:	621a      	str	r2, [r3, #32]
}
 8000ed6:	4770      	bx	lr
 8000ed8:	420e0000 	.word	0x420e0000

08000edc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000edc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000ede:	f7ff fd5d 	bl	800099c <HAL_GetTick>
 8000ee2:	4605      	mov	r5, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ee4:	4c2f      	ldr	r4, [pc, #188]	; (8000fa4 <HAL_RCC_DeInit+0xc8>)
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	079b      	lsls	r3, r3, #30
 8000ef2:	d53b      	bpl.n	8000f6c <HAL_RCC_DeInit+0x90>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8000ef4:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef6:	f241 3688 	movw	r6, #5000	; 0x1388
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8000efa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f02:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000f04:	f7ff fd4a 	bl	800099c <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 8000f08:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 8000f0a:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
 8000f0c:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000f0e:	6863      	ldr	r3, [r4, #4]
 8000f10:	f013 0f0c 	tst.w	r3, #12
 8000f14:	d132      	bne.n	8000f7c <HAL_RCC_DeInit+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_RCC_DeInit+0xcc>)
 8000f18:	4a24      	ldr	r2, [pc, #144]	; (8000fac <HAL_RCC_DeInit+0xd0>)
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_RCC_DeInit+0xd4>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f7ff fcfa 	bl	8000918 <HAL_InitTick>
 8000f24:	4605      	mov	r5, r0
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d13a      	bne.n	8000fa0 <HAL_RCC_DeInit+0xc4>
  {
    return HAL_ERROR;
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f2a:	f7ff fd37 	bl	800099c <HAL_GetTick>
 8000f2e:	4606      	mov	r6, r0

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f36:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8000f3e:	d123      	bne.n	8000f88 <HAL_RCC_DeInit+0xac>
      return HAL_TIMEOUT;
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8000f40:	6063      	str	r3, [r4, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f42:	f7ff fd2b 	bl	800099c <HAL_GetTick>
 8000f46:	4606      	mov	r6, r0

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f4e:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000f56:	d11d      	bne.n	8000f94 <HAL_RCC_DeInit+0xb8>
      return HAL_TIMEOUT;
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000f58:	6822      	ldr	r2, [r4, #0]
 8000f5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f5e:	6022      	str	r2, [r4, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000f60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f62:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f66:	6262      	str	r2, [r4, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8000f68:	60a3      	str	r3, [r4, #8]

  return HAL_OK;
 8000f6a:	e005      	b.n	8000f78 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fd16 	bl	800099c <HAL_GetTick>
 8000f70:	1b40      	subs	r0, r0, r5
 8000f72:	2802      	cmp	r0, #2
 8000f74:	d9bb      	bls.n	8000eee <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8000f76:	2503      	movs	r5, #3
}
 8000f78:	4628      	mov	r0, r5
 8000f7a:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f7c:	f7ff fd0e 	bl	800099c <HAL_GetTick>
 8000f80:	1b40      	subs	r0, r0, r5
 8000f82:	42b0      	cmp	r0, r6
 8000f84:	d9c3      	bls.n	8000f0e <HAL_RCC_DeInit+0x32>
 8000f86:	e7f6      	b.n	8000f76 <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f88:	f7ff fd08 	bl	800099c <HAL_GetTick>
 8000f8c:	1b80      	subs	r0, r0, r6
 8000f8e:	2802      	cmp	r0, #2
 8000f90:	d9d2      	bls.n	8000f38 <HAL_RCC_DeInit+0x5c>
 8000f92:	e7f0      	b.n	8000f76 <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fd02 	bl	800099c <HAL_GetTick>
 8000f98:	1b80      	subs	r0, r0, r6
 8000f9a:	2864      	cmp	r0, #100	; 0x64
 8000f9c:	d9d8      	bls.n	8000f50 <HAL_RCC_DeInit+0x74>
 8000f9e:	e7ea      	b.n	8000f76 <HAL_RCC_DeInit+0x9a>
    return HAL_ERROR;
 8000fa0:	2501      	movs	r5, #1
 8000fa2:	e7e9      	b.n	8000f78 <HAL_RCC_DeInit+0x9c>
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	20000014 	.word	0x20000014
 8000fac:	007a1200 	.word	0x007a1200
 8000fb0:	2000001c 	.word	0x2000001c

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fb8:	4605      	mov	r5, r0
 8000fba:	b338      	cbz	r0, 800100c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fbc:	6803      	ldr	r3, [r0, #0]
 8000fbe:	07db      	lsls	r3, r3, #31
 8000fc0:	d410      	bmi.n	8000fe4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc2:	682b      	ldr	r3, [r5, #0]
 8000fc4:	079f      	lsls	r7, r3, #30
 8000fc6:	d45e      	bmi.n	8001086 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	0719      	lsls	r1, r3, #28
 8000fcc:	f100 8095 	bmi.w	80010fa <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	075a      	lsls	r2, r3, #29
 8000fd4:	f100 80c1 	bmi.w	800115a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fd8:	69e8      	ldr	r0, [r5, #28]
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	f040 812c 	bne.w	8001238 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	e029      	b.n	8001038 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe4:	4c90      	ldr	r4, [pc, #576]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8000fe6:	6863      	ldr	r3, [r4, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d007      	beq.n	8001000 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff0:	6863      	ldr	r3, [r4, #4]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d10a      	bne.n	8001010 <HAL_RCC_OscConfig+0x5c>
 8000ffa:	6863      	ldr	r3, [r4, #4]
 8000ffc:	03de      	lsls	r6, r3, #15
 8000ffe:	d507      	bpl.n	8001010 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	039c      	lsls	r4, r3, #14
 8001004:	d5dd      	bpl.n	8000fc2 <HAL_RCC_OscConfig+0xe>
 8001006:	686b      	ldr	r3, [r5, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1da      	bne.n	8000fc2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800100c:	2001      	movs	r0, #1
 800100e:	e013      	b.n	8001038 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001010:	686b      	ldr	r3, [r5, #4]
 8001012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001016:	d112      	bne.n	800103e <HAL_RCC_OscConfig+0x8a>
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001020:	f7ff fcbc 	bl	800099c <HAL_GetTick>
 8001024:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	0398      	lsls	r0, r3, #14
 800102a:	d4ca      	bmi.n	8000fc2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fcb6 	bl	800099c <HAL_GetTick>
 8001030:	1b80      	subs	r0, r0, r6
 8001032:	2864      	cmp	r0, #100	; 0x64
 8001034:	d9f7      	bls.n	8001026 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001036:	2003      	movs	r0, #3
}
 8001038:	b002      	add	sp, #8
 800103a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103e:	b99b      	cbnz	r3, 8001068 <HAL_RCC_OscConfig+0xb4>
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001046:	6023      	str	r3, [r4, #0]
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001050:	f7ff fca4 	bl	800099c <HAL_GetTick>
 8001054:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	0399      	lsls	r1, r3, #14
 800105a:	d5b2      	bpl.n	8000fc2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fc9e 	bl	800099c <HAL_GetTick>
 8001060:	1b80      	subs	r0, r0, r6
 8001062:	2864      	cmp	r0, #100	; 0x64
 8001064:	d9f7      	bls.n	8001056 <HAL_RCC_OscConfig+0xa2>
 8001066:	e7e6      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	d103      	bne.n	8001078 <HAL_RCC_OscConfig+0xc4>
 8001070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001074:	6023      	str	r3, [r4, #0]
 8001076:	e7cf      	b.n	8001018 <HAL_RCC_OscConfig+0x64>
 8001078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001084:	e7cb      	b.n	800101e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001086:	4c68      	ldr	r4, [pc, #416]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001088:	6863      	ldr	r3, [r4, #4]
 800108a:	f013 0f0c 	tst.w	r3, #12
 800108e:	d007      	beq.n	80010a0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001090:	6863      	ldr	r3, [r4, #4]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b08      	cmp	r3, #8
 8001098:	d110      	bne.n	80010bc <HAL_RCC_OscConfig+0x108>
 800109a:	6863      	ldr	r3, [r4, #4]
 800109c:	03da      	lsls	r2, r3, #15
 800109e:	d40d      	bmi.n	80010bc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	079b      	lsls	r3, r3, #30
 80010a4:	d502      	bpl.n	80010ac <HAL_RCC_OscConfig+0xf8>
 80010a6:	692b      	ldr	r3, [r5, #16]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1af      	bne.n	800100c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	696a      	ldr	r2, [r5, #20]
 80010b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010b8:	6023      	str	r3, [r4, #0]
 80010ba:	e785      	b.n	8000fc8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010bc:	692a      	ldr	r2, [r5, #16]
 80010be:	4b5b      	ldr	r3, [pc, #364]	; (800122c <HAL_RCC_OscConfig+0x278>)
 80010c0:	b16a      	cbz	r2, 80010de <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010c6:	f7ff fc69 	bl	800099c <HAL_GetTick>
 80010ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	079f      	lsls	r7, r3, #30
 80010d0:	d4ec      	bmi.n	80010ac <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff fc63 	bl	800099c <HAL_GetTick>
 80010d6:	1b80      	subs	r0, r0, r6
 80010d8:	2802      	cmp	r0, #2
 80010da:	d9f7      	bls.n	80010cc <HAL_RCC_OscConfig+0x118>
 80010dc:	e7ab      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80010de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010e0:	f7ff fc5c 	bl	800099c <HAL_GetTick>
 80010e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	0798      	lsls	r0, r3, #30
 80010ea:	f57f af6d 	bpl.w	8000fc8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fc55 	bl	800099c <HAL_GetTick>
 80010f2:	1b80      	subs	r0, r0, r6
 80010f4:	2802      	cmp	r0, #2
 80010f6:	d9f6      	bls.n	80010e6 <HAL_RCC_OscConfig+0x132>
 80010f8:	e79d      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010fa:	69aa      	ldr	r2, [r5, #24]
 80010fc:	4e4a      	ldr	r6, [pc, #296]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80010fe:	4b4b      	ldr	r3, [pc, #300]	; (800122c <HAL_RCC_OscConfig+0x278>)
 8001100:	b1e2      	cbz	r2, 800113c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001102:	2201      	movs	r2, #1
 8001104:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001108:	f7ff fc48 	bl	800099c <HAL_GetTick>
 800110c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001110:	079b      	lsls	r3, r3, #30
 8001112:	d50d      	bpl.n	8001130 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001114:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001118:	4b45      	ldr	r3, [pc, #276]	; (8001230 <HAL_RCC_OscConfig+0x27c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001120:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001122:	bf00      	nop
  }
  while (Delay --);
 8001124:	9b01      	ldr	r3, [sp, #4]
 8001126:	1e5a      	subs	r2, r3, #1
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f9      	bne.n	8001122 <HAL_RCC_OscConfig+0x16e>
 800112e:	e74f      	b.n	8000fd0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff fc34 	bl	800099c <HAL_GetTick>
 8001134:	1b00      	subs	r0, r0, r4
 8001136:	2802      	cmp	r0, #2
 8001138:	d9e9      	bls.n	800110e <HAL_RCC_OscConfig+0x15a>
 800113a:	e77c      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800113c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001140:	f7ff fc2c 	bl	800099c <HAL_GetTick>
 8001144:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001146:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001148:	079f      	lsls	r7, r3, #30
 800114a:	f57f af41 	bpl.w	8000fd0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114e:	f7ff fc25 	bl	800099c <HAL_GetTick>
 8001152:	1b00      	subs	r0, r0, r4
 8001154:	2802      	cmp	r0, #2
 8001156:	d9f6      	bls.n	8001146 <HAL_RCC_OscConfig+0x192>
 8001158:	e76d      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115a:	4c33      	ldr	r4, [pc, #204]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800115c:	69e3      	ldr	r3, [r4, #28]
 800115e:	00d8      	lsls	r0, r3, #3
 8001160:	d424      	bmi.n	80011ac <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001162:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	69e3      	ldr	r3, [r4, #28]
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	61e3      	str	r3, [r4, #28]
 800116c:	69e3      	ldr	r3, [r4, #28]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001176:	4e2f      	ldr	r6, [pc, #188]	; (8001234 <HAL_RCC_OscConfig+0x280>)
 8001178:	6833      	ldr	r3, [r6, #0]
 800117a:	05d9      	lsls	r1, r3, #23
 800117c:	d518      	bpl.n	80011b0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117e:	68eb      	ldr	r3, [r5, #12]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d126      	bne.n	80011d2 <HAL_RCC_OscConfig+0x21e>
 8001184:	6a23      	ldr	r3, [r4, #32]
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800118c:	f7ff fc06 	bl	800099c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001190:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001194:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001196:	6a23      	ldr	r3, [r4, #32]
 8001198:	079b      	lsls	r3, r3, #30
 800119a:	d53f      	bpl.n	800121c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800119c:	2f00      	cmp	r7, #0
 800119e:	f43f af1b 	beq.w	8000fd8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a2:	69e3      	ldr	r3, [r4, #28]
 80011a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011a8:	61e3      	str	r3, [r4, #28]
 80011aa:	e715      	b.n	8000fd8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80011ac:	2700      	movs	r7, #0
 80011ae:	e7e2      	b.n	8001176 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b0:	6833      	ldr	r3, [r6, #0]
 80011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011b8:	f7ff fbf0 	bl	800099c <HAL_GetTick>
 80011bc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011be:	6833      	ldr	r3, [r6, #0]
 80011c0:	05da      	lsls	r2, r3, #23
 80011c2:	d4dc      	bmi.n	800117e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c4:	f7ff fbea 	bl	800099c <HAL_GetTick>
 80011c8:	eba0 0008 	sub.w	r0, r0, r8
 80011cc:	2864      	cmp	r0, #100	; 0x64
 80011ce:	d9f6      	bls.n	80011be <HAL_RCC_OscConfig+0x20a>
 80011d0:	e731      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d2:	b9ab      	cbnz	r3, 8001200 <HAL_RCC_OscConfig+0x24c>
 80011d4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011da:	f023 0301 	bic.w	r3, r3, #1
 80011de:	6223      	str	r3, [r4, #32]
 80011e0:	6a23      	ldr	r3, [r4, #32]
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80011e8:	f7ff fbd8 	bl	800099c <HAL_GetTick>
 80011ec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ee:	6a23      	ldr	r3, [r4, #32]
 80011f0:	0798      	lsls	r0, r3, #30
 80011f2:	d5d3      	bpl.n	800119c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f4:	f7ff fbd2 	bl	800099c <HAL_GetTick>
 80011f8:	1b80      	subs	r0, r0, r6
 80011fa:	4540      	cmp	r0, r8
 80011fc:	d9f7      	bls.n	80011ee <HAL_RCC_OscConfig+0x23a>
 80011fe:	e71a      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001200:	2b05      	cmp	r3, #5
 8001202:	6a23      	ldr	r3, [r4, #32]
 8001204:	d103      	bne.n	800120e <HAL_RCC_OscConfig+0x25a>
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6223      	str	r3, [r4, #32]
 800120c:	e7ba      	b.n	8001184 <HAL_RCC_OscConfig+0x1d0>
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	6223      	str	r3, [r4, #32]
 8001214:	6a23      	ldr	r3, [r4, #32]
 8001216:	f023 0304 	bic.w	r3, r3, #4
 800121a:	e7b6      	b.n	800118a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121c:	f7ff fbbe 	bl	800099c <HAL_GetTick>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	4540      	cmp	r0, r8
 8001224:	d9b7      	bls.n	8001196 <HAL_RCC_OscConfig+0x1e2>
 8001226:	e706      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
 8001228:	40021000 	.word	0x40021000
 800122c:	42420000 	.word	0x42420000
 8001230:	20000014 	.word	0x20000014
 8001234:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001238:	4c2a      	ldr	r4, [pc, #168]	; (80012e4 <HAL_RCC_OscConfig+0x330>)
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b08      	cmp	r3, #8
 8001242:	d03e      	beq.n	80012c2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001244:	2200      	movs	r2, #0
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <HAL_RCC_OscConfig+0x334>)
 8001248:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800124a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800124c:	d12c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800124e:	f7ff fba5 	bl	800099c <HAL_GetTick>
 8001252:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	0199      	lsls	r1, r3, #6
 8001258:	d420      	bmi.n	800129c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800125a:	6a2b      	ldr	r3, [r5, #32]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001260:	d105      	bne.n	800126e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001262:	6862      	ldr	r2, [r4, #4]
 8001264:	68a9      	ldr	r1, [r5, #8]
 8001266:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800126a:	430a      	orrs	r2, r1
 800126c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001270:	6862      	ldr	r2, [r4, #4]
 8001272:	430b      	orrs	r3, r1
 8001274:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001278:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800127a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800127c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_RCC_OscConfig+0x334>)
 8001280:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001282:	f7ff fb8b 	bl	800099c <HAL_GetTick>
 8001286:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	019a      	lsls	r2, r3, #6
 800128c:	f53f aea8 	bmi.w	8000fe0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001290:	f7ff fb84 	bl	800099c <HAL_GetTick>
 8001294:	1b40      	subs	r0, r0, r5
 8001296:	2802      	cmp	r0, #2
 8001298:	d9f6      	bls.n	8001288 <HAL_RCC_OscConfig+0x2d4>
 800129a:	e6cc      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff fb7e 	bl	800099c <HAL_GetTick>
 80012a0:	1b80      	subs	r0, r0, r6
 80012a2:	2802      	cmp	r0, #2
 80012a4:	d9d6      	bls.n	8001254 <HAL_RCC_OscConfig+0x2a0>
 80012a6:	e6c6      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb78 	bl	800099c <HAL_GetTick>
 80012ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	019b      	lsls	r3, r3, #6
 80012b2:	f57f ae95 	bpl.w	8000fe0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff fb71 	bl	800099c <HAL_GetTick>
 80012ba:	1b40      	subs	r0, r0, r5
 80012bc:	2802      	cmp	r0, #2
 80012be:	d9f6      	bls.n	80012ae <HAL_RCC_OscConfig+0x2fa>
 80012c0:	e6b9      	b.n	8001036 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c2:	2801      	cmp	r0, #1
 80012c4:	f43f aeb8 	beq.w	8001038 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80012c8:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ca:	6a2a      	ldr	r2, [r5, #32]
 80012cc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80012d0:	4291      	cmp	r1, r2
 80012d2:	f47f ae9b 	bne.w	800100c <HAL_RCC_OscConfig+0x58>
 80012d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012dc:	4293      	cmp	r3, r2
 80012de:	f43f ae7f 	beq.w	8000fe0 <HAL_RCC_OscConfig+0x2c>
 80012e2:	e693      	b.n	800100c <HAL_RCC_OscConfig+0x58>
 80012e4:	40021000 	.word	0x40021000
 80012e8:	42420000 	.word	0x42420000

080012ec <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80012ec:	2201      	movs	r2, #1
 80012ee:	4b01      	ldr	r3, [pc, #4]	; (80012f4 <HAL_RCC_EnableCSS+0x8>)
 80012f0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80012f2:	4770      	bx	lr
 80012f4:	42420000 	.word	0x42420000

080012f8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <HAL_RCC_GetSysClockFreq+0x38>)
 80012fa:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80012fc:	f003 010c 	and.w	r1, r3, #12
 8001300:	2908      	cmp	r1, #8
 8001302:	d112      	bne.n	800132a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001306:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800130a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800130c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800130e:	d509      	bpl.n	8001324 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001310:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001314:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001318:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_RCC_GetSysClockFreq+0x44>)
 800131c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800131e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001322:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_RCC_GetSysClockFreq+0x48>)
 8001326:	4358      	muls	r0, r3
 8001328:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	08001d7c 	.word	0x08001d7c
 8001338:	007a1200 	.word	0x007a1200
 800133c:	08001d8c 	.word	0x08001d8c
 8001340:	003d0900 	.word	0x003d0900

08001344 <HAL_RCC_ClockConfig>:
{
 8001344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001348:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800134a:	4604      	mov	r4, r0
 800134c:	b910      	cbnz	r0, 8001354 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800134e:	2001      	movs	r0, #1
}
 8001350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001354:	4a44      	ldr	r2, [pc, #272]	; (8001468 <HAL_RCC_ClockConfig+0x124>)
 8001356:	6813      	ldr	r3, [r2, #0]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	428b      	cmp	r3, r1
 800135e:	d328      	bcc.n	80013b2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001360:	6821      	ldr	r1, [r4, #0]
 8001362:	078e      	lsls	r6, r1, #30
 8001364:	d430      	bmi.n	80013c8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001366:	07ca      	lsls	r2, r1, #31
 8001368:	d443      	bmi.n	80013f2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800136a:	4a3f      	ldr	r2, [pc, #252]	; (8001468 <HAL_RCC_ClockConfig+0x124>)
 800136c:	6813      	ldr	r3, [r2, #0]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	42ab      	cmp	r3, r5
 8001374:	d865      	bhi.n	8001442 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	4d3c      	ldr	r5, [pc, #240]	; (800146c <HAL_RCC_ClockConfig+0x128>)
 800137a:	f012 0f04 	tst.w	r2, #4
 800137e:	d16c      	bne.n	800145a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001380:	0713      	lsls	r3, r2, #28
 8001382:	d506      	bpl.n	8001392 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001384:	686b      	ldr	r3, [r5, #4]
 8001386:	6922      	ldr	r2, [r4, #16]
 8001388:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800138c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001390:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001392:	f7ff ffb1 	bl	80012f8 <HAL_RCC_GetSysClockFreq>
 8001396:	686b      	ldr	r3, [r5, #4]
 8001398:	4a35      	ldr	r2, [pc, #212]	; (8001470 <HAL_RCC_ClockConfig+0x12c>)
 800139a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	40d8      	lsrs	r0, r3
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_RCC_ClockConfig+0x130>)
 80013a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_ClockConfig+0x134>)
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	f7ff fab5 	bl	8000918 <HAL_InitTick>
  return HAL_OK;
 80013ae:	2000      	movs	r0, #0
 80013b0:	e7ce      	b.n	8001350 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	f023 0307 	bic.w	r3, r3, #7
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013bc:	6813      	ldr	r3, [r2, #0]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	428b      	cmp	r3, r1
 80013c4:	d1c3      	bne.n	800134e <HAL_RCC_ClockConfig+0xa>
 80013c6:	e7cb      	b.n	8001360 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <HAL_RCC_ClockConfig+0x128>)
 80013ca:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ce:	bf1e      	ittt	ne
 80013d0:	685a      	ldrne	r2, [r3, #4]
 80013d2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80013d6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013da:	bf42      	ittt	mi
 80013dc:	685a      	ldrmi	r2, [r3, #4]
 80013de:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80013e2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	68a0      	ldr	r0, [r4, #8]
 80013e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80013ec:	4302      	orrs	r2, r0
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	e7b9      	b.n	8001366 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f2:	6862      	ldr	r2, [r4, #4]
 80013f4:	4e1d      	ldr	r6, [pc, #116]	; (800146c <HAL_RCC_ClockConfig+0x128>)
 80013f6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fa:	d11a      	bne.n	8001432 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	d0a5      	beq.n	800134e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001402:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001404:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001408:	f023 0303 	bic.w	r3, r3, #3
 800140c:	4313      	orrs	r3, r2
 800140e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001410:	f7ff fac4 	bl	800099c <HAL_GetTick>
 8001414:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	6873      	ldr	r3, [r6, #4]
 8001418:	6862      	ldr	r2, [r4, #4]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001422:	d0a2      	beq.n	800136a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001424:	f7ff faba 	bl	800099c <HAL_GetTick>
 8001428:	1bc0      	subs	r0, r0, r7
 800142a:	4540      	cmp	r0, r8
 800142c:	d9f3      	bls.n	8001416 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800142e:	2003      	movs	r0, #3
 8001430:	e78e      	b.n	8001350 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001432:	2a02      	cmp	r2, #2
 8001434:	d102      	bne.n	800143c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800143a:	e7e1      	b.n	8001400 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	f013 0f02 	tst.w	r3, #2
 8001440:	e7de      	b.n	8001400 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	6813      	ldr	r3, [r2, #0]
 8001444:	f023 0307 	bic.w	r3, r3, #7
 8001448:	432b      	orrs	r3, r5
 800144a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144c:	6813      	ldr	r3, [r2, #0]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	42ab      	cmp	r3, r5
 8001454:	f47f af7b 	bne.w	800134e <HAL_RCC_ClockConfig+0xa>
 8001458:	e78d      	b.n	8001376 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800145a:	686b      	ldr	r3, [r5, #4]
 800145c:	68e1      	ldr	r1, [r4, #12]
 800145e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001462:	430b      	orrs	r3, r1
 8001464:	606b      	str	r3, [r5, #4]
 8001466:	e78b      	b.n	8001380 <HAL_RCC_ClockConfig+0x3c>
 8001468:	40022000 	.word	0x40022000
 800146c:	40021000 	.word	0x40021000
 8001470:	08001d64 	.word	0x08001d64
 8001474:	20000014 	.word	0x20000014
 8001478:	2000001c 	.word	0x2000001c

0800147c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <HAL_RCC_GetPCLK1Freq+0x14>)
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800148a:	6810      	ldr	r0, [r2, #0]
}
 800148c:	40d8      	lsrs	r0, r3
 800148e:	4770      	bx	lr
 8001490:	40021000 	.word	0x40021000
 8001494:	08001d74 	.word	0x08001d74
 8001498:	20000014 	.word	0x20000014

0800149c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014aa:	6810      	ldr	r0, [r2, #0]
}
 80014ac:	40d8      	lsrs	r0, r3
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000
 80014b4:	08001d74 	.word	0x08001d74
 80014b8:	20000014 	.word	0x20000014

080014bc <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_RCC_NMI_IRQHandler>:
{
 80014c0:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80014c2:	4c04      	ldr	r4, [pc, #16]	; (80014d4 <HAL_RCC_NMI_IRQHandler+0x14>)
 80014c4:	68a3      	ldr	r3, [r4, #8]
 80014c6:	061b      	lsls	r3, r3, #24
 80014c8:	d503      	bpl.n	80014d2 <HAL_RCC_NMI_IRQHandler+0x12>
    HAL_RCC_CSSCallback();
 80014ca:	f7ff fff7 	bl	80014bc <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	72a3      	strb	r3, [r4, #10]
}
 80014d2:	bd10      	pop	{r4, pc}
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014d8:	6803      	ldr	r3, [r0, #0]
{
 80014da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014de:	07d9      	lsls	r1, r3, #31
{
 80014e0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014e2:	d520      	bpl.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e4:	4c36      	ldr	r4, [pc, #216]	; (80015c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80014e6:	69e3      	ldr	r3, [r4, #28]
 80014e8:	00da      	lsls	r2, r3, #3
 80014ea:	d432      	bmi.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80014ec:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	69e3      	ldr	r3, [r4, #28]
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	61e3      	str	r3, [r4, #28]
 80014f6:	69e3      	ldr	r3, [r4, #28]
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4f30      	ldr	r7, [pc, #192]	; (80015c4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	05db      	lsls	r3, r3, #23
 8001506:	d526      	bpl.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001508:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800150a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800150e:	d136      	bne.n	800157e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001510:	6a23      	ldr	r3, [r4, #32]
 8001512:	686a      	ldr	r2, [r5, #4]
 8001514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001518:	4313      	orrs	r3, r2
 800151a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800151c:	b11e      	cbz	r6, 8001526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151e:	69e3      	ldr	r3, [r4, #28]
 8001520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001524:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001526:	6828      	ldr	r0, [r5, #0]
 8001528:	0783      	lsls	r3, r0, #30
 800152a:	d506      	bpl.n	800153a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800152c:	4924      	ldr	r1, [pc, #144]	; (80015c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800152e:	68ab      	ldr	r3, [r5, #8]
 8001530:	684a      	ldr	r2, [r1, #4]
 8001532:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001536:	431a      	orrs	r2, r3
 8001538:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800153a:	f010 0010 	ands.w	r0, r0, #16
 800153e:	d01b      	beq.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001540:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001542:	68e9      	ldr	r1, [r5, #12]
 8001544:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001546:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001548:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800154c:	430b      	orrs	r3, r1
 800154e:	6053      	str	r3, [r2, #4]
 8001550:	e012      	b.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8001552:	2600      	movs	r6, #0
 8001554:	e7d4      	b.n	8001500 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800155e:	f7ff fa1d 	bl	800099c <HAL_GetTick>
 8001562:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	05d8      	lsls	r0, r3, #23
 8001568:	d4ce      	bmi.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156a:	f7ff fa17 	bl	800099c <HAL_GetTick>
 800156e:	eba0 0008 	sub.w	r0, r0, r8
 8001572:	2864      	cmp	r0, #100	; 0x64
 8001574:	d9f6      	bls.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001576:	2003      	movs	r0, #3
}
 8001578:	b002      	add	sp, #8
 800157a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800157e:	686a      	ldr	r2, [r5, #4]
 8001580:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001584:	429a      	cmp	r2, r3
 8001586:	d0c3      	beq.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001588:	2001      	movs	r0, #1
 800158a:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800158c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800158e:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001592:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001594:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001598:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 800159c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800159e:	07d9      	lsls	r1, r3, #31
 80015a0:	d5b6      	bpl.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80015a2:	f7ff f9fb 	bl	800099c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80015aa:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	6a23      	ldr	r3, [r4, #32]
 80015ae:	079a      	lsls	r2, r3, #30
 80015b0:	d4ae      	bmi.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff f9f3 	bl	800099c <HAL_GetTick>
 80015b6:	1bc0      	subs	r0, r0, r7
 80015b8:	4540      	cmp	r0, r8
 80015ba:	d9f7      	bls.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80015bc:	e7db      	b.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40007000 	.word	0x40007000
 80015c8:	42420000 	.word	0x42420000

080015cc <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80015cc:	2802      	cmp	r0, #2
{
 80015ce:	b508      	push	{r3, lr}
  switch (PeriphClk)
 80015d0:	d044      	beq.n	800165c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80015d2:	2810      	cmp	r0, #16
 80015d4:	d003      	beq.n	80015de <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80015d6:	2801      	cmp	r0, #1
 80015d8:	d022      	beq.n	8001620 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 80015da:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 80015dc:	e034      	b.n	8001648 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80015e0:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80015e8:	d02e      	beq.n	8001648 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ea:	f3c2 4183 	ubfx	r1, r2, #18, #4
 80015ee:	4822      	ldr	r0, [pc, #136]	; (8001678 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f0:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015f2:	bf48      	it	mi
 80015f4:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015f6:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015f8:	bf41      	itttt	mi
 80015fa:	4920      	ldrmi	r1, [pc, #128]	; (800167c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80015fc:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001600:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001602:	4a1f      	ldrmi	r2, [pc, #124]	; (8001680 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001604:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001606:	bf4c      	ite	mi
 8001608:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800160c:	4a1d      	ldrpl	r2, [pc, #116]	; (8001684 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800160e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001610:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001614:	d418      	bmi.n	8001648 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8001616:	2303      	movs	r3, #3
 8001618:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800161a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800161e:	e013      	b.n	8001648 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001620:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8001626:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001628:	4019      	ands	r1, r3
 800162a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800162e:	d01e      	beq.n	800166e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001638:	d107      	bne.n	800164a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 800163a:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800163e:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001640:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8001644:	bf18      	it	ne
 8001646:	4618      	movne	r0, r3
}
 8001648:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800164a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800164e:	d1c4      	bne.n	80015da <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8001650:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001652:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001656:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800165a:	e7f3      	b.n	8001644 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800165c:	f7ff ff1e 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001668:	3301      	adds	r3, #1
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	e7d5      	b.n	800161a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 800166e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001672:	e7e9      	b.n	8001648 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8001674:	40021000 	.word	0x40021000
 8001678:	08001d8e 	.word	0x08001d8e
 800167c:	08001d9e 	.word	0x08001d9e
 8001680:	007a1200 	.word	0x007a1200
 8001684:	003d0900 	.word	0x003d0900

08001688 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001688:	6803      	ldr	r3, [r0, #0]
{
 800168a:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800168c:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800168e:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001690:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8001692:	b295      	uxth	r5, r2
 8001694:	b28c      	uxth	r4, r1
 8001696:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001698:	bf17      	itett	ne
 800169a:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800169c:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800169e:	b280      	uxthne	r0, r0
 80016a0:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 80016a4:	bf08      	it	eq
 80016a6:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 80016aa:	bd30      	pop	{r4, r5, pc}

080016ac <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80016ac:	6803      	ldr	r3, [r0, #0]
 80016ae:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80016b2:	b29b      	uxth	r3, r3
}
 80016b4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80016b8:	4770      	bx	lr

080016ba <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 80016ba:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80016bc:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80016be:	f000 000f 	and.w	r0, r0, #15
 80016c2:	fb02 0003 	mla	r0, r2, r3, r0
}
 80016c6:	b2c0      	uxtb	r0, r0
 80016c8:	4770      	bx	lr

080016ca <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80016ca:	b530      	push	{r4, r5, lr}
 80016cc:	4603      	mov	r3, r0
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 80016ce:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80016d2:	2017      	movs	r0, #23
 80016d4:	2509      	movs	r5, #9
 80016d6:	4348      	muls	r0, r1
  if (nMonth < 3U)
 80016d8:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80016da:	fbb0 f5f5 	udiv	r5, r0, r5
  if (nMonth < 3U)
 80016de:	d817      	bhi.n	8001710 <RTC_WeekDayNum+0x46>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80016e0:	3204      	adds	r2, #4
 80016e2:	1910      	adds	r0, r2, r4
 80016e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016e8:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 80016ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80016f0:	4428      	add	r0, r5
 80016f2:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 80016f6:	4410      	add	r0, r2
 80016f8:	2264      	movs	r2, #100	; 0x64
 80016fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80016fe:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001700:	2307      	movs	r3, #7
 8001702:	fbb0 f3f3 	udiv	r3, r0, r3
 8001706:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800170a:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 800170c:	b2c0      	uxtb	r0, r0
 800170e:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001710:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001714:	fbb4 f3f3 	udiv	r3, r4, r3
 8001718:	1c90      	adds	r0, r2, #2
 800171a:	4420      	add	r0, r4
 800171c:	4428      	add	r0, r5
 800171e:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8001722:	4418      	add	r0, r3
 8001724:	2364      	movs	r3, #100	; 0x64
 8001726:	fbb4 f4f3 	udiv	r4, r4, r3
 800172a:	1b00      	subs	r0, r0, r4
 800172c:	e7e8      	b.n	8001700 <RTC_WeekDayNum+0x36>

0800172e <RTC_EnterInitMode>:
{
 800172e:	b538      	push	{r3, r4, r5, lr}
 8001730:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8001732:	f7ff f933 	bl	800099c <HAL_GetTick>
 8001736:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	0692      	lsls	r2, r2, #26
 800173e:	d505      	bpl.n	800174c <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 8001740:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	f042 0210 	orr.w	r2, r2, #16
 8001748:	605a      	str	r2, [r3, #4]
}
 800174a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800174c:	f7ff f926 	bl	800099c <HAL_GetTick>
 8001750:	1b40      	subs	r0, r0, r5
 8001752:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001756:	d9ef      	bls.n	8001738 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8001758:	2003      	movs	r0, #3
 800175a:	e7f6      	b.n	800174a <RTC_EnterInitMode+0x1c>

0800175c <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800175c:	6802      	ldr	r2, [r0, #0]
{
 800175e:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001760:	6853      	ldr	r3, [r2, #4]
{
 8001762:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001764:	f023 0310 	bic.w	r3, r3, #16
 8001768:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800176a:	f7ff f917 	bl	800099c <HAL_GetTick>
 800176e:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	069b      	lsls	r3, r3, #26
 8001776:	d501      	bpl.n	800177c <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8001778:	2000      	movs	r0, #0
}
 800177a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800177c:	f7ff f90e 	bl	800099c <HAL_GetTick>
 8001780:	1b40      	subs	r0, r0, r5
 8001782:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001786:	d9f3      	bls.n	8001770 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8001788:	2003      	movs	r0, #3
 800178a:	e7f6      	b.n	800177a <RTC_ExitInitMode+0x1e>

0800178c <RTC_WriteTimeCounter>:
{
 800178c:	b538      	push	{r3, r4, r5, lr}
 800178e:	4605      	mov	r5, r0
 8001790:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001792:	f7ff ffcc 	bl	800172e <RTC_EnterInitMode>
 8001796:	b958      	cbnz	r0, 80017b0 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001798:	682b      	ldr	r3, [r5, #0]
 800179a:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800179c:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800179e:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80017a0:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80017a2:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80017a4:	f7ff ffda 	bl	800175c <RTC_ExitInitMode>
    status = HAL_ERROR;
 80017a8:	3800      	subs	r0, #0
 80017aa:	bf18      	it	ne
 80017ac:	2001      	movne	r0, #1
}
 80017ae:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
 80017b2:	e7fc      	b.n	80017ae <RTC_WriteTimeCounter+0x22>

080017b4 <RTC_WriteAlarmCounter>:
{
 80017b4:	b538      	push	{r3, r4, r5, lr}
 80017b6:	4605      	mov	r5, r0
 80017b8:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80017ba:	f7ff ffb8 	bl	800172e <RTC_EnterInitMode>
 80017be:	b958      	cbnz	r0, 80017d8 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80017c0:	682b      	ldr	r3, [r5, #0]
 80017c2:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80017c4:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80017c6:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80017c8:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80017ca:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80017cc:	f7ff ffc6 	bl	800175c <RTC_ExitInitMode>
    status = HAL_ERROR;
 80017d0:	3800      	subs	r0, #0
 80017d2:	bf18      	it	ne
 80017d4:	2001      	movne	r0, #1
}
 80017d6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
 80017da:	e7fc      	b.n	80017d6 <RTC_WriteAlarmCounter+0x22>

080017dc <HAL_RTC_SetTime>:
{
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 80017de:	4604      	mov	r4, r0
 80017e0:	b1e0      	cbz	r0, 800181c <HAL_RTC_SetTime+0x40>
 80017e2:	b1d9      	cbz	r1, 800181c <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 80017e4:	7c03      	ldrb	r3, [r0, #16]
 80017e6:	2502      	movs	r5, #2
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d044      	beq.n	8001876 <HAL_RTC_SetTime+0x9a>
 80017ec:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80017ee:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 80017f0:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80017f2:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 80017f4:	784d      	ldrb	r5, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 80017f6:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 80017f8:	b992      	cbnz	r2, 8001820 <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 80017fa:	263c      	movs	r6, #60	; 0x3c
 80017fc:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80017fe:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 8001802:	fb06 5500 	mla	r5, r6, r0, r5
 8001806:	19ee      	adds	r6, r5, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001808:	4631      	mov	r1, r6
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff ffbe 	bl	800178c <RTC_WriteTimeCounter>
 8001810:	4605      	mov	r5, r0
 8001812:	b1b0      	cbz	r0, 8001842 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001814:	2304      	movs	r3, #4
 8001816:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8001818:	2300      	movs	r3, #0
 800181a:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 800181c:	2501      	movs	r5, #1
 800181e:	e02a      	b.n	8001876 <HAL_RTC_SetTime+0x9a>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001820:	f7ff ff4b 	bl	80016ba <RTC_Bcd2ToByte>
 8001824:	4601      	mov	r1, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001826:	4628      	mov	r0, r5
 8001828:	f7ff ff47 	bl	80016ba <RTC_Bcd2ToByte>
 800182c:	263c      	movs	r6, #60	; 0x3c
 800182e:	4346      	muls	r6, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001830:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001834:	fb00 6601 	mla	r6, r0, r1, r6
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001838:	4638      	mov	r0, r7
 800183a:	f7ff ff3e 	bl	80016ba <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800183e:	4406      	add	r6, r0
 8001840:	e7e2      	b.n	8001808 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001842:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001844:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001846:	6853      	ldr	r3, [r2, #4]
 8001848:	f023 0305 	bic.w	r3, r3, #5
 800184c:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800184e:	f7ff ff2d 	bl	80016ac <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8001852:	4286      	cmp	r6, r0
 8001854:	d90b      	bls.n	800186e <HAL_RTC_SetTime+0x92>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001856:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800185a:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff ffa8 	bl	80017b4 <RTC_WriteAlarmCounter>
 8001864:	b118      	cbz	r0, 800186e <HAL_RTC_SetTime+0x92>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001866:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001868:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 800186a:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 800186c:	e7d6      	b.n	800181c <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 800186e:	2301      	movs	r3, #1
 8001870:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8001872:	2300      	movs	r3, #0
 8001874:	7423      	strb	r3, [r4, #16]
}
 8001876:	4628      	mov	r0, r5
 8001878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800187c <HAL_RTC_SetDate>:
{
 800187c:	b570      	push	{r4, r5, r6, lr}
 800187e:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8001880:	4604      	mov	r4, r0
 8001882:	b350      	cbz	r0, 80018da <HAL_RTC_SetDate+0x5e>
 8001884:	b349      	cbz	r1, 80018da <HAL_RTC_SetDate+0x5e>
  __HAL_LOCK(hrtc);
 8001886:	7c03      	ldrb	r3, [r0, #16]
 8001888:	2002      	movs	r0, #2
 800188a:	2b01      	cmp	r3, #1
 800188c:	d048      	beq.n	8001920 <HAL_RTC_SetDate+0xa4>
 800188e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001890:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 8001892:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 8001894:	78c8      	ldrb	r0, [r1, #3]
 8001896:	bb12      	cbnz	r2, 80018de <HAL_RTC_SetDate+0x62>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001898:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800189a:	784b      	ldrb	r3, [r1, #1]
 800189c:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800189e:	788b      	ldrb	r3, [r1, #2]
 80018a0:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80018a2:	7ba2      	ldrb	r2, [r4, #14]
 80018a4:	7b61      	ldrb	r1, [r4, #13]
 80018a6:	7be0      	ldrb	r0, [r4, #15]
 80018a8:	f7ff ff0f 	bl	80016ca <RTC_WeekDayNum>
 80018ac:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80018ae:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff fee9 	bl	8001688 <RTC_ReadTimeCounter>
  if (hours > 24U)
 80018b6:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_RTC_SetDate+0xa8>)
 80018b8:	4298      	cmp	r0, r3
 80018ba:	d92d      	bls.n	8001918 <HAL_RTC_SetDate+0x9c>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80018bc:	4d1a      	ldr	r5, [pc, #104]	; (8001928 <HAL_RTC_SetDate+0xac>)
 80018be:	fbb0 f1f5 	udiv	r1, r0, r5
 80018c2:	fb05 0511 	mls	r5, r5, r1, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f7ff ff5f 	bl	800178c <RTC_WriteTimeCounter>
 80018ce:	4606      	mov	r6, r0
 80018d0:	b188      	cbz	r0, 80018f6 <HAL_RTC_SetDate+0x7a>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80018d2:	2304      	movs	r3, #4
 80018d4:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80018d6:	2300      	movs	r3, #0
 80018d8:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 80018da:	2001      	movs	r0, #1
 80018dc:	e020      	b.n	8001920 <HAL_RTC_SetDate+0xa4>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80018de:	f7ff feec 	bl	80016ba <RTC_Bcd2ToByte>
 80018e2:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80018e4:	7848      	ldrb	r0, [r1, #1]
 80018e6:	f7ff fee8 	bl	80016ba <RTC_Bcd2ToByte>
 80018ea:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80018ec:	7888      	ldrb	r0, [r1, #2]
 80018ee:	f7ff fee4 	bl	80016ba <RTC_Bcd2ToByte>
 80018f2:	73a0      	strb	r0, [r4, #14]
 80018f4:	e7d5      	b.n	80018a2 <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7ff fed8 	bl	80016ac <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 80018fc:	4285      	cmp	r5, r0
 80018fe:	d90b      	bls.n	8001918 <HAL_RTC_SetDate+0x9c>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001900:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001904:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff ff53 	bl	80017b4 <RTC_WriteAlarmCounter>
 800190e:	b118      	cbz	r0, 8001918 <HAL_RTC_SetDate+0x9c>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001910:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001912:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001914:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8001916:	e7e0      	b.n	80018da <HAL_RTC_SetDate+0x5e>
  hrtc->State = HAL_RTC_STATE_READY ;
 8001918:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 800191a:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 800191c:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 800191e:	7420      	strb	r0, [r4, #16]
}
 8001920:	bd70      	pop	{r4, r5, r6, pc}
 8001922:	bf00      	nop
 8001924:	00015f8f 	.word	0x00015f8f
 8001928:	00015180 	.word	0x00015180

0800192c <HAL_RTC_WaitForSynchro>:
{
 800192c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800192e:	4604      	mov	r4, r0
 8001930:	b1a8      	cbz	r0, 800195e <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001932:	6802      	ldr	r2, [r0, #0]
 8001934:	6853      	ldr	r3, [r2, #4]
 8001936:	f023 0308 	bic.w	r3, r3, #8
 800193a:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800193c:	f7ff f82e 	bl	800099c <HAL_GetTick>
 8001940:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	071b      	lsls	r3, r3, #28
 8001948:	d501      	bpl.n	800194e <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 800194a:	2000      	movs	r0, #0
}
 800194c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800194e:	f7ff f825 	bl	800099c <HAL_GetTick>
 8001952:	1b40      	subs	r0, r0, r5
 8001954:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001958:	d9f3      	bls.n	8001942 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800195a:	2003      	movs	r0, #3
 800195c:	e7f6      	b.n	800194c <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 800195e:	2001      	movs	r0, #1
 8001960:	e7f4      	b.n	800194c <HAL_RTC_WaitForSynchro+0x20>
	...

08001964 <HAL_RTC_Init>:
{
 8001964:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8001966:	4604      	mov	r4, r0
 8001968:	b170      	cbz	r0, 8001988 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800196a:	7c43      	ldrb	r3, [r0, #17]
 800196c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001970:	b913      	cbnz	r3, 8001978 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001972:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001974:	f7fe fecc 	bl	8000710 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001978:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800197a:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 800197c:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800197e:	f7ff ffd5 	bl	800192c <HAL_RTC_WaitForSynchro>
 8001982:	b118      	cbz	r0, 800198c <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001984:	2304      	movs	r3, #4
 8001986:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8001988:	2001      	movs	r0, #1
 800198a:	e02f      	b.n	80019ec <HAL_RTC_Init+0x88>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff fece 	bl	800172e <RTC_EnterInitMode>
 8001992:	2800      	cmp	r0, #0
 8001994:	d1f6      	bne.n	8001984 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001996:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001998:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800199a:	6853      	ldr	r3, [r2, #4]
 800199c:	f023 0307 	bic.w	r3, r3, #7
 80019a0:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80019a2:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <HAL_RTC_Init+0x8c>)
 80019a4:	b118      	cbz	r0, 80019ae <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80019a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80019a8:	f021 0101 	bic.w	r1, r1, #1
 80019ac:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80019ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80019b0:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80019b4:	4303      	orrs	r3, r0
 80019b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80019b8:	6860      	ldr	r0, [r4, #4]
 80019ba:	1c43      	adds	r3, r0, #1
 80019bc:	d105      	bne.n	80019ca <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff fe04 	bl	80015cc <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d0dd      	beq.n	8001984 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80019c8:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80019d0:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80019d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80019d4:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff fec0 	bl	800175c <RTC_ExitInitMode>
 80019dc:	2301      	movs	r3, #1
 80019de:	b110      	cbz	r0, 80019e6 <HAL_RTC_Init+0x82>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80019e0:	2204      	movs	r2, #4
 80019e2:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 80019e4:	e7d0      	b.n	8001988 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80019e6:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80019e8:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80019ea:	7463      	strb	r3, [r4, #17]
}
 80019ec:	bd10      	pop	{r4, pc}
 80019ee:	bf00      	nop
 80019f0:	40006c00 	.word	0x40006c00

080019f4 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 80019f4:	0089      	lsls	r1, r1, #2
 80019f6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80019fa:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80019fe:	b292      	uxth	r2, r2
 8001a00:	600a      	str	r2, [r1, #0]
}
 8001a02:	4770      	bx	lr

08001a04 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 8001a04:	0089      	lsls	r1, r1, #2
 8001a06:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001a0a:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8001a0e:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 8001a10:	b280      	uxth	r0, r0
 8001a12:	4770      	bx	lr

08001a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a14:	b510      	push	{r4, lr}
 8001a16:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a18:	6803      	ldr	r3, [r0, #0]
 8001a1a:	68c1      	ldr	r1, [r0, #12]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a22:	430a      	orrs	r2, r1
 8001a24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a26:	6882      	ldr	r2, [r0, #8]
 8001a28:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001a2a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a2c:	4302      	orrs	r2, r0
 8001a2e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001a30:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001a34:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a38:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	69a1      	ldr	r1, [r4, #24]
 8001a42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a46:	430a      	orrs	r2, r1
 8001a48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a4a:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <UART_SetConfig+0x70>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d115      	bne.n	8001a7c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a50:	f7ff fd24 	bl	800149c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a54:	2319      	movs	r3, #25
 8001a56:	4343      	muls	r3, r0
 8001a58:	6862      	ldr	r2, [r4, #4]
 8001a5a:	6820      	ldr	r0, [r4, #0]
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a62:	2264      	movs	r2, #100	; 0x64
 8001a64:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a68:	fb02 3311 	mls	r3, r2, r1, r3
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	3332      	adds	r3, #50	; 0x32
 8001a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a74:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001a78:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a7a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a7c:	f7ff fcfe 	bl	800147c <HAL_RCC_GetPCLK1Freq>
 8001a80:	e7e8      	b.n	8001a54 <UART_SetConfig+0x40>
 8001a82:	bf00      	nop
 8001a84:	40013800 	.word	0x40013800

08001a88 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	460e      	mov	r6, r1
 8001a8e:	4617      	mov	r7, r2
 8001a90:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a92:	6822      	ldr	r2, [r4, #0]
 8001a94:	6813      	ldr	r3, [r2, #0]
 8001a96:	ea36 0303 	bics.w	r3, r6, r3
 8001a9a:	d101      	bne.n	8001aa0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	e028      	b.n	8001af2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001aa0:	1c6b      	adds	r3, r5, #1
 8001aa2:	d0f7      	beq.n	8001a94 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001aa4:	b125      	cbz	r5, 8001ab0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8001aa6:	f7fe ff79 	bl	800099c <HAL_GetTick>
 8001aaa:	1bc0      	subs	r0, r0, r7
 8001aac:	4285      	cmp	r5, r0
 8001aae:	d2f0      	bcs.n	8001a92 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ab0:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ab2:	f102 030c 	add.w	r3, r2, #12
 8001ab6:	e853 3f00 	ldrex	r3, [r3]
 8001aba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001abe:	320c      	adds	r2, #12
 8001ac0:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8001ac4:	6821      	ldr	r1, [r4, #0]
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d1f2      	bne.n	8001ab0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aca:	f101 0314 	add.w	r3, r1, #20
 8001ace:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ad6:	f101 0014 	add.w	r0, r1, #20
 8001ada:	e840 3200 	strex	r2, r3, [r0]
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d1f3      	bne.n	8001aca <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8001ae2:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8001ae4:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8001ae6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8001aea:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8001aee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8001af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001af4 <HAL_UART_Init>:
{
 8001af4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001af6:	4604      	mov	r4, r0
 8001af8:	b348      	cbz	r0, 8001b4e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001afa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001afe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b02:	b91b      	cbnz	r3, 8001b0c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001b04:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8001b08:	f7fe fe7e 	bl	8000808 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b0c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001b0e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8001b14:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b16:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001b18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b1c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b1e:	f7ff ff79 	bl	8001a14 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b22:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b24:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b34:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b3c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001b3e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b40:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b4a:	6360      	str	r0, [r4, #52]	; 0x34
}
 8001b4c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
 8001b50:	e7fc      	b.n	8001b4c <HAL_UART_Init+0x58>

08001b52 <HAL_UART_Transmit>:
{
 8001b52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b56:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001b58:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001b5c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001b5e:	2b20      	cmp	r3, #32
{
 8001b60:	460e      	mov	r6, r1
 8001b62:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001b64:	d13c      	bne.n	8001be0 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8001b66:	2900      	cmp	r1, #0
 8001b68:	d03c      	beq.n	8001be4 <HAL_UART_Transmit+0x92>
 8001b6a:	2a00      	cmp	r2, #0
 8001b6c:	d03a      	beq.n	8001be4 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b6e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b70:	2500      	movs	r5, #0
 8001b72:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b74:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8001b78:	f7fe ff10 	bl	800099c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b7c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001b7e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8001b84:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b86:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b88:	d103      	bne.n	8001b92 <HAL_UART_Transmit+0x40>
 8001b8a:	6923      	ldr	r3, [r4, #16]
 8001b8c:	b90b      	cbnz	r3, 8001b92 <HAL_UART_Transmit+0x40>
 8001b8e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001b90:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8001b92:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	b953      	cbnz	r3, 8001bae <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b98:	464b      	mov	r3, r9
 8001b9a:	4642      	mov	r2, r8
 8001b9c:	2140      	movs	r1, #64	; 0x40
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff ff72 	bl	8001a88 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001ba4:	b950      	cbnz	r0, 8001bbc <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8001bac:	e007      	b.n	8001bbe <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bae:	464b      	mov	r3, r9
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f7ff ff67 	bl	8001a88 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001bba:	b110      	cbz	r0, 8001bc2 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8001bbc:	2003      	movs	r0, #3
}
 8001bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bc2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001bc4:	b94e      	cbnz	r6, 8001bda <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bc6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bce:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001bd0:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001bd2:	3901      	subs	r1, #1
 8001bd4:	b289      	uxth	r1, r1
 8001bd6:	84e1      	strh	r1, [r4, #38]	; 0x26
 8001bd8:	e7db      	b.n	8001b92 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bda:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001bde:	e7f6      	b.n	8001bce <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8001be0:	2002      	movs	r0, #2
 8001be2:	e7ec      	b.n	8001bbe <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8001be4:	2001      	movs	r0, #1
 8001be6:	e7ea      	b.n	8001bbe <HAL_UART_Transmit+0x6c>

08001be8 <HAL_UART_Receive>:
{
 8001be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bec:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bee:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 8001bf2:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bf4:	2b20      	cmp	r3, #32
{
 8001bf6:	460e      	mov	r6, r1
 8001bf8:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bfa:	d143      	bne.n	8001c84 <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8001bfc:	2900      	cmp	r1, #0
 8001bfe:	d043      	beq.n	8001c88 <HAL_UART_Receive+0xa0>
 8001c00:	2a00      	cmp	r2, #0
 8001c02:	d041      	beq.n	8001c88 <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c04:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c06:	2500      	movs	r5, #0
 8001c08:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c0a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c0e:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8001c10:	f7fe fec4 	bl	800099c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c14:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001c16:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8001c1c:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c20:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c24:	d103      	bne.n	8001c2e <HAL_UART_Receive+0x46>
 8001c26:	6923      	ldr	r3, [r4, #16]
 8001c28:	b90b      	cbnz	r3, 8001c2e <HAL_UART_Receive+0x46>
 8001c2a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001c2c:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8001c2e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001c30:	b280      	uxth	r0, r0
 8001c32:	b920      	cbnz	r0, 8001c3e <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001c34:	2320      	movs	r3, #32
 8001c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8001c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4642      	mov	r2, r8
 8001c42:	2120      	movs	r1, #32
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7ff ff1f 	bl	8001a88 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001c4a:	b9f8      	cbnz	r0, 8001c8c <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c4c:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8001c4e:	b94e      	cbnz	r6, 8001c64 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c56:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8001c5a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001c62:	e7e4      	b.n	8001c2e <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c64:	68a2      	ldr	r2, [r4, #8]
 8001c66:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c6a:	d002      	beq.n	8001c72 <HAL_UART_Receive+0x8a>
 8001c6c:	b932      	cbnz	r2, 8001c7c <HAL_UART_Receive+0x94>
 8001c6e:	6922      	ldr	r2, [r4, #16]
 8001c70:	b922      	cbnz	r2, 8001c7c <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	b2c9      	uxtb	r1, r1
 8001c76:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 8001c7a:	e7ee      	b.n	8001c5a <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c7c:	6859      	ldr	r1, [r3, #4]
 8001c7e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001c82:	e7f8      	b.n	8001c76 <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 8001c84:	2002      	movs	r0, #2
 8001c86:	e7d8      	b.n	8001c3a <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 8001c88:	2001      	movs	r0, #1
 8001c8a:	e7d6      	b.n	8001c3a <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	e7d4      	b.n	8001c3a <HAL_UART_Receive+0x52>

08001c90 <__libc_init_array>:
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	2600      	movs	r6, #0
 8001c94:	4d0c      	ldr	r5, [pc, #48]	; (8001cc8 <__libc_init_array+0x38>)
 8001c96:	4c0d      	ldr	r4, [pc, #52]	; (8001ccc <__libc_init_array+0x3c>)
 8001c98:	1b64      	subs	r4, r4, r5
 8001c9a:	10a4      	asrs	r4, r4, #2
 8001c9c:	42a6      	cmp	r6, r4
 8001c9e:	d109      	bne.n	8001cb4 <__libc_init_array+0x24>
 8001ca0:	f000 f830 	bl	8001d04 <_init>
 8001ca4:	2600      	movs	r6, #0
 8001ca6:	4d0a      	ldr	r5, [pc, #40]	; (8001cd0 <__libc_init_array+0x40>)
 8001ca8:	4c0a      	ldr	r4, [pc, #40]	; (8001cd4 <__libc_init_array+0x44>)
 8001caa:	1b64      	subs	r4, r4, r5
 8001cac:	10a4      	asrs	r4, r4, #2
 8001cae:	42a6      	cmp	r6, r4
 8001cb0:	d105      	bne.n	8001cbe <__libc_init_array+0x2e>
 8001cb2:	bd70      	pop	{r4, r5, r6, pc}
 8001cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cb8:	4798      	blx	r3
 8001cba:	3601      	adds	r6, #1
 8001cbc:	e7ee      	b.n	8001c9c <__libc_init_array+0xc>
 8001cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cc2:	4798      	blx	r3
 8001cc4:	3601      	adds	r6, #1
 8001cc6:	e7f2      	b.n	8001cae <__libc_init_array+0x1e>
 8001cc8:	08001da0 	.word	0x08001da0
 8001ccc:	08001da0 	.word	0x08001da0
 8001cd0:	08001da0 	.word	0x08001da0
 8001cd4:	08001da4 	.word	0x08001da4

08001cd8 <memcpy>:
 8001cd8:	440a      	add	r2, r1
 8001cda:	4291      	cmp	r1, r2
 8001cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8001ce0:	d100      	bne.n	8001ce4 <memcpy+0xc>
 8001ce2:	4770      	bx	lr
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001cea:	4291      	cmp	r1, r2
 8001cec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001cf0:	d1f9      	bne.n	8001ce6 <memcpy+0xe>
 8001cf2:	bd10      	pop	{r4, pc}

08001cf4 <memset>:
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4402      	add	r2, r0
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <memset+0xa>
 8001cfc:	4770      	bx	lr
 8001cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8001d02:	e7f9      	b.n	8001cf8 <memset+0x4>

08001d04 <_init>:
 8001d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d06:	bf00      	nop
 8001d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0a:	bc08      	pop	{r3}
 8001d0c:	469e      	mov	lr, r3
 8001d0e:	4770      	bx	lr

08001d10 <_fini>:
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d12:	bf00      	nop
 8001d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d16:	bc08      	pop	{r3}
 8001d18:	469e      	mov	lr, r3
 8001d1a:	4770      	bx	lr
