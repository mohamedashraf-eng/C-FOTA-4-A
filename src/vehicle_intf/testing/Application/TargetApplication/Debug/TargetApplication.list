
TargetApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a50  08008110  08008110  00008110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bb60  0800bb60  0000bb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bba0  0800bba0  0001004c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bba0  0800bba0  0001004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bba0  0800bba0  0001004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bba0  0800bba0  0000bba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bba4  0800bba4  0000bba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800bba8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000004c  0800bbf4  0001004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  0800bbf4  000101f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b8e  00000000  00000000  00010075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e73  00000000  00000000  00024c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00027a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00028a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019159  00000000  00000000  000298f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019156  00000000  00000000  00042a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008df85  00000000  00000000  0005bba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9b2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a30  00000000  00000000  000e9b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000fb5a  00000000  00000000  000ec5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008110 <__do_global_dtors_aux>:
 8008110:	b510      	push	{r4, lr}
 8008112:	4c05      	ldr	r4, [pc, #20]	; (8008128 <__do_global_dtors_aux+0x18>)
 8008114:	7823      	ldrb	r3, [r4, #0]
 8008116:	b933      	cbnz	r3, 8008126 <__do_global_dtors_aux+0x16>
 8008118:	4b04      	ldr	r3, [pc, #16]	; (800812c <__do_global_dtors_aux+0x1c>)
 800811a:	b113      	cbz	r3, 8008122 <__do_global_dtors_aux+0x12>
 800811c:	4804      	ldr	r0, [pc, #16]	; (8008130 <__do_global_dtors_aux+0x20>)
 800811e:	f3af 8000 	nop.w
 8008122:	2301      	movs	r3, #1
 8008124:	7023      	strb	r3, [r4, #0]
 8008126:	bd10      	pop	{r4, pc}
 8008128:	2000004c 	.word	0x2000004c
 800812c:	00000000 	.word	0x00000000
 8008130:	0800bb48 	.word	0x0800bb48

08008134 <frame_dummy>:
 8008134:	b508      	push	{r3, lr}
 8008136:	4b03      	ldr	r3, [pc, #12]	; (8008144 <frame_dummy+0x10>)
 8008138:	b11b      	cbz	r3, 8008142 <frame_dummy+0xe>
 800813a:	4903      	ldr	r1, [pc, #12]	; (8008148 <frame_dummy+0x14>)
 800813c:	4803      	ldr	r0, [pc, #12]	; (800814c <frame_dummy+0x18>)
 800813e:	f3af 8000 	nop.w
 8008142:	bd08      	pop	{r3, pc}
 8008144:	00000000 	.word	0x00000000
 8008148:	20000050 	.word	0x20000050
 800814c:	0800bb48 	.word	0x0800bb48

08008150 <__aeabi_dmul>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800815a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800815e:	bf1d      	ittte	ne
 8008160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008164:	ea94 0f0c 	teqne	r4, ip
 8008168:	ea95 0f0c 	teqne	r5, ip
 800816c:	f000 f8de 	bleq	800832c <__aeabi_dmul+0x1dc>
 8008170:	442c      	add	r4, r5
 8008172:	ea81 0603 	eor.w	r6, r1, r3
 8008176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800817a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800817e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008182:	bf18      	it	ne
 8008184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800818c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008190:	d038      	beq.n	8008204 <__aeabi_dmul+0xb4>
 8008192:	fba0 ce02 	umull	ip, lr, r0, r2
 8008196:	f04f 0500 	mov.w	r5, #0
 800819a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800819e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80081a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80081a6:	f04f 0600 	mov.w	r6, #0
 80081aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80081ae:	f09c 0f00 	teq	ip, #0
 80081b2:	bf18      	it	ne
 80081b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80081b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80081bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80081c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80081c4:	d204      	bcs.n	80081d0 <__aeabi_dmul+0x80>
 80081c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80081ca:	416d      	adcs	r5, r5
 80081cc:	eb46 0606 	adc.w	r6, r6, r6
 80081d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80081d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80081d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80081dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80081e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80081e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80081e8:	bf88      	it	hi
 80081ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80081ee:	d81e      	bhi.n	800822e <__aeabi_dmul+0xde>
 80081f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80081f4:	bf08      	it	eq
 80081f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80081fa:	f150 0000 	adcs.w	r0, r0, #0
 80081fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008208:	ea46 0101 	orr.w	r1, r6, r1
 800820c:	ea40 0002 	orr.w	r0, r0, r2
 8008210:	ea81 0103 	eor.w	r1, r1, r3
 8008214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008218:	bfc2      	ittt	gt
 800821a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800821e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008222:	bd70      	popgt	{r4, r5, r6, pc}
 8008224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008228:	f04f 0e00 	mov.w	lr, #0
 800822c:	3c01      	subs	r4, #1
 800822e:	f300 80ab 	bgt.w	8008388 <__aeabi_dmul+0x238>
 8008232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008236:	bfde      	ittt	le
 8008238:	2000      	movle	r0, #0
 800823a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800823e:	bd70      	pople	{r4, r5, r6, pc}
 8008240:	f1c4 0400 	rsb	r4, r4, #0
 8008244:	3c20      	subs	r4, #32
 8008246:	da35      	bge.n	80082b4 <__aeabi_dmul+0x164>
 8008248:	340c      	adds	r4, #12
 800824a:	dc1b      	bgt.n	8008284 <__aeabi_dmul+0x134>
 800824c:	f104 0414 	add.w	r4, r4, #20
 8008250:	f1c4 0520 	rsb	r5, r4, #32
 8008254:	fa00 f305 	lsl.w	r3, r0, r5
 8008258:	fa20 f004 	lsr.w	r0, r0, r4
 800825c:	fa01 f205 	lsl.w	r2, r1, r5
 8008260:	ea40 0002 	orr.w	r0, r0, r2
 8008264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800826c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008270:	fa21 f604 	lsr.w	r6, r1, r4
 8008274:	eb42 0106 	adc.w	r1, r2, r6
 8008278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800827c:	bf08      	it	eq
 800827e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	f1c4 040c 	rsb	r4, r4, #12
 8008288:	f1c4 0520 	rsb	r5, r4, #32
 800828c:	fa00 f304 	lsl.w	r3, r0, r4
 8008290:	fa20 f005 	lsr.w	r0, r0, r5
 8008294:	fa01 f204 	lsl.w	r2, r1, r4
 8008298:	ea40 0002 	orr.w	r0, r0, r2
 800829c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80082a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80082a4:	f141 0100 	adc.w	r1, r1, #0
 80082a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80082ac:	bf08      	it	eq
 80082ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	f1c4 0520 	rsb	r5, r4, #32
 80082b8:	fa00 f205 	lsl.w	r2, r0, r5
 80082bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80082c0:	fa20 f304 	lsr.w	r3, r0, r4
 80082c4:	fa01 f205 	lsl.w	r2, r1, r5
 80082c8:	ea43 0302 	orr.w	r3, r3, r2
 80082cc:	fa21 f004 	lsr.w	r0, r1, r4
 80082d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80082d4:	fa21 f204 	lsr.w	r2, r1, r4
 80082d8:	ea20 0002 	bic.w	r0, r0, r2
 80082dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80082e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80082e4:	bf08      	it	eq
 80082e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	f094 0f00 	teq	r4, #0
 80082f0:	d10f      	bne.n	8008312 <__aeabi_dmul+0x1c2>
 80082f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80082f6:	0040      	lsls	r0, r0, #1
 80082f8:	eb41 0101 	adc.w	r1, r1, r1
 80082fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008300:	bf08      	it	eq
 8008302:	3c01      	subeq	r4, #1
 8008304:	d0f7      	beq.n	80082f6 <__aeabi_dmul+0x1a6>
 8008306:	ea41 0106 	orr.w	r1, r1, r6
 800830a:	f095 0f00 	teq	r5, #0
 800830e:	bf18      	it	ne
 8008310:	4770      	bxne	lr
 8008312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008316:	0052      	lsls	r2, r2, #1
 8008318:	eb43 0303 	adc.w	r3, r3, r3
 800831c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008320:	bf08      	it	eq
 8008322:	3d01      	subeq	r5, #1
 8008324:	d0f7      	beq.n	8008316 <__aeabi_dmul+0x1c6>
 8008326:	ea43 0306 	orr.w	r3, r3, r6
 800832a:	4770      	bx	lr
 800832c:	ea94 0f0c 	teq	r4, ip
 8008330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008334:	bf18      	it	ne
 8008336:	ea95 0f0c 	teqne	r5, ip
 800833a:	d00c      	beq.n	8008356 <__aeabi_dmul+0x206>
 800833c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008340:	bf18      	it	ne
 8008342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008346:	d1d1      	bne.n	80082ec <__aeabi_dmul+0x19c>
 8008348:	ea81 0103 	eor.w	r1, r1, r3
 800834c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008350:	f04f 0000 	mov.w	r0, #0
 8008354:	bd70      	pop	{r4, r5, r6, pc}
 8008356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800835a:	bf06      	itte	eq
 800835c:	4610      	moveq	r0, r2
 800835e:	4619      	moveq	r1, r3
 8008360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008364:	d019      	beq.n	800839a <__aeabi_dmul+0x24a>
 8008366:	ea94 0f0c 	teq	r4, ip
 800836a:	d102      	bne.n	8008372 <__aeabi_dmul+0x222>
 800836c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008370:	d113      	bne.n	800839a <__aeabi_dmul+0x24a>
 8008372:	ea95 0f0c 	teq	r5, ip
 8008376:	d105      	bne.n	8008384 <__aeabi_dmul+0x234>
 8008378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800837c:	bf1c      	itt	ne
 800837e:	4610      	movne	r0, r2
 8008380:	4619      	movne	r1, r3
 8008382:	d10a      	bne.n	800839a <__aeabi_dmul+0x24a>
 8008384:	ea81 0103 	eor.w	r1, r1, r3
 8008388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800838c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008394:	f04f 0000 	mov.w	r0, #0
 8008398:	bd70      	pop	{r4, r5, r6, pc}
 800839a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800839e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80083a2:	bd70      	pop	{r4, r5, r6, pc}

080083a4 <__aeabi_fmul>:
 80083a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80083a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80083ac:	bf1e      	ittt	ne
 80083ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80083b2:	ea92 0f0c 	teqne	r2, ip
 80083b6:	ea93 0f0c 	teqne	r3, ip
 80083ba:	d06f      	beq.n	800849c <__aeabi_fmul+0xf8>
 80083bc:	441a      	add	r2, r3
 80083be:	ea80 0c01 	eor.w	ip, r0, r1
 80083c2:	0240      	lsls	r0, r0, #9
 80083c4:	bf18      	it	ne
 80083c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80083ca:	d01e      	beq.n	800840a <__aeabi_fmul+0x66>
 80083cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80083d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80083d8:	fba0 3101 	umull	r3, r1, r0, r1
 80083dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80083e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80083e4:	bf3e      	ittt	cc
 80083e6:	0049      	lslcc	r1, r1, #1
 80083e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80083ec:	005b      	lslcc	r3, r3, #1
 80083ee:	ea40 0001 	orr.w	r0, r0, r1
 80083f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80083f6:	2afd      	cmp	r2, #253	; 0xfd
 80083f8:	d81d      	bhi.n	8008436 <__aeabi_fmul+0x92>
 80083fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008402:	bf08      	it	eq
 8008404:	f020 0001 	biceq.w	r0, r0, #1
 8008408:	4770      	bx	lr
 800840a:	f090 0f00 	teq	r0, #0
 800840e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008412:	bf08      	it	eq
 8008414:	0249      	lsleq	r1, r1, #9
 8008416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800841a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800841e:	3a7f      	subs	r2, #127	; 0x7f
 8008420:	bfc2      	ittt	gt
 8008422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800842a:	4770      	bxgt	lr
 800842c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008430:	f04f 0300 	mov.w	r3, #0
 8008434:	3a01      	subs	r2, #1
 8008436:	dc5d      	bgt.n	80084f4 <__aeabi_fmul+0x150>
 8008438:	f112 0f19 	cmn.w	r2, #25
 800843c:	bfdc      	itt	le
 800843e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8008442:	4770      	bxle	lr
 8008444:	f1c2 0200 	rsb	r2, r2, #0
 8008448:	0041      	lsls	r1, r0, #1
 800844a:	fa21 f102 	lsr.w	r1, r1, r2
 800844e:	f1c2 0220 	rsb	r2, r2, #32
 8008452:	fa00 fc02 	lsl.w	ip, r0, r2
 8008456:	ea5f 0031 	movs.w	r0, r1, rrx
 800845a:	f140 0000 	adc.w	r0, r0, #0
 800845e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8008462:	bf08      	it	eq
 8008464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008468:	4770      	bx	lr
 800846a:	f092 0f00 	teq	r2, #0
 800846e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008472:	bf02      	ittt	eq
 8008474:	0040      	lsleq	r0, r0, #1
 8008476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800847a:	3a01      	subeq	r2, #1
 800847c:	d0f9      	beq.n	8008472 <__aeabi_fmul+0xce>
 800847e:	ea40 000c 	orr.w	r0, r0, ip
 8008482:	f093 0f00 	teq	r3, #0
 8008486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800848a:	bf02      	ittt	eq
 800848c:	0049      	lsleq	r1, r1, #1
 800848e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008492:	3b01      	subeq	r3, #1
 8008494:	d0f9      	beq.n	800848a <__aeabi_fmul+0xe6>
 8008496:	ea41 010c 	orr.w	r1, r1, ip
 800849a:	e78f      	b.n	80083bc <__aeabi_fmul+0x18>
 800849c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80084a0:	ea92 0f0c 	teq	r2, ip
 80084a4:	bf18      	it	ne
 80084a6:	ea93 0f0c 	teqne	r3, ip
 80084aa:	d00a      	beq.n	80084c2 <__aeabi_fmul+0x11e>
 80084ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80084b0:	bf18      	it	ne
 80084b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80084b6:	d1d8      	bne.n	800846a <__aeabi_fmul+0xc6>
 80084b8:	ea80 0001 	eor.w	r0, r0, r1
 80084bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80084c0:	4770      	bx	lr
 80084c2:	f090 0f00 	teq	r0, #0
 80084c6:	bf17      	itett	ne
 80084c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80084cc:	4608      	moveq	r0, r1
 80084ce:	f091 0f00 	teqne	r1, #0
 80084d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80084d6:	d014      	beq.n	8008502 <__aeabi_fmul+0x15e>
 80084d8:	ea92 0f0c 	teq	r2, ip
 80084dc:	d101      	bne.n	80084e2 <__aeabi_fmul+0x13e>
 80084de:	0242      	lsls	r2, r0, #9
 80084e0:	d10f      	bne.n	8008502 <__aeabi_fmul+0x15e>
 80084e2:	ea93 0f0c 	teq	r3, ip
 80084e6:	d103      	bne.n	80084f0 <__aeabi_fmul+0x14c>
 80084e8:	024b      	lsls	r3, r1, #9
 80084ea:	bf18      	it	ne
 80084ec:	4608      	movne	r0, r1
 80084ee:	d108      	bne.n	8008502 <__aeabi_fmul+0x15e>
 80084f0:	ea80 0001 	eor.w	r0, r0, r1
 80084f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80084f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80084fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008500:	4770      	bx	lr
 8008502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800850a:	4770      	bx	lr

0800850c <__aeabi_drsub>:
 800850c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008510:	e002      	b.n	8008518 <__adddf3>
 8008512:	bf00      	nop

08008514 <__aeabi_dsub>:
 8008514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008518 <__adddf3>:
 8008518:	b530      	push	{r4, r5, lr}
 800851a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800851e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008522:	ea94 0f05 	teq	r4, r5
 8008526:	bf08      	it	eq
 8008528:	ea90 0f02 	teqeq	r0, r2
 800852c:	bf1f      	itttt	ne
 800852e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800853a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800853e:	f000 80e2 	beq.w	8008706 <__adddf3+0x1ee>
 8008542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800854a:	bfb8      	it	lt
 800854c:	426d      	neglt	r5, r5
 800854e:	dd0c      	ble.n	800856a <__adddf3+0x52>
 8008550:	442c      	add	r4, r5
 8008552:	ea80 0202 	eor.w	r2, r0, r2
 8008556:	ea81 0303 	eor.w	r3, r1, r3
 800855a:	ea82 0000 	eor.w	r0, r2, r0
 800855e:	ea83 0101 	eor.w	r1, r3, r1
 8008562:	ea80 0202 	eor.w	r2, r0, r2
 8008566:	ea81 0303 	eor.w	r3, r1, r3
 800856a:	2d36      	cmp	r5, #54	; 0x36
 800856c:	bf88      	it	hi
 800856e:	bd30      	pophi	{r4, r5, pc}
 8008570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800857c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008580:	d002      	beq.n	8008588 <__adddf3+0x70>
 8008582:	4240      	negs	r0, r0
 8008584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800858c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008594:	d002      	beq.n	800859c <__adddf3+0x84>
 8008596:	4252      	negs	r2, r2
 8008598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800859c:	ea94 0f05 	teq	r4, r5
 80085a0:	f000 80a7 	beq.w	80086f2 <__adddf3+0x1da>
 80085a4:	f1a4 0401 	sub.w	r4, r4, #1
 80085a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80085ac:	db0d      	blt.n	80085ca <__adddf3+0xb2>
 80085ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80085b2:	fa22 f205 	lsr.w	r2, r2, r5
 80085b6:	1880      	adds	r0, r0, r2
 80085b8:	f141 0100 	adc.w	r1, r1, #0
 80085bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80085c0:	1880      	adds	r0, r0, r2
 80085c2:	fa43 f305 	asr.w	r3, r3, r5
 80085c6:	4159      	adcs	r1, r3
 80085c8:	e00e      	b.n	80085e8 <__adddf3+0xd0>
 80085ca:	f1a5 0520 	sub.w	r5, r5, #32
 80085ce:	f10e 0e20 	add.w	lr, lr, #32
 80085d2:	2a01      	cmp	r2, #1
 80085d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80085d8:	bf28      	it	cs
 80085da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80085de:	fa43 f305 	asr.w	r3, r3, r5
 80085e2:	18c0      	adds	r0, r0, r3
 80085e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80085e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80085ec:	d507      	bpl.n	80085fe <__adddf3+0xe6>
 80085ee:	f04f 0e00 	mov.w	lr, #0
 80085f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80085f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80085fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80085fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008602:	d31b      	bcc.n	800863c <__adddf3+0x124>
 8008604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008608:	d30c      	bcc.n	8008624 <__adddf3+0x10c>
 800860a:	0849      	lsrs	r1, r1, #1
 800860c:	ea5f 0030 	movs.w	r0, r0, rrx
 8008610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008614:	f104 0401 	add.w	r4, r4, #1
 8008618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800861c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008620:	f080 809a 	bcs.w	8008758 <__adddf3+0x240>
 8008624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008628:	bf08      	it	eq
 800862a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800862e:	f150 0000 	adcs.w	r0, r0, #0
 8008632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008636:	ea41 0105 	orr.w	r1, r1, r5
 800863a:	bd30      	pop	{r4, r5, pc}
 800863c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008640:	4140      	adcs	r0, r0
 8008642:	eb41 0101 	adc.w	r1, r1, r1
 8008646:	3c01      	subs	r4, #1
 8008648:	bf28      	it	cs
 800864a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800864e:	d2e9      	bcs.n	8008624 <__adddf3+0x10c>
 8008650:	f091 0f00 	teq	r1, #0
 8008654:	bf04      	itt	eq
 8008656:	4601      	moveq	r1, r0
 8008658:	2000      	moveq	r0, #0
 800865a:	fab1 f381 	clz	r3, r1
 800865e:	bf08      	it	eq
 8008660:	3320      	addeq	r3, #32
 8008662:	f1a3 030b 	sub.w	r3, r3, #11
 8008666:	f1b3 0220 	subs.w	r2, r3, #32
 800866a:	da0c      	bge.n	8008686 <__adddf3+0x16e>
 800866c:	320c      	adds	r2, #12
 800866e:	dd08      	ble.n	8008682 <__adddf3+0x16a>
 8008670:	f102 0c14 	add.w	ip, r2, #20
 8008674:	f1c2 020c 	rsb	r2, r2, #12
 8008678:	fa01 f00c 	lsl.w	r0, r1, ip
 800867c:	fa21 f102 	lsr.w	r1, r1, r2
 8008680:	e00c      	b.n	800869c <__adddf3+0x184>
 8008682:	f102 0214 	add.w	r2, r2, #20
 8008686:	bfd8      	it	le
 8008688:	f1c2 0c20 	rsble	ip, r2, #32
 800868c:	fa01 f102 	lsl.w	r1, r1, r2
 8008690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008694:	bfdc      	itt	le
 8008696:	ea41 010c 	orrle.w	r1, r1, ip
 800869a:	4090      	lslle	r0, r2
 800869c:	1ae4      	subs	r4, r4, r3
 800869e:	bfa2      	ittt	ge
 80086a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80086a4:	4329      	orrge	r1, r5
 80086a6:	bd30      	popge	{r4, r5, pc}
 80086a8:	ea6f 0404 	mvn.w	r4, r4
 80086ac:	3c1f      	subs	r4, #31
 80086ae:	da1c      	bge.n	80086ea <__adddf3+0x1d2>
 80086b0:	340c      	adds	r4, #12
 80086b2:	dc0e      	bgt.n	80086d2 <__adddf3+0x1ba>
 80086b4:	f104 0414 	add.w	r4, r4, #20
 80086b8:	f1c4 0220 	rsb	r2, r4, #32
 80086bc:	fa20 f004 	lsr.w	r0, r0, r4
 80086c0:	fa01 f302 	lsl.w	r3, r1, r2
 80086c4:	ea40 0003 	orr.w	r0, r0, r3
 80086c8:	fa21 f304 	lsr.w	r3, r1, r4
 80086cc:	ea45 0103 	orr.w	r1, r5, r3
 80086d0:	bd30      	pop	{r4, r5, pc}
 80086d2:	f1c4 040c 	rsb	r4, r4, #12
 80086d6:	f1c4 0220 	rsb	r2, r4, #32
 80086da:	fa20 f002 	lsr.w	r0, r0, r2
 80086de:	fa01 f304 	lsl.w	r3, r1, r4
 80086e2:	ea40 0003 	orr.w	r0, r0, r3
 80086e6:	4629      	mov	r1, r5
 80086e8:	bd30      	pop	{r4, r5, pc}
 80086ea:	fa21 f004 	lsr.w	r0, r1, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	bd30      	pop	{r4, r5, pc}
 80086f2:	f094 0f00 	teq	r4, #0
 80086f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80086fa:	bf06      	itte	eq
 80086fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008700:	3401      	addeq	r4, #1
 8008702:	3d01      	subne	r5, #1
 8008704:	e74e      	b.n	80085a4 <__adddf3+0x8c>
 8008706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800870a:	bf18      	it	ne
 800870c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008710:	d029      	beq.n	8008766 <__adddf3+0x24e>
 8008712:	ea94 0f05 	teq	r4, r5
 8008716:	bf08      	it	eq
 8008718:	ea90 0f02 	teqeq	r0, r2
 800871c:	d005      	beq.n	800872a <__adddf3+0x212>
 800871e:	ea54 0c00 	orrs.w	ip, r4, r0
 8008722:	bf04      	itt	eq
 8008724:	4619      	moveq	r1, r3
 8008726:	4610      	moveq	r0, r2
 8008728:	bd30      	pop	{r4, r5, pc}
 800872a:	ea91 0f03 	teq	r1, r3
 800872e:	bf1e      	ittt	ne
 8008730:	2100      	movne	r1, #0
 8008732:	2000      	movne	r0, #0
 8008734:	bd30      	popne	{r4, r5, pc}
 8008736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800873a:	d105      	bne.n	8008748 <__adddf3+0x230>
 800873c:	0040      	lsls	r0, r0, #1
 800873e:	4149      	adcs	r1, r1
 8008740:	bf28      	it	cs
 8008742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008746:	bd30      	pop	{r4, r5, pc}
 8008748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800874c:	bf3c      	itt	cc
 800874e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008752:	bd30      	popcc	{r4, r5, pc}
 8008754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800875c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008760:	f04f 0000 	mov.w	r0, #0
 8008764:	bd30      	pop	{r4, r5, pc}
 8008766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800876a:	bf1a      	itte	ne
 800876c:	4619      	movne	r1, r3
 800876e:	4610      	movne	r0, r2
 8008770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008774:	bf1c      	itt	ne
 8008776:	460b      	movne	r3, r1
 8008778:	4602      	movne	r2, r0
 800877a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800877e:	bf06      	itte	eq
 8008780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008784:	ea91 0f03 	teqeq	r1, r3
 8008788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800878c:	bd30      	pop	{r4, r5, pc}
 800878e:	bf00      	nop

08008790 <__aeabi_ui2d>:
 8008790:	f090 0f00 	teq	r0, #0
 8008794:	bf04      	itt	eq
 8008796:	2100      	moveq	r1, #0
 8008798:	4770      	bxeq	lr
 800879a:	b530      	push	{r4, r5, lr}
 800879c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80087a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80087a4:	f04f 0500 	mov.w	r5, #0
 80087a8:	f04f 0100 	mov.w	r1, #0
 80087ac:	e750      	b.n	8008650 <__adddf3+0x138>
 80087ae:	bf00      	nop

080087b0 <__aeabi_i2d>:
 80087b0:	f090 0f00 	teq	r0, #0
 80087b4:	bf04      	itt	eq
 80087b6:	2100      	moveq	r1, #0
 80087b8:	4770      	bxeq	lr
 80087ba:	b530      	push	{r4, r5, lr}
 80087bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80087c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80087c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80087c8:	bf48      	it	mi
 80087ca:	4240      	negmi	r0, r0
 80087cc:	f04f 0100 	mov.w	r1, #0
 80087d0:	e73e      	b.n	8008650 <__adddf3+0x138>
 80087d2:	bf00      	nop

080087d4 <__aeabi_f2d>:
 80087d4:	0042      	lsls	r2, r0, #1
 80087d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80087da:	ea4f 0131 	mov.w	r1, r1, rrx
 80087de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80087e2:	bf1f      	itttt	ne
 80087e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80087e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80087ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80087f0:	4770      	bxne	lr
 80087f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80087f6:	bf08      	it	eq
 80087f8:	4770      	bxeq	lr
 80087fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80087fe:	bf04      	itt	eq
 8008800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008804:	4770      	bxeq	lr
 8008806:	b530      	push	{r4, r5, lr}
 8008808:	f44f 7460 	mov.w	r4, #896	; 0x380
 800880c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008814:	e71c      	b.n	8008650 <__adddf3+0x138>
 8008816:	bf00      	nop

08008818 <__aeabi_ul2d>:
 8008818:	ea50 0201 	orrs.w	r2, r0, r1
 800881c:	bf08      	it	eq
 800881e:	4770      	bxeq	lr
 8008820:	b530      	push	{r4, r5, lr}
 8008822:	f04f 0500 	mov.w	r5, #0
 8008826:	e00a      	b.n	800883e <__aeabi_l2d+0x16>

08008828 <__aeabi_l2d>:
 8008828:	ea50 0201 	orrs.w	r2, r0, r1
 800882c:	bf08      	it	eq
 800882e:	4770      	bxeq	lr
 8008830:	b530      	push	{r4, r5, lr}
 8008832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008836:	d502      	bpl.n	800883e <__aeabi_l2d+0x16>
 8008838:	4240      	negs	r0, r0
 800883a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800883e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008842:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800884a:	f43f aed8 	beq.w	80085fe <__adddf3+0xe6>
 800884e:	f04f 0203 	mov.w	r2, #3
 8008852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008856:	bf18      	it	ne
 8008858:	3203      	addne	r2, #3
 800885a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800885e:	bf18      	it	ne
 8008860:	3203      	addne	r2, #3
 8008862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008866:	f1c2 0320 	rsb	r3, r2, #32
 800886a:	fa00 fc03 	lsl.w	ip, r0, r3
 800886e:	fa20 f002 	lsr.w	r0, r0, r2
 8008872:	fa01 fe03 	lsl.w	lr, r1, r3
 8008876:	ea40 000e 	orr.w	r0, r0, lr
 800887a:	fa21 f102 	lsr.w	r1, r1, r2
 800887e:	4414      	add	r4, r2
 8008880:	e6bd      	b.n	80085fe <__adddf3+0xe6>
 8008882:	bf00      	nop

08008884 <__aeabi_d2uiz>:
 8008884:	004a      	lsls	r2, r1, #1
 8008886:	d211      	bcs.n	80088ac <__aeabi_d2uiz+0x28>
 8008888:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800888c:	d211      	bcs.n	80088b2 <__aeabi_d2uiz+0x2e>
 800888e:	d50d      	bpl.n	80088ac <__aeabi_d2uiz+0x28>
 8008890:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008894:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008898:	d40e      	bmi.n	80088b8 <__aeabi_d2uiz+0x34>
 800889a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800889e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80088a6:	fa23 f002 	lsr.w	r0, r3, r2
 80088aa:	4770      	bx	lr
 80088ac:	f04f 0000 	mov.w	r0, #0
 80088b0:	4770      	bx	lr
 80088b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80088b6:	d102      	bne.n	80088be <__aeabi_d2uiz+0x3a>
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	4770      	bx	lr
 80088be:	f04f 0000 	mov.w	r0, #0
 80088c2:	4770      	bx	lr

080088c4 <__aeabi_frsub>:
 80088c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80088c8:	e002      	b.n	80088d0 <__addsf3>
 80088ca:	bf00      	nop

080088cc <__aeabi_fsub>:
 80088cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080088d0 <__addsf3>:
 80088d0:	0042      	lsls	r2, r0, #1
 80088d2:	bf1f      	itttt	ne
 80088d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80088d8:	ea92 0f03 	teqne	r2, r3
 80088dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80088e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80088e4:	d06a      	beq.n	80089bc <__addsf3+0xec>
 80088e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80088ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80088ee:	bfc1      	itttt	gt
 80088f0:	18d2      	addgt	r2, r2, r3
 80088f2:	4041      	eorgt	r1, r0
 80088f4:	4048      	eorgt	r0, r1
 80088f6:	4041      	eorgt	r1, r0
 80088f8:	bfb8      	it	lt
 80088fa:	425b      	neglt	r3, r3
 80088fc:	2b19      	cmp	r3, #25
 80088fe:	bf88      	it	hi
 8008900:	4770      	bxhi	lr
 8008902:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8008906:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800890a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800890e:	bf18      	it	ne
 8008910:	4240      	negne	r0, r0
 8008912:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008916:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800891a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800891e:	bf18      	it	ne
 8008920:	4249      	negne	r1, r1
 8008922:	ea92 0f03 	teq	r2, r3
 8008926:	d03f      	beq.n	80089a8 <__addsf3+0xd8>
 8008928:	f1a2 0201 	sub.w	r2, r2, #1
 800892c:	fa41 fc03 	asr.w	ip, r1, r3
 8008930:	eb10 000c 	adds.w	r0, r0, ip
 8008934:	f1c3 0320 	rsb	r3, r3, #32
 8008938:	fa01 f103 	lsl.w	r1, r1, r3
 800893c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008940:	d502      	bpl.n	8008948 <__addsf3+0x78>
 8008942:	4249      	negs	r1, r1
 8008944:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8008948:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800894c:	d313      	bcc.n	8008976 <__addsf3+0xa6>
 800894e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008952:	d306      	bcc.n	8008962 <__addsf3+0x92>
 8008954:	0840      	lsrs	r0, r0, #1
 8008956:	ea4f 0131 	mov.w	r1, r1, rrx
 800895a:	f102 0201 	add.w	r2, r2, #1
 800895e:	2afe      	cmp	r2, #254	; 0xfe
 8008960:	d251      	bcs.n	8008a06 <__addsf3+0x136>
 8008962:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8008966:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800896a:	bf08      	it	eq
 800896c:	f020 0001 	biceq.w	r0, r0, #1
 8008970:	ea40 0003 	orr.w	r0, r0, r3
 8008974:	4770      	bx	lr
 8008976:	0049      	lsls	r1, r1, #1
 8008978:	eb40 0000 	adc.w	r0, r0, r0
 800897c:	3a01      	subs	r2, #1
 800897e:	bf28      	it	cs
 8008980:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8008984:	d2ed      	bcs.n	8008962 <__addsf3+0x92>
 8008986:	fab0 fc80 	clz	ip, r0
 800898a:	f1ac 0c08 	sub.w	ip, ip, #8
 800898e:	ebb2 020c 	subs.w	r2, r2, ip
 8008992:	fa00 f00c 	lsl.w	r0, r0, ip
 8008996:	bfaa      	itet	ge
 8008998:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800899c:	4252      	neglt	r2, r2
 800899e:	4318      	orrge	r0, r3
 80089a0:	bfbc      	itt	lt
 80089a2:	40d0      	lsrlt	r0, r2
 80089a4:	4318      	orrlt	r0, r3
 80089a6:	4770      	bx	lr
 80089a8:	f092 0f00 	teq	r2, #0
 80089ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80089b0:	bf06      	itte	eq
 80089b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80089b6:	3201      	addeq	r2, #1
 80089b8:	3b01      	subne	r3, #1
 80089ba:	e7b5      	b.n	8008928 <__addsf3+0x58>
 80089bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80089c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80089c4:	bf18      	it	ne
 80089c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80089ca:	d021      	beq.n	8008a10 <__addsf3+0x140>
 80089cc:	ea92 0f03 	teq	r2, r3
 80089d0:	d004      	beq.n	80089dc <__addsf3+0x10c>
 80089d2:	f092 0f00 	teq	r2, #0
 80089d6:	bf08      	it	eq
 80089d8:	4608      	moveq	r0, r1
 80089da:	4770      	bx	lr
 80089dc:	ea90 0f01 	teq	r0, r1
 80089e0:	bf1c      	itt	ne
 80089e2:	2000      	movne	r0, #0
 80089e4:	4770      	bxne	lr
 80089e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80089ea:	d104      	bne.n	80089f6 <__addsf3+0x126>
 80089ec:	0040      	lsls	r0, r0, #1
 80089ee:	bf28      	it	cs
 80089f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80089f4:	4770      	bx	lr
 80089f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80089fa:	bf3c      	itt	cc
 80089fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8008a00:	4770      	bxcc	lr
 8008a02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008a06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8008a0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a0e:	4770      	bx	lr
 8008a10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8008a14:	bf16      	itet	ne
 8008a16:	4608      	movne	r0, r1
 8008a18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8008a1c:	4601      	movne	r1, r0
 8008a1e:	0242      	lsls	r2, r0, #9
 8008a20:	bf06      	itte	eq
 8008a22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8008a26:	ea90 0f01 	teqeq	r0, r1
 8008a2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8008a2e:	4770      	bx	lr

08008a30 <__aeabi_ui2f>:
 8008a30:	f04f 0300 	mov.w	r3, #0
 8008a34:	e004      	b.n	8008a40 <__aeabi_i2f+0x8>
 8008a36:	bf00      	nop

08008a38 <__aeabi_i2f>:
 8008a38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8008a3c:	bf48      	it	mi
 8008a3e:	4240      	negmi	r0, r0
 8008a40:	ea5f 0c00 	movs.w	ip, r0
 8008a44:	bf08      	it	eq
 8008a46:	4770      	bxeq	lr
 8008a48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8008a4c:	4601      	mov	r1, r0
 8008a4e:	f04f 0000 	mov.w	r0, #0
 8008a52:	e01c      	b.n	8008a8e <__aeabi_l2f+0x2a>

08008a54 <__aeabi_ul2f>:
 8008a54:	ea50 0201 	orrs.w	r2, r0, r1
 8008a58:	bf08      	it	eq
 8008a5a:	4770      	bxeq	lr
 8008a5c:	f04f 0300 	mov.w	r3, #0
 8008a60:	e00a      	b.n	8008a78 <__aeabi_l2f+0x14>
 8008a62:	bf00      	nop

08008a64 <__aeabi_l2f>:
 8008a64:	ea50 0201 	orrs.w	r2, r0, r1
 8008a68:	bf08      	it	eq
 8008a6a:	4770      	bxeq	lr
 8008a6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8008a70:	d502      	bpl.n	8008a78 <__aeabi_l2f+0x14>
 8008a72:	4240      	negs	r0, r0
 8008a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008a78:	ea5f 0c01 	movs.w	ip, r1
 8008a7c:	bf02      	ittt	eq
 8008a7e:	4684      	moveq	ip, r0
 8008a80:	4601      	moveq	r1, r0
 8008a82:	2000      	moveq	r0, #0
 8008a84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8008a88:	bf08      	it	eq
 8008a8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8008a8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008a92:	fabc f28c 	clz	r2, ip
 8008a96:	3a08      	subs	r2, #8
 8008a98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8008a9c:	db10      	blt.n	8008ac0 <__aeabi_l2f+0x5c>
 8008a9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8008aa2:	4463      	add	r3, ip
 8008aa4:	fa00 fc02 	lsl.w	ip, r0, r2
 8008aa8:	f1c2 0220 	rsb	r2, r2, #32
 8008aac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008ab0:	fa20 f202 	lsr.w	r2, r0, r2
 8008ab4:	eb43 0002 	adc.w	r0, r3, r2
 8008ab8:	bf08      	it	eq
 8008aba:	f020 0001 	biceq.w	r0, r0, #1
 8008abe:	4770      	bx	lr
 8008ac0:	f102 0220 	add.w	r2, r2, #32
 8008ac4:	fa01 fc02 	lsl.w	ip, r1, r2
 8008ac8:	f1c2 0220 	rsb	r2, r2, #32
 8008acc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8008ad0:	fa21 f202 	lsr.w	r2, r1, r2
 8008ad4:	eb43 0002 	adc.w	r0, r3, r2
 8008ad8:	bf08      	it	eq
 8008ada:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008ade:	4770      	bx	lr

08008ae0 <__aeabi_f2uiz>:
 8008ae0:	0042      	lsls	r2, r0, #1
 8008ae2:	d20e      	bcs.n	8008b02 <__aeabi_f2uiz+0x22>
 8008ae4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8008ae8:	d30b      	bcc.n	8008b02 <__aeabi_f2uiz+0x22>
 8008aea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8008aee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8008af2:	d409      	bmi.n	8008b08 <__aeabi_f2uiz+0x28>
 8008af4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8008af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008afc:	fa23 f002 	lsr.w	r0, r3, r2
 8008b00:	4770      	bx	lr
 8008b02:	f04f 0000 	mov.w	r0, #0
 8008b06:	4770      	bx	lr
 8008b08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8008b0c:	d101      	bne.n	8008b12 <__aeabi_f2uiz+0x32>
 8008b0e:	0242      	lsls	r2, r0, #9
 8008b10:	d102      	bne.n	8008b18 <__aeabi_f2uiz+0x38>
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	4770      	bx	lr
 8008b18:	f04f 0000 	mov.w	r0, #0
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop

08008b20 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b26:	2400      	movs	r4, #0
 8008b28:	9404      	str	r4, [sp, #16]
 8008b2a:	9405      	str	r4, [sp, #20]
 8008b2c:	9406      	str	r4, [sp, #24]
 8008b2e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b30:	4b33      	ldr	r3, [pc, #204]	; (8008c00 <MX_GPIO_Init+0xe0>)
 8008b32:	699a      	ldr	r2, [r3, #24]
 8008b34:	f042 0210 	orr.w	r2, r2, #16
 8008b38:	619a      	str	r2, [r3, #24]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	f002 0210 	and.w	r2, r2, #16
 8008b40:	9200      	str	r2, [sp, #0]
 8008b42:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b44:	699a      	ldr	r2, [r3, #24]
 8008b46:	f042 0220 	orr.w	r2, r2, #32
 8008b4a:	619a      	str	r2, [r3, #24]
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	f002 0220 	and.w	r2, r2, #32
 8008b52:	9201      	str	r2, [sp, #4]
 8008b54:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b56:	699a      	ldr	r2, [r3, #24]
 8008b58:	f042 0204 	orr.w	r2, r2, #4
 8008b5c:	619a      	str	r2, [r3, #24]
 8008b5e:	699a      	ldr	r2, [r3, #24]
 8008b60:	f002 0204 	and.w	r2, r2, #4
 8008b64:	9202      	str	r2, [sp, #8]
 8008b66:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b68:	699a      	ldr	r2, [r3, #24]
 8008b6a:	f042 0208 	orr.w	r2, r2, #8
 8008b6e:	619a      	str	r2, [r3, #24]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	9303      	str	r3, [sp, #12]
 8008b78:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USS_TRIGGER_GPIO_Port, USS_TRIGGER_Pin, GPIO_PIN_RESET);
 8008b7a:	4e22      	ldr	r6, [pc, #136]	; (8008c04 <MX_GPIO_Init+0xe4>)
 8008b7c:	4622      	mov	r2, r4
 8008b7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b82:	4630      	mov	r0, r6
 8008b84:	f001 f830 	bl	8009be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8008b88:	4d1f      	ldr	r5, [pc, #124]	; (8008c08 <MX_GPIO_Init+0xe8>)
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b90:	4628      	mov	r0, r5
 8008b92:	f001 f829 	bl	8009be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8008b96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8008b9a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b9c:	2703      	movs	r7, #3
 8008b9e:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ba0:	a904      	add	r1, sp, #16
 8008ba2:	481a      	ldr	r0, [pc, #104]	; (8008c0c <MX_GPIO_Init+0xec>)
 8008ba4:	f000 ff0e 	bl	80099c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8008ba8:	f64f 0373 	movw	r3, #63603	; 0xf873
 8008bac:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008bae:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bb0:	a904      	add	r1, sp, #16
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 ff06 	bl	80099c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8008bb8:	f24f 33fe 	movw	r3, #62462	; 0xf3fe
 8008bbc:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008bbe:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bc0:	a904      	add	r1, sp, #16
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f000 fefe 	bl	80099c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USS_TRIGGER_Pin;
 8008bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bcc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bce:	f04f 0801 	mov.w	r8, #1
 8008bd2:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bd6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bd8:	2702      	movs	r7, #2
 8008bda:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(USS_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8008bdc:	a904      	add	r1, sp, #16
 8008bde:	4630      	mov	r0, r6
 8008be0:	f000 fef0 	bl	80099c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8008be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008be8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bea:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bee:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bf0:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8008bf2:	a904      	add	r1, sp, #16
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f000 fee5 	bl	80099c4 <HAL_GPIO_Init>

}
 8008bfa:	b008      	add	sp, #32
 8008bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c00:	40021000 	.word	0x40021000
 8008c04:	40010c00 	.word	0x40010c00
 8008c08:	40010800 	.word	0x40010800
 8008c0c:	40011000 	.word	0x40011000

08008c10 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008c10:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008c12:	e7fe      	b.n	8008c12 <Error_Handler+0x2>

08008c14 <SystemClock_Config>:
{
 8008c14:	b500      	push	{lr}
 8008c16:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c18:	2228      	movs	r2, #40	; 0x28
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	eb0d 0002 	add.w	r0, sp, r2
 8008c20:	f002 ff8a 	bl	800bb38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c24:	2300      	movs	r3, #0
 8008c26:	9305      	str	r3, [sp, #20]
 8008c28:	9306      	str	r3, [sp, #24]
 8008c2a:	9307      	str	r3, [sp, #28]
 8008c2c:	9308      	str	r3, [sp, #32]
 8008c2e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	9302      	str	r3, [sp, #8]
 8008c34:	9303      	str	r3, [sp, #12]
 8008c36:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8008c38:	2309      	movs	r3, #9
 8008c3a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c40:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008c42:	2201      	movs	r2, #1
 8008c44:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008c46:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c48:	2202      	movs	r2, #2
 8008c4a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008c4c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008c4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008c52:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008c54:	a80a      	add	r0, sp, #40	; 0x28
 8008c56:	f001 f863 	bl	8009d20 <HAL_RCC_OscConfig>
 8008c5a:	b9d8      	cbnz	r0, 8008c94 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008c5c:	230f      	movs	r3, #15
 8008c5e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008c60:	2102      	movs	r1, #2
 8008c62:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c64:	2300      	movs	r3, #0
 8008c66:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c6c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008c6e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008c70:	a805      	add	r0, sp, #20
 8008c72:	f001 fa8d 	bl	800a190 <HAL_RCC_ClockConfig>
 8008c76:	b978      	cbnz	r0, 8008c98 <SystemClock_Config+0x84>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c80:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008c82:	a801      	add	r0, sp, #4
 8008c84:	f001 fb72 	bl	800a36c <HAL_RCCEx_PeriphCLKConfig>
 8008c88:	b940      	cbnz	r0, 8008c9c <SystemClock_Config+0x88>
  HAL_RCC_EnableCSS();
 8008c8a:	f001 fa51 	bl	800a130 <HAL_RCC_EnableCSS>
}
 8008c8e:	b015      	add	sp, #84	; 0x54
 8008c90:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008c94:	f7ff ffbc 	bl	8008c10 <Error_Handler>
    Error_Handler();
 8008c98:	f7ff ffba 	bl	8008c10 <Error_Handler>
    Error_Handler();
 8008c9c:	f7ff ffb8 	bl	8008c10 <Error_Handler>

08008ca0 <main>:
{
 8008ca0:	b508      	push	{r3, lr}
  HAL_Init();
 8008ca2:	f000 fd7d 	bl	80097a0 <HAL_Init>
  SystemClock_Config();
 8008ca6:	f7ff ffb5 	bl	8008c14 <SystemClock_Config>
  MX_GPIO_Init();
 8008caa:	f7ff ff39 	bl	8008b20 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8008cae:	f000 fc85 	bl	80095bc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8008cb2:	f000 fc21 	bl	80094f8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8008cb6:	f000 fc9b 	bl	80095f0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8008cba:	f000 fb45 	bl	8009348 <MX_TIM4_Init>
  MX_TIM2_Init();
 8008cbe:	f000 fb09 	bl	80092d4 <MX_TIM2_Init>
  MX_RTC_Init();
 8008cc2:	f000 f81f 	bl	8008d04 <MX_RTC_Init>
 8008cc6:	b672      	cpsid	i
  HAL_TIM_Base_Start(&htim4);
 8008cc8:	480b      	ldr	r0, [pc, #44]	; (8008cf8 <main+0x58>)
 8008cca:	f001 ff5b 	bl	800ab84 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8008cce:	4c0b      	ldr	r4, [pc, #44]	; (8008cfc <main+0x5c>)
 8008cd0:	2104      	movs	r1, #4
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f002 fae6 	bl	800b2a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8008cd8:	2108      	movs	r1, #8
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f002 fae2 	bl	800b2a4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8008ce0:	2108      	movs	r1, #8
 8008ce2:	4807      	ldr	r0, [pc, #28]	; (8008d00 <main+0x60>)
 8008ce4:	f002 fb4c 	bl	800b380 <HAL_TIM_IC_Start_IT>
  vehicle_init();
 8008ce8:	f000 fa62 	bl	80091b0 <vehicle_init>
  __ASM volatile ("cpsie i" : : : "memory");
 8008cec:	b662      	cpsie	i
	  CheckIfDistanceInValidRange(GetUltraSonicDistance());
 8008cee:	f000 f9fb 	bl	80090e8 <GetUltraSonicDistance>
 8008cf2:	f000 fa43 	bl	800917c <CheckIfDistanceInValidRange>
  while (1)
 8008cf6:	e7fa      	b.n	8008cee <main+0x4e>
 8008cf8:	2000011c 	.word	0x2000011c
 8008cfc:	200000d4 	.word	0x200000d4
 8008d00:	2000008c 	.word	0x2000008c

08008d04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008d04:	b500      	push	{lr}
 8008d06:	b083      	sub	sp, #12

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8008d0e:	f88d 3006 	strb.w	r3, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 8008d12:	9300      	str	r3, [sp, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008d14:	4818      	ldr	r0, [pc, #96]	; (8008d78 <MX_RTC_Init+0x74>)
 8008d16:	4a19      	ldr	r2, [pc, #100]	; (8008d7c <MX_RTC_Init+0x78>)
 8008d18:	6002      	str	r2, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8008d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1e:	6042      	str	r2, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8008d20:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008d22:	f001 fdcd 	bl	800a8c0 <HAL_RTC_Init>
 8008d26:	b9e8      	cbnz	r0, 8008d64 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f88d 2004 	strb.w	r2, [sp, #4]
  sTime.Minutes = 0;
 8008d2e:	f88d 2005 	strb.w	r2, [sp, #5]
  sTime.Seconds = 0;
 8008d32:	f88d 2006 	strb.w	r2, [sp, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008d36:	a901      	add	r1, sp, #4
 8008d38:	480f      	ldr	r0, [pc, #60]	; (8008d78 <MX_RTC_Init+0x74>)
 8008d3a:	f001 fcda 	bl	800a6f2 <HAL_RTC_SetTime>
 8008d3e:	b9a0      	cbnz	r0, 8008d6a <MX_RTC_Init+0x66>
  {
    Error_Handler();
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8008d40:	2301      	movs	r3, #1
 8008d42:	f88d 3000 	strb.w	r3, [sp]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008d46:	f88d 3001 	strb.w	r3, [sp, #1]
  DateToUpdate.Date = 1;
 8008d4a:	f88d 3002 	strb.w	r3, [sp, #2]
  DateToUpdate.Year = 0;
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f88d 2003 	strb.w	r2, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8008d54:	4669      	mov	r1, sp
 8008d56:	4808      	ldr	r0, [pc, #32]	; (8008d78 <MX_RTC_Init+0x74>)
 8008d58:	f001 fd2c 	bl	800a7b4 <HAL_RTC_SetDate>
 8008d5c:	b940      	cbnz	r0, 8008d70 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008d5e:	b003      	add	sp, #12
 8008d60:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008d64:	f7ff ff54 	bl	8008c10 <Error_Handler>
 8008d68:	e7de      	b.n	8008d28 <MX_RTC_Init+0x24>
    Error_Handler();
 8008d6a:	f7ff ff51 	bl	8008c10 <Error_Handler>
 8008d6e:	e7e7      	b.n	8008d40 <MX_RTC_Init+0x3c>
    Error_Handler();
 8008d70:	f7ff ff4e 	bl	8008c10 <Error_Handler>
}
 8008d74:	e7f3      	b.n	8008d5e <MX_RTC_Init+0x5a>
 8008d76:	bf00      	nop
 8008d78:	20000068 	.word	0x20000068
 8008d7c:	40002800 	.word	0x40002800

08008d80 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8008d80:	6802      	ldr	r2, [r0, #0]
 8008d82:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <HAL_RTC_MspInit+0x34>)
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d000      	beq.n	8008d8a <HAL_RTC_MspInit+0xa>
 8008d88:	4770      	bx	lr
{
 8008d8a:	b500      	push	{lr}
 8008d8c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8008d8e:	f000 ff31 	bl	8009bf4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8008d92:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <HAL_RTC_MspInit+0x38>)
 8008d94:	69da      	ldr	r2, [r3, #28]
 8008d96:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008d9a:	61da      	str	r2, [r3, #28]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008da2:	9301      	str	r3, [sp, #4]
 8008da4:	9b01      	ldr	r3, [sp, #4]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008da6:	4b05      	ldr	r3, [pc, #20]	; (8008dbc <HAL_RTC_MspInit+0x3c>)
 8008da8:	2201      	movs	r2, #1
 8008daa:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008dae:	b003      	add	sp, #12
 8008db0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008db4:	40002800 	.word	0x40002800
 8008db8:	40021000 	.word	0x40021000
 8008dbc:	42420000 	.word	0x42420000

08008dc0 <delay_us>:
 *
 */
static uint8 uss_work_flag = FALSE;

static void delay_us(uint16 delay) {
	if(0 != delay) {
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	b130      	cbz	r0, 8008dd2 <delay_us+0x12>
	    __HAL_TIM_SET_COUNTER(&htim4, 0);
 8008dc4:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <delay_us+0x14>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	6253      	str	r3, [r2, #36]	; 0x24
	    while(__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8008dcc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8008dce:	428b      	cmp	r3, r1
 8008dd0:	d3fc      	bcc.n	8008dcc <delay_us+0xc>
	}
}
 8008dd2:	4770      	bx	lr
 8008dd4:	2000011c 	.word	0x2000011c

08008dd8 <__vJumpToBootloader>:
__STATIC __NORETURN __vJumpToBootloader(void) {
 8008dd8:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8008dda:	b672      	cpsid	i
	memset((uint32*)NVIC->ICER, 0xFF, sizeof(NVIC->ICER));
 8008ddc:	2220      	movs	r2, #32
 8008dde:	21ff      	movs	r1, #255	; 0xff
 8008de0:	4811      	ldr	r0, [pc, #68]	; (8008e28 <__vJumpToBootloader+0x50>)
 8008de2:	f002 fea9 	bl	800bb38 <memset>
	SysTick->CTRL = 0;
 8008de6:	2500      	movs	r5, #0
 8008de8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008dec:	611d      	str	r5, [r3, #16]
	SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8008dee:	4c0f      	ldr	r4, [pc, #60]	; (8008e2c <__vJumpToBootloader+0x54>)
 8008df0:	6863      	ldr	r3, [r4, #4]
 8008df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008df6:	6063      	str	r3, [r4, #4]
	memset((uint32*)NVIC->ICPR, 0xFF, sizeof(NVIC->ICPR));
 8008df8:	2220      	movs	r2, #32
 8008dfa:	21ff      	movs	r1, #255	; 0xff
 8008dfc:	480c      	ldr	r0, [pc, #48]	; (8008e30 <__vJumpToBootloader+0x58>)
 8008dfe:	f002 fe9b 	bl	800bb38 <memset>
	SCB->VTOR = (uint32)(BOOTLOADER_START_ADDR);
 8008e02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e06:	60a3      	str	r3, [r4, #8]
	uint32 local_u32MspValue = *((uint32_t volatile *)(BOOTLOADER_START_ADDR));
 8008e08:	681a      	ldr	r2, [r3, #0]
	uint32 local_u32ResetHandler = *((uint32_t volatile *) (BOOTLOADER_START_ADDR + 4u));
 8008e0a:	685b      	ldr	r3, [r3, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008e0c:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8008e10:	f385 8814 	msr	CONTROL, r5
	__WRITE_FLAG_APP_TO_BL_ADDR(TRUE);
 8008e14:	2201      	movs	r2, #1
 8008e16:	2103      	movs	r1, #3
 8008e18:	4806      	ldr	r0, [pc, #24]	; (8008e34 <__vJumpToBootloader+0x5c>)
 8008e1a:	f001 fda9 	bl	800a970 <HAL_RTCEx_BKUPWrite>
	HAL_RCC_DeInit();
 8008e1e:	f000 ff05 	bl	8009c2c <HAL_RCC_DeInit>
	HAL_NVIC_SystemReset();
 8008e22:	f000 fd39 	bl	8009898 <HAL_NVIC_SystemReset>
}
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	e000e180 	.word	0xe000e180
 8008e2c:	e000ed00 	.word	0xe000ed00
 8008e30:	e000e280 	.word	0xe000e280
 8008e34:	20000068 	.word	0x20000068

08008e38 <uss_trigger>:
                    	} while(0)

#define USS_TRIGGER_PORT    (USS_TRIGGER_GPIO_Port)
#define USS_TRIGGER_PIN     (USS_TRIGGER_Pin)

static void uss_trigger(void) {
 8008e38:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(USS_TRIGGER_PORT, USS_TRIGGER_PIN, GPIO_PIN_RESET);
 8008e3a:	4c10      	ldr	r4, [pc, #64]	; (8008e7c <uss_trigger+0x44>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 fed0 	bl	8009be8 <HAL_GPIO_WritePin>
    DELAY_US(10);
 8008e48:	200a      	movs	r0, #10
 8008e4a:	f7ff ffb9 	bl	8008dc0 <delay_us>
    HAL_GPIO_WritePin(USS_TRIGGER_PORT, USS_TRIGGER_PIN, GPIO_PIN_SET);
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e54:	4620      	mov	r0, r4
 8008e56:	f000 fec7 	bl	8009be8 <HAL_GPIO_WritePin>
    DELAY_US(10);
 8008e5a:	200a      	movs	r0, #10
 8008e5c:	f7ff ffb0 	bl	8008dc0 <delay_us>
    HAL_GPIO_WritePin(USS_TRIGGER_PORT, USS_TRIGGER_PIN, GPIO_PIN_RESET);
 8008e60:	2200      	movs	r2, #0
 8008e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 febe 	bl	8009be8 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC3);
 8008e6c:	4b04      	ldr	r3, [pc, #16]	; (8008e80 <uss_trigger+0x48>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68d3      	ldr	r3, [r2, #12]
 8008e72:	f043 0308 	orr.w	r3, r3, #8
 8008e76:	60d3      	str	r3, [r2, #12]
}
 8008e78:	bd10      	pop	{r4, pc}
 8008e7a:	bf00      	nop
 8008e7c:	40010c00 	.word	0x40010c00
 8008e80:	2000008c 	.word	0x2000008c

08008e84 <ControlMotorFR>:
    __HAL_TIM_SET_COMPARE(&__TIM3_HANDLE, MOTOR_1_PIN_E, speed);
 8008e84:	4b01      	ldr	r3, [pc, #4]	; (8008e8c <ControlMotorFR+0x8>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6398      	str	r0, [r3, #56]	; 0x38
}
 8008e8a:	4770      	bx	lr
 8008e8c:	200000d4 	.word	0x200000d4

08008e90 <ControlMotorFL>:
    __HAL_TIM_SET_COMPARE(&__TIM3_HANDLE, MOTOR_2_PIN_E, speed);
 8008e90:	4b01      	ldr	r3, [pc, #4]	; (8008e98 <ControlMotorFL+0x8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6398      	str	r0, [r3, #56]	; 0x38
}
 8008e96:	4770      	bx	lr
 8008e98:	200000d4 	.word	0x200000d4

08008e9c <ControlMotorBR>:
    __HAL_TIM_SET_COMPARE(&__TIM3_HANDLE, MOTOR_3_PIN_E, speed);
 8008e9c:	4b01      	ldr	r3, [pc, #4]	; (8008ea4 <ControlMotorBR+0x8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6398      	str	r0, [r3, #56]	; 0x38
}
 8008ea2:	4770      	bx	lr
 8008ea4:	200000d4 	.word	0x200000d4

08008ea8 <ControlMotorBL>:
    __HAL_TIM_SET_COMPARE(&__TIM3_HANDLE, MOTOR_4_PIN_E, speed);
 8008ea8:	4b01      	ldr	r3, [pc, #4]	; (8008eb0 <ControlMotorBL+0x8>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6398      	str	r0, [r3, #56]	; 0x38
}
 8008eae:	4770      	bx	lr
 8008eb0:	200000d4 	.word	0x200000d4

08008eb4 <StopAllMotors>:
    __HAL_TIM_SET_COMPARE(&__TIM3_HANDLE, MOTOR_1_PIN_E, 0u);
 8008eb4:	4b03      	ldr	r3, [pc, #12]	; (8008ec4 <StopAllMotors+0x10>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&__TIM3_HANDLE, MOTOR_2_PIN_E, 0u);
 8008ebc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&__TIM3_HANDLE, MOTOR_3_PIN_E, 0u);
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&__TIM3_HANDLE, MOTOR_4_PIN_E, 0u);
 8008ec0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008ec2:	4770      	bx	lr
 8008ec4:	200000d4 	.word	0x200000d4

08008ec8 <ControlMotorSpeed>:
void ControlMotorSpeed(uint8 motor, uint8 speed) {
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4604      	mov	r4, r0
 8008ecc:	460d      	mov	r5, r1
    uint16 cvtd_speed = (uint16)(speed * 553.85f);
 8008ece:	4608      	mov	r0, r1
 8008ed0:	f7ff fdb2 	bl	8008a38 <__aeabi_i2f>
 8008ed4:	4919      	ldr	r1, [pc, #100]	; (8008f3c <ControlMotorSpeed+0x74>)
 8008ed6:	f7ff fa65 	bl	80083a4 <__aeabi_fmul>
 8008eda:	f7ff fe01 	bl	8008ae0 <__aeabi_f2uiz>
    if (speed >= 0 && speed <= 100) {
 8008ede:	2d64      	cmp	r5, #100	; 0x64
 8008ee0:	d829      	bhi.n	8008f36 <ControlMotorSpeed+0x6e>
 8008ee2:	b286      	uxth	r6, r0
        switch (motor) {
 8008ee4:	1e63      	subs	r3, r4, #1
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	d827      	bhi.n	8008f3a <ControlMotorSpeed+0x72>
 8008eea:	e8df f003 	tbb	[pc, r3]
 8008eee:	0703      	.short	0x0703
 8008ef0:	0f0b      	.short	0x0f0b
 8008ef2:	13          	.byte	0x13
 8008ef3:	00          	.byte	0x00
                    ControlMotorFR(cvtd_speed);
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f7ff ffc5 	bl	8008e84 <ControlMotorFR>
                break;
 8008efa:	e01e      	b.n	8008f3a <ControlMotorSpeed+0x72>
                    ControlMotorFL(cvtd_speed);
 8008efc:	4630      	mov	r0, r6
 8008efe:	f7ff ffc7 	bl	8008e90 <ControlMotorFL>
                break;
 8008f02:	e01a      	b.n	8008f3a <ControlMotorSpeed+0x72>
                    ControlMotorBR(cvtd_speed);
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7ff ffc9 	bl	8008e9c <ControlMotorBR>
                break;
 8008f0a:	e016      	b.n	8008f3a <ControlMotorSpeed+0x72>
                    ControlMotorBL(cvtd_speed);
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7ff ffcb 	bl	8008ea8 <ControlMotorBL>
                break;
 8008f12:	e012      	b.n	8008f3a <ControlMotorSpeed+0x72>
            		if( (0u == speed) ) {
 8008f14:	b915      	cbnz	r5, 8008f1c <ControlMotorSpeed+0x54>
            			StopAllMotors();
 8008f16:	f7ff ffcd 	bl	8008eb4 <StopAllMotors>
 8008f1a:	e00e      	b.n	8008f3a <ControlMotorSpeed+0x72>
                        ControlMotorFR(cvtd_speed);
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	f7ff ffb1 	bl	8008e84 <ControlMotorFR>
                        ControlMotorFL(cvtd_speed);
 8008f22:	4630      	mov	r0, r6
 8008f24:	f7ff ffb4 	bl	8008e90 <ControlMotorFL>
                        ControlMotorBR(cvtd_speed);
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f7ff ffb7 	bl	8008e9c <ControlMotorBR>
                        ControlMotorBL(cvtd_speed);
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f7ff ffba 	bl	8008ea8 <ControlMotorBL>
 8008f34:	e001      	b.n	8008f3a <ControlMotorSpeed+0x72>
        StopAllMotors();
 8008f36:	f7ff ffbd 	bl	8008eb4 <StopAllMotors>
}
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	440a7666 	.word	0x440a7666

08008f40 <BuzzerUUUUUH>:
void BuzzerUUUUUH(void) {
 8008f40:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8008f42:	2201      	movs	r2, #1
 8008f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f48:	4801      	ldr	r0, [pc, #4]	; (8008f50 <BuzzerUUUUUH+0x10>)
 8008f4a:	f000 fe4d 	bl	8009be8 <HAL_GPIO_WritePin>
}
 8008f4e:	bd08      	pop	{r3, pc}
 8008f50:	40010800 	.word	0x40010800

08008f54 <BuzzerNO>:
void BuzzerNO(void) {
 8008f54:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8008f56:	2200      	movs	r2, #0
 8008f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f5c:	4801      	ldr	r0, [pc, #4]	; (8008f64 <BuzzerNO+0x10>)
 8008f5e:	f000 fe43 	bl	8009be8 <HAL_GPIO_WritePin>
}
 8008f62:	bd08      	pop	{r3, pc}
 8008f64:	40010800 	.word	0x40010800

08008f68 <buzzer_init>:
    {2349, 200},
    {0, 100},
    {0, 500}
};

static void buzzer_init(RingtoneStep *ringtone, uint16 steps) {
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	4607      	mov	r7, r0
 8008f6c:	460e      	mov	r6, r1
	uint16 i = 0;
    for (i = 0; i < steps; i++) {
 8008f6e:	2500      	movs	r5, #0
 8008f70:	e009      	b.n	8008f86 <buzzer_init+0x1e>
        if (ringtone[i].tone == 0) {
        	DELAY_MS(25);
 8008f72:	2019      	movs	r0, #25
 8008f74:	f7ff ff24 	bl	8008dc0 <delay_us>
 8008f78:	3401      	adds	r4, #1
 8008f7a:	b2a4      	uxth	r4, r4
 8008f7c:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8008f80:	d3f7      	bcc.n	8008f72 <buzzer_init+0xa>
    for (i = 0; i < steps; i++) {
 8008f82:	3501      	adds	r5, #1
 8008f84:	b2ad      	uxth	r5, r5
 8008f86:	42b5      	cmp	r5, r6
 8008f88:	d212      	bcs.n	8008fb0 <buzzer_init+0x48>
        if (ringtone[i].tone == 0) {
 8008f8a:	f837 4025 	ldrh.w	r4, [r7, r5, lsl #2]
 8008f8e:	2c00      	cmp	r4, #0
 8008f90:	d0f4      	beq.n	8008f7c <buzzer_init+0x14>
        } else {
            BuzzerUUUUUH();
 8008f92:	f7ff ffd5 	bl	8008f40 <BuzzerUUUUUH>
            DELAY_MS(50);
 8008f96:	2400      	movs	r4, #0
 8008f98:	e004      	b.n	8008fa4 <buzzer_init+0x3c>
 8008f9a:	2032      	movs	r0, #50	; 0x32
 8008f9c:	f7ff ff10 	bl	8008dc0 <delay_us>
 8008fa0:	3401      	adds	r4, #1
 8008fa2:	b2a4      	uxth	r4, r4
 8008fa4:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8008fa8:	d3f7      	bcc.n	8008f9a <buzzer_init+0x32>
            BuzzerNO();
 8008faa:	f7ff ffd3 	bl	8008f54 <BuzzerNO>
 8008fae:	e7e8      	b.n	8008f82 <buzzer_init+0x1a>
        }
    }
}
 8008fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fb4 <ControlLedFR>:
	__HAL_TIM_SET_COMPARE(&__TIM3_HANDLE, LED_FR_PIN, intensity);
 8008fb4:	4b01      	ldr	r3, [pc, #4]	; (8008fbc <ControlLedFR+0x8>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8008fba:	4770      	bx	lr
 8008fbc:	200000d4 	.word	0x200000d4

08008fc0 <ControlLedFL>:
	__HAL_TIM_SET_COMPARE(&__TIM3_HANDLE, LED_FL_PIN, intensity);
 8008fc0:	4b01      	ldr	r3, [pc, #4]	; (8008fc8 <ControlLedFL+0x8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8008fc6:	4770      	bx	lr
 8008fc8:	200000d4 	.word	0x200000d4

08008fcc <ControlFrontLeds>:
	if( ((intensity >= 0) && (intensity <= 100)) ) {
 8008fcc:	2964      	cmp	r1, #100	; 0x64
 8008fce:	d81f      	bhi.n	8009010 <ControlFrontLeds+0x44>
void ControlFrontLeds(uint8 led, uint8 intensity) {
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	4608      	mov	r0, r1
		uint16 cvtd_intensity = (uint16)(intensity * 553.85f);
 8008fd6:	f7ff fd2f 	bl	8008a38 <__aeabi_i2f>
 8008fda:	490e      	ldr	r1, [pc, #56]	; (8009014 <ControlFrontLeds+0x48>)
 8008fdc:	f7ff f9e2 	bl	80083a4 <__aeabi_fmul>
 8008fe0:	f7ff fd7e 	bl	8008ae0 <__aeabi_f2uiz>
 8008fe4:	b285      	uxth	r5, r0
		switch(led) {
 8008fe6:	2c01      	cmp	r4, #1
 8008fe8:	d007      	beq.n	8008ffa <ControlFrontLeds+0x2e>
 8008fea:	2c02      	cmp	r4, #2
 8008fec:	d009      	beq.n	8009002 <ControlFrontLeds+0x36>
 8008fee:	b104      	cbz	r4, 8008ff2 <ControlFrontLeds+0x26>
}
 8008ff0:	bd38      	pop	{r3, r4, r5, pc}
			case LED_FR : ControlLedFR(cvtd_intensity); break;
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f7ff ffde 	bl	8008fb4 <ControlLedFR>
 8008ff8:	e7fa      	b.n	8008ff0 <ControlFrontLeds+0x24>
			case LED_FL : ControlLedFL(cvtd_intensity); break;
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f7ff ffe0 	bl	8008fc0 <ControlLedFL>
 8009000:	e7f6      	b.n	8008ff0 <ControlFrontLeds+0x24>
				ControlLedFR(cvtd_intensity);
 8009002:	4628      	mov	r0, r5
 8009004:	f7ff ffd6 	bl	8008fb4 <ControlLedFR>
				ControlLedFL(cvtd_intensity);
 8009008:	4628      	mov	r0, r5
 800900a:	f7ff ffd9 	bl	8008fc0 <ControlLedFL>
}
 800900e:	e7ef      	b.n	8008ff0 <ControlFrontLeds+0x24>
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	440a7666 	.word	0x440a7666

08009018 <HAL_TIM_IC_CaptureCallback>:
    if (htim == &htim2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8009018:	4b2d      	ldr	r3, [pc, #180]	; (80090d0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800901a:	4298      	cmp	r0, r3
 800901c:	d000      	beq.n	8009020 <HAL_TIM_IC_CaptureCallback+0x8>
 800901e:	4770      	bx	lr
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8009020:	b510      	push	{r4, lr}
 8009022:	4604      	mov	r4, r0
    if (htim == &htim2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8009024:	7f03      	ldrb	r3, [r0, #28]
 8009026:	2b04      	cmp	r3, #4
 8009028:	d000      	beq.n	800902c <HAL_TIM_IC_CaptureCallback+0x14>
}
 800902a:	bd10      	pop	{r4, pc}
        if (!IsFirstCaptured) {
 800902c:	4b29      	ldr	r3, [pc, #164]	; (80090d4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	b993      	cbnz	r3, 8009058 <HAL_TIM_IC_CaptureCallback+0x40>
            IcuCapturedVal1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8009032:	2108      	movs	r1, #8
 8009034:	f001 fdd5 	bl	800abe2 <HAL_TIM_ReadCapturedValue>
 8009038:	4b27      	ldr	r3, [pc, #156]	; (80090d8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800903a:	6018      	str	r0, [r3, #0]
            IsFirstCaptured = TRUE;
 800903c:	4b25      	ldr	r3, [pc, #148]	; (80090d4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800903e:	2201      	movs	r2, #1
 8009040:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8009042:	6822      	ldr	r2, [r4, #0]
 8009044:	6a13      	ldr	r3, [r2, #32]
 8009046:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800904a:	6213      	str	r3, [r2, #32]
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	6a13      	ldr	r3, [r2, #32]
 8009050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009054:	6213      	str	r3, [r2, #32]
 8009056:	e7e8      	b.n	800902a <HAL_TIM_IC_CaptureCallback+0x12>
            IcuCapturedVal2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8009058:	2108      	movs	r1, #8
 800905a:	f001 fdc2 	bl	800abe2 <HAL_TIM_ReadCapturedValue>
 800905e:	4b1f      	ldr	r3, [pc, #124]	; (80090dc <HAL_TIM_IC_CaptureCallback+0xc4>)
 8009060:	6018      	str	r0, [r3, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	2200      	movs	r2, #0
 8009066:	625a      	str	r2, [r3, #36]	; 0x24
            if (IcuCapturedVal2 > IcuCapturedVal1) {
 8009068:	4b1b      	ldr	r3, [pc, #108]	; (80090d8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4298      	cmp	r0, r3
 800906e:	d922      	bls.n	80090b6 <HAL_TIM_IC_CaptureCallback+0x9e>
                Diff = (IcuCapturedVal2 - IcuCapturedVal1);
 8009070:	1ac0      	subs	r0, r0, r3
 8009072:	4b1b      	ldr	r3, [pc, #108]	; (80090e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8009074:	6018      	str	r0, [r3, #0]
            g_UssDistance = (uint8_t)(0.017 * Diff) + 1U;
 8009076:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	f7ff fb89 	bl	8008790 <__aeabi_ui2d>
 800907e:	a312      	add	r3, pc, #72	; (adr r3, 80090c8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	f7ff f864 	bl	8008150 <__aeabi_dmul>
 8009088:	f7ff fbfc 	bl	8008884 <__aeabi_d2uiz>
 800908c:	b2c3      	uxtb	r3, r0
 800908e:	3301      	adds	r3, #1
 8009090:	4a14      	ldr	r2, [pc, #80]	; (80090e4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8009092:	7013      	strb	r3, [r2, #0]
            IsFirstCaptured = FALSE;
 8009094:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8009096:	2200      	movs	r2, #0
 8009098:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 800909a:	6822      	ldr	r2, [r4, #0]
 800909c:	6a13      	ldr	r3, [r2, #32]
 800909e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090a2:	6213      	str	r3, [r2, #32]
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	6a1a      	ldr	r2, [r3, #32]
 80090a8:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80090aa:	6822      	ldr	r2, [r4, #0]
 80090ac:	68d3      	ldr	r3, [r2, #12]
 80090ae:	f023 0308 	bic.w	r3, r3, #8
 80090b2:	60d3      	str	r3, [r2, #12]
}
 80090b4:	e7b9      	b.n	800902a <HAL_TIM_IC_CaptureCallback+0x12>
            } else if (IcuCapturedVal2 < IcuCapturedVal1) {
 80090b6:	4298      	cmp	r0, r3
 80090b8:	d2dd      	bcs.n	8009076 <HAL_TIM_IC_CaptureCallback+0x5e>
                Diff = (0xFFFFU - IcuCapturedVal1) + IcuCapturedVal2 + 1; // Add 1 to account for timer overflow
 80090ba:	1ac3      	subs	r3, r0, r3
 80090bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80090c0:	4a07      	ldr	r2, [pc, #28]	; (80090e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	e7d7      	b.n	8009076 <HAL_TIM_IC_CaptureCallback+0x5e>
 80090c6:	bf00      	nop
 80090c8:	b020c49c 	.word	0xb020c49c
 80090cc:	3f916872 	.word	0x3f916872
 80090d0:	2000008c 	.word	0x2000008c
 80090d4:	20000088 	.word	0x20000088
 80090d8:	20000080 	.word	0x20000080
 80090dc:	20000084 	.word	0x20000084
 80090e0:	2000007c 	.word	0x2000007c
 80090e4:	20000001 	.word	0x20000001

080090e8 <GetUltraSonicDistance>:
uint8 GetUltraSonicDistance(void) {
 80090e8:	b508      	push	{r3, lr}
    uss_trigger();
 80090ea:	f7ff fea5 	bl	8008e38 <uss_trigger>
}
 80090ee:	4b01      	ldr	r3, [pc, #4]	; (80090f4 <GetUltraSonicDistance+0xc>)
 80090f0:	7818      	ldrb	r0, [r3, #0]
 80090f2:	bd08      	pop	{r3, pc}
 80090f4:	20000001 	.word	0x20000001

080090f8 <buzzerngy>:
void buzzerngy(uint8_t distance) {
 80090f8:	b510      	push	{r4, lr}
    if(distance <= (USS_THRESHOLD_DISTANCE_CM + 10u)) delay = 10;
 80090fa:	2819      	cmp	r0, #25
 80090fc:	d80f      	bhi.n	800911e <buzzerngy+0x26>
 80090fe:	4b1e      	ldr	r3, [pc, #120]	; (8009178 <buzzerngy+0x80>)
 8009100:	220a      	movs	r2, #10
 8009102:	701a      	strb	r2, [r3, #0]
	if (distance <= (USS_THRESHOLD_DISTANCE_CM + 10u)) {
 8009104:	2819      	cmp	r0, #25
 8009106:	d834      	bhi.n	8009172 <buzzerngy+0x7a>
        BuzzerUUUUUH();
 8009108:	f7ff ff1a 	bl	8008f40 <BuzzerUUUUUH>
        DELAY_MS(delay);
 800910c:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <buzzerngy+0x80>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	bb6b      	cbnz	r3, 800916e <buzzerngy+0x76>
        (0 != delay) ? BuzzerNO() : 0;
 8009112:	4b19      	ldr	r3, [pc, #100]	; (8009178 <buzzerngy+0x80>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	b373      	cbz	r3, 8009176 <buzzerngy+0x7e>
 8009118:	f7ff ff1c 	bl	8008f54 <BuzzerNO>
 800911c:	e02b      	b.n	8009176 <buzzerngy+0x7e>
    else if(distance <= (USS_THRESHOLD_DISTANCE_CM + 8u))  delay = 8;
 800911e:	2817      	cmp	r0, #23
 8009120:	d803      	bhi.n	800912a <buzzerngy+0x32>
 8009122:	4b15      	ldr	r3, [pc, #84]	; (8009178 <buzzerngy+0x80>)
 8009124:	2208      	movs	r2, #8
 8009126:	701a      	strb	r2, [r3, #0]
 8009128:	e7ec      	b.n	8009104 <buzzerngy+0xc>
    else if(distance <= (USS_THRESHOLD_DISTANCE_CM + 6u))  delay = 6;
 800912a:	2815      	cmp	r0, #21
 800912c:	d803      	bhi.n	8009136 <buzzerngy+0x3e>
 800912e:	4b12      	ldr	r3, [pc, #72]	; (8009178 <buzzerngy+0x80>)
 8009130:	2206      	movs	r2, #6
 8009132:	701a      	strb	r2, [r3, #0]
 8009134:	e7e6      	b.n	8009104 <buzzerngy+0xc>
    else if(distance <= (USS_THRESHOLD_DISTANCE_CM + 4u))  delay = 4;
 8009136:	2813      	cmp	r0, #19
 8009138:	d803      	bhi.n	8009142 <buzzerngy+0x4a>
 800913a:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <buzzerngy+0x80>)
 800913c:	2204      	movs	r2, #4
 800913e:	701a      	strb	r2, [r3, #0]
 8009140:	e7e0      	b.n	8009104 <buzzerngy+0xc>
    else if(distance <= (USS_THRESHOLD_DISTANCE_CM + 2u))  delay = 2;
 8009142:	2811      	cmp	r0, #17
 8009144:	d803      	bhi.n	800914e <buzzerngy+0x56>
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <buzzerngy+0x80>)
 8009148:	2202      	movs	r2, #2
 800914a:	701a      	strb	r2, [r3, #0]
 800914c:	e7da      	b.n	8009104 <buzzerngy+0xc>
    else if(distance <= (USS_THRESHOLD_DISTANCE_CM - 1u))  delay = 0;
 800914e:	280e      	cmp	r0, #14
 8009150:	d8d8      	bhi.n	8009104 <buzzerngy+0xc>
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <buzzerngy+0x80>)
 8009154:	2200      	movs	r2, #0
 8009156:	701a      	strb	r2, [r3, #0]
 8009158:	e7d4      	b.n	8009104 <buzzerngy+0xc>
        DELAY_MS(delay);
 800915a:	4b07      	ldr	r3, [pc, #28]	; (8009178 <buzzerngy+0x80>)
 800915c:	7818      	ldrb	r0, [r3, #0]
 800915e:	f7ff fe2f 	bl	8008dc0 <delay_us>
 8009162:	3401      	adds	r4, #1
 8009164:	b2a4      	uxth	r4, r4
 8009166:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800916a:	d3f6      	bcc.n	800915a <buzzerngy+0x62>
 800916c:	e7d1      	b.n	8009112 <buzzerngy+0x1a>
 800916e:	2400      	movs	r4, #0
 8009170:	e7f9      	b.n	8009166 <buzzerngy+0x6e>
        BuzzerNO();
 8009172:	f7ff feef 	bl	8008f54 <BuzzerNO>
}
 8009176:	bd10      	pop	{r4, pc}
 8009178:	20000000 	.word	0x20000000

0800917c <CheckIfDistanceInValidRange>:
boolean CheckIfDistanceInValidRange(uint8 distance) {
 800917c:	b538      	push	{r3, r4, r5, lr}
    if( (TRUE == uss_work_flag) ) {
 800917e:	4b0b      	ldr	r3, [pc, #44]	; (80091ac <CheckIfDistanceInValidRange+0x30>)
 8009180:	781c      	ldrb	r4, [r3, #0]
 8009182:	2c01      	cmp	r4, #1
 8009184:	d001      	beq.n	800918a <CheckIfDistanceInValidRange+0xe>
}
 8009186:	4620      	mov	r0, r4
 8009188:	bd38      	pop	{r3, r4, r5, pc}
 800918a:	4605      	mov	r5, r0
		if (distance >= 0 && distance <= USS_THRESHOLD_DISTANCE_CM) {
 800918c:	280f      	cmp	r0, #15
 800918e:	d80a      	bhi.n	80091a6 <CheckIfDistanceInValidRange+0x2a>
			buzzerngy(distance);
 8009190:	f7ff ffb2 	bl	80090f8 <buzzerngy>
			if (distance <= (uint8)((USS_THRESHOLD_DISTANCE_CM * 0.50f) + 1u) && !motors_are_stopped) {
 8009194:	2d08      	cmp	r5, #8
 8009196:	d901      	bls.n	800919c <CheckIfDistanceInValidRange+0x20>
			return FALSE;
 8009198:	2400      	movs	r4, #0
 800919a:	e7f4      	b.n	8009186 <CheckIfDistanceInValidRange+0xa>
				ControlMotorSpeed(MOTOR_ALL, 0u);
 800919c:	2100      	movs	r1, #0
 800919e:	2005      	movs	r0, #5
 80091a0:	f7ff fe92 	bl	8008ec8 <ControlMotorSpeed>
				motors_are_stopped = TRUE;
 80091a4:	e7f8      	b.n	8009198 <CheckIfDistanceInValidRange+0x1c>
			BuzzerNO();
 80091a6:	f7ff fed5 	bl	8008f54 <BuzzerNO>
			return TRUE;
 80091aa:	e7ec      	b.n	8009186 <CheckIfDistanceInValidRange+0xa>
 80091ac:	2000008a 	.word	0x2000008a

080091b0 <vehicle_init>:
	ControlMotorSpeed(MOTOR_ALL, 10);
	DELAY_MS(30);
	ControlMotorSpeed(MOTOR_ALL, 0);
}

void vehicle_init(void) {
 80091b0:	b508      	push	{r3, lr}
	SEND_LOG("\n Starting Application with VTOR: 0x%x", SCB->VTOR);
	__WRITE_FLAG_APP_TO_BL_ADDR(FALSE);
 80091b2:	2200      	movs	r2, #0
 80091b4:	2103      	movs	r1, #3
 80091b6:	4806      	ldr	r0, [pc, #24]	; (80091d0 <vehicle_init+0x20>)
 80091b8:	f001 fbda 	bl	800a970 <HAL_RTCEx_BKUPWrite>
	/* Init front leds */
//	front_leds_init();
	/* Init buzzer */
	buzzer_init(nokiaRingtone, sizeof(nokiaRingtone) / sizeof(nokiaRingtone[0]));
 80091bc:	210f      	movs	r1, #15
 80091be:	4805      	ldr	r0, [pc, #20]	; (80091d4 <vehicle_init+0x24>)
 80091c0:	f7ff fed2 	bl	8008f68 <buzzer_init>
//	motors_init();

//	ControlFrontLeds(LED_ALL, FRONT_LEDS_INTENSITY);
//	ControlMotorSpeed(MOTOR_ALL, MOTORS_SPEED);

	HAL_UART_Receive_IT(&huart1, &rx_data, 1u);
 80091c4:	2201      	movs	r2, #1
 80091c6:	4904      	ldr	r1, [pc, #16]	; (80091d8 <vehicle_init+0x28>)
 80091c8:	4804      	ldr	r0, [pc, #16]	; (80091dc <vehicle_init+0x2c>)
 80091ca:	f002 fc7e 	bl	800baca <HAL_UART_Receive_IT>
}
 80091ce:	bd08      	pop	{r3, pc}
 80091d0:	20000068 	.word	0x20000068
 80091d4:	20000004 	.word	0x20000004
 80091d8:	20000089 	.word	0x20000089
 80091dc:	20000164 	.word	0x20000164

080091e0 <start_gp_procedure>:

void start_gp_procedure(void) {
 80091e0:	b508      	push	{r3, lr}
	uss_work_flag = TRUE;
 80091e2:	4b06      	ldr	r3, [pc, #24]	; (80091fc <start_gp_procedure+0x1c>)
 80091e4:	2201      	movs	r2, #1
 80091e6:	701a      	strb	r2, [r3, #0]
	ControlMotorSpeed(MOTOR_ALL, MOTORS_SPEED);
 80091e8:	213c      	movs	r1, #60	; 0x3c
 80091ea:	2005      	movs	r0, #5
 80091ec:	f7ff fe6c 	bl	8008ec8 <ControlMotorSpeed>
	ControlFrontLeds(LED_ALL, FRONT_LEDS_INTENSITY);
 80091f0:	2150      	movs	r1, #80	; 0x50
 80091f2:	2002      	movs	r0, #2
 80091f4:	f7ff feea 	bl	8008fcc <ControlFrontLeds>
}
 80091f8:	bd08      	pop	{r3, pc}
 80091fa:	bf00      	nop
 80091fc:	2000008a 	.word	0x2000008a

08009200 <stop_gp_procedure>:

void stop_gp_procedure(void) {
 8009200:	b510      	push	{r4, lr}
	uss_work_flag = FALSE;
 8009202:	2400      	movs	r4, #0
 8009204:	4b05      	ldr	r3, [pc, #20]	; (800921c <stop_gp_procedure+0x1c>)
 8009206:	701c      	strb	r4, [r3, #0]
	ControlMotorSpeed(MOTOR_ALL, 0);
 8009208:	4621      	mov	r1, r4
 800920a:	2005      	movs	r0, #5
 800920c:	f7ff fe5c 	bl	8008ec8 <ControlMotorSpeed>
	ControlFrontLeds(LED_ALL, 0);
 8009210:	4621      	mov	r1, r4
 8009212:	2002      	movs	r0, #2
 8009214:	f7ff feda 	bl	8008fcc <ControlFrontLeds>
}
 8009218:	bd10      	pop	{r4, pc}
 800921a:	bf00      	nop
 800921c:	2000008a 	.word	0x2000008a

08009220 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8009220:	b508      	push	{r3, lr}
	if( (&huart1 == huart) ) {
 8009222:	4b0d      	ldr	r3, [pc, #52]	; (8009258 <HAL_UART_RxCpltCallback+0x38>)
 8009224:	4283      	cmp	r3, r0
 8009226:	d000      	beq.n	800922a <HAL_UART_RxCpltCallback+0xa>
}
 8009228:	bd08      	pop	{r3, pc}
		switch(rx_data) {
 800922a:	4b0c      	ldr	r3, [pc, #48]	; (800925c <HAL_UART_RxCpltCallback+0x3c>)
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b53      	cmp	r3, #83	; 0x53
 8009230:	d00f      	beq.n	8009252 <HAL_UART_RxCpltCallback+0x32>
 8009232:	2b73      	cmp	r3, #115	; 0x73
 8009234:	d00a      	beq.n	800924c <HAL_UART_RxCpltCallback+0x2c>
 8009236:	2b23      	cmp	r3, #35	; 0x23
 8009238:	d005      	beq.n	8009246 <HAL_UART_RxCpltCallback+0x26>
		HAL_UART_Receive_IT(&huart1, &rx_data, 1u);
 800923a:	2201      	movs	r2, #1
 800923c:	4907      	ldr	r1, [pc, #28]	; (800925c <HAL_UART_RxCpltCallback+0x3c>)
 800923e:	4806      	ldr	r0, [pc, #24]	; (8009258 <HAL_UART_RxCpltCallback+0x38>)
 8009240:	f002 fc43 	bl	800baca <HAL_UART_Receive_IT>
}
 8009244:	e7f0      	b.n	8009228 <HAL_UART_RxCpltCallback+0x8>
			case '#': __vJumpToBootloader(); break;
 8009246:	f7ff fdc7 	bl	8008dd8 <__vJumpToBootloader>
 800924a:	e7f6      	b.n	800923a <HAL_UART_RxCpltCallback+0x1a>
			case 's': start_gp_procedure();  break;
 800924c:	f7ff ffc8 	bl	80091e0 <start_gp_procedure>
 8009250:	e7f3      	b.n	800923a <HAL_UART_RxCpltCallback+0x1a>
			case 'S': stop_gp_procedure();   break;
 8009252:	f7ff ffd5 	bl	8009200 <stop_gp_procedure>
 8009256:	e7f0      	b.n	800923a <HAL_UART_RxCpltCallback+0x1a>
 8009258:	20000164 	.word	0x20000164
 800925c:	20000089 	.word	0x20000089

08009260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009260:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009262:	4b0a      	ldr	r3, [pc, #40]	; (800928c <HAL_MspInit+0x2c>)
 8009264:	699a      	ldr	r2, [r3, #24]
 8009266:	f042 0201 	orr.w	r2, r2, #1
 800926a:	619a      	str	r2, [r3, #24]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	f002 0201 	and.w	r2, r2, #1
 8009272:	9200      	str	r2, [sp, #0]
 8009274:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009276:	69da      	ldr	r2, [r3, #28]
 8009278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800927c:	61da      	str	r2, [r3, #28]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009288:	b002      	add	sp, #8
 800928a:	4770      	bx	lr
 800928c:	40021000 	.word	0x40021000

08009290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009290:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8009292:	f001 f85b 	bl	800a34c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009296:	e7fe      	b.n	8009296 <NMI_Handler+0x6>

08009298 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009298:	e7fe      	b.n	8009298 <HardFault_Handler>

0800929a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800929a:	e7fe      	b.n	800929a <MemManage_Handler>

0800929c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800929c:	e7fe      	b.n	800929c <BusFault_Handler>

0800929e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800929e:	e7fe      	b.n	800929e <UsageFault_Handler>

080092a0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80092a0:	4770      	bx	lr

080092a2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80092a2:	4770      	bx	lr

080092a4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80092a4:	4770      	bx	lr

080092a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80092a6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80092a8:	f000 fa8c 	bl	80097c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80092ac:	bd08      	pop	{r3, pc}
	...

080092b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80092b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80092b2:	4802      	ldr	r0, [pc, #8]	; (80092bc <TIM2_IRQHandler+0xc>)
 80092b4:	f001 fcb2 	bl	800ac1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80092b8:	bd08      	pop	{r3, pc}
 80092ba:	bf00      	nop
 80092bc:	2000008c 	.word	0x2000008c

080092c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80092c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80092c2:	4802      	ldr	r0, [pc, #8]	; (80092cc <USART1_IRQHandler+0xc>)
 80092c4:	f002 faa2 	bl	800b80c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80092c8:	bd08      	pop	{r3, pc}
 80092ca:	bf00      	nop
 80092cc:	20000164 	.word	0x20000164

080092d0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80092d0:	4770      	bx	lr
	...

080092d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80092d4:	b500      	push	{lr}
 80092d6:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80092d8:	2300      	movs	r3, #0
 80092da:	9304      	str	r3, [sp, #16]
 80092dc:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	9302      	str	r3, [sp, #8]
 80092e4:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80092e6:	4817      	ldr	r0, [pc, #92]	; (8009344 <MX_TIM2_Init+0x70>)
 80092e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80092ec:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 72-1;
 80092ee:	2247      	movs	r2, #71	; 0x47
 80092f0:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092f2:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0xFFFF-1;
 80092f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80092f8:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092fa:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092fc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80092fe:	f001 fddd 	bl	800aebc <HAL_TIM_IC_Init>
 8009302:	b9b0      	cbnz	r0, 8009332 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009304:	2300      	movs	r3, #0
 8009306:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009308:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800930a:	a904      	add	r1, sp, #16
 800930c:	480d      	ldr	r0, [pc, #52]	; (8009344 <MX_TIM2_Init+0x70>)
 800930e:	f002 f8e1 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 8009312:	b988      	cbnz	r0, 8009338 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009314:	2300      	movs	r3, #0
 8009316:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009318:	2201      	movs	r2, #1
 800931a:	9201      	str	r2, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800931c:	9302      	str	r3, [sp, #8]
  sConfigIC.ICFilter = 0;
 800931e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8009320:	2208      	movs	r2, #8
 8009322:	4669      	mov	r1, sp
 8009324:	4807      	ldr	r0, [pc, #28]	; (8009344 <MX_TIM2_Init+0x70>)
 8009326:	f001 fec1 	bl	800b0ac <HAL_TIM_IC_ConfigChannel>
 800932a:	b940      	cbnz	r0, 800933e <MX_TIM2_Init+0x6a>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800932c:	b007      	add	sp, #28
 800932e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8009332:	f7ff fc6d 	bl	8008c10 <Error_Handler>
 8009336:	e7e5      	b.n	8009304 <MX_TIM2_Init+0x30>
    Error_Handler();
 8009338:	f7ff fc6a 	bl	8008c10 <Error_Handler>
 800933c:	e7ea      	b.n	8009314 <MX_TIM2_Init+0x40>
    Error_Handler();
 800933e:	f7ff fc67 	bl	8008c10 <Error_Handler>
}
 8009342:	e7f3      	b.n	800932c <MX_TIM2_Init+0x58>
 8009344:	2000008c 	.word	0x2000008c

08009348 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009348:	b500      	push	{lr}
 800934a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800934c:	2300      	movs	r3, #0
 800934e:	9302      	str	r3, [sp, #8]
 8009350:	9303      	str	r3, [sp, #12]
 8009352:	9304      	str	r3, [sp, #16]
 8009354:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800935a:	4815      	ldr	r0, [pc, #84]	; (80093b0 <MX_TIM4_Init+0x68>)
 800935c:	4a15      	ldr	r2, [pc, #84]	; (80093b4 <MX_TIM4_Init+0x6c>)
 800935e:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 71;
 8009360:	2247      	movs	r2, #71	; 0x47
 8009362:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009364:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0xFFFF-1;
 8009366:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800936a:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800936c:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800936e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009370:	f001 fd4c 	bl	800ae0c <HAL_TIM_Base_Init>
 8009374:	b990      	cbnz	r0, 800939c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800937a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800937c:	a902      	add	r1, sp, #8
 800937e:	480c      	ldr	r0, [pc, #48]	; (80093b0 <MX_TIM4_Init+0x68>)
 8009380:	f001 ff02 	bl	800b188 <HAL_TIM_ConfigClockSource>
 8009384:	b968      	cbnz	r0, 80093a2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009386:	2300      	movs	r3, #0
 8009388:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800938a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800938c:	4669      	mov	r1, sp
 800938e:	4808      	ldr	r0, [pc, #32]	; (80093b0 <MX_TIM4_Init+0x68>)
 8009390:	f002 f8a0 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 8009394:	b940      	cbnz	r0, 80093a8 <MX_TIM4_Init+0x60>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009396:	b007      	add	sp, #28
 8009398:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800939c:	f7ff fc38 	bl	8008c10 <Error_Handler>
 80093a0:	e7e9      	b.n	8009376 <MX_TIM4_Init+0x2e>
    Error_Handler();
 80093a2:	f7ff fc35 	bl	8008c10 <Error_Handler>
 80093a6:	e7ee      	b.n	8009386 <MX_TIM4_Init+0x3e>
    Error_Handler();
 80093a8:	f7ff fc32 	bl	8008c10 <Error_Handler>
}
 80093ac:	e7f3      	b.n	8009396 <MX_TIM4_Init+0x4e>
 80093ae:	bf00      	nop
 80093b0:	2000011c 	.word	0x2000011c
 80093b4:	40000800 	.word	0x40000800

080093b8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80093b8:	b500      	push	{lr}
 80093ba:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093bc:	2300      	movs	r3, #0
 80093be:	9302      	str	r3, [sp, #8]
 80093c0:	9303      	str	r3, [sp, #12]
 80093c2:	9304      	str	r3, [sp, #16]
 80093c4:	9305      	str	r3, [sp, #20]
  if(tim_icHandle->Instance==TIM2)
 80093c6:	6803      	ldr	r3, [r0, #0]
 80093c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093cc:	d002      	beq.n	80093d4 <HAL_TIM_IC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80093ce:	b007      	add	sp, #28
 80093d0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80093d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80093d8:	69da      	ldr	r2, [r3, #28]
 80093da:	f042 0201 	orr.w	r2, r2, #1
 80093de:	61da      	str	r2, [r3, #28]
 80093e0:	69da      	ldr	r2, [r3, #28]
 80093e2:	f002 0201 	and.w	r2, r2, #1
 80093e6:	9200      	str	r2, [sp, #0]
 80093e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093ea:	699a      	ldr	r2, [r3, #24]
 80093ec:	f042 0208 	orr.w	r2, r2, #8
 80093f0:	619a      	str	r2, [r3, #24]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	f003 0308 	and.w	r3, r3, #8
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80093fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009400:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009402:	a902      	add	r1, sp, #8
 8009404:	480a      	ldr	r0, [pc, #40]	; (8009430 <HAL_TIM_IC_MspInit+0x78>)
 8009406:	f000 fadd 	bl	80099c4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800940a:	4a0a      	ldr	r2, [pc, #40]	; (8009434 <HAL_TIM_IC_MspInit+0x7c>)
 800940c:	6853      	ldr	r3, [r2, #4]
 800940e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009412:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8009416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800941a:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800941c:	2200      	movs	r2, #0
 800941e:	2102      	movs	r1, #2
 8009420:	201c      	movs	r0, #28
 8009422:	f000 f9f3 	bl	800980c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009426:	201c      	movs	r0, #28
 8009428:	f000 fa28 	bl	800987c <HAL_NVIC_EnableIRQ>
}
 800942c:	e7cf      	b.n	80093ce <HAL_TIM_IC_MspInit+0x16>
 800942e:	bf00      	nop
 8009430:	40010c00 	.word	0x40010c00
 8009434:	40010000 	.word	0x40010000

08009438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009438:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM3)
 800943a:	6803      	ldr	r3, [r0, #0]
 800943c:	4a0e      	ldr	r2, [pc, #56]	; (8009478 <HAL_TIM_Base_MspInit+0x40>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d004      	beq.n	800944c <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 8009442:	4a0e      	ldr	r2, [pc, #56]	; (800947c <HAL_TIM_Base_MspInit+0x44>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00c      	beq.n	8009462 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8009448:	b002      	add	sp, #8
 800944a:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 800944c:	4b0c      	ldr	r3, [pc, #48]	; (8009480 <HAL_TIM_Base_MspInit+0x48>)
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	f042 0202 	orr.w	r2, r2, #2
 8009454:	61da      	str	r2, [r3, #28]
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	9b00      	ldr	r3, [sp, #0]
 8009460:	e7f2      	b.n	8009448 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <HAL_TIM_Base_MspInit+0x48>)
 8009464:	69da      	ldr	r2, [r3, #28]
 8009466:	f042 0204 	orr.w	r2, r2, #4
 800946a:	61da      	str	r2, [r3, #28]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	9b01      	ldr	r3, [sp, #4]
}
 8009476:	e7e7      	b.n	8009448 <HAL_TIM_Base_MspInit+0x10>
 8009478:	40000400 	.word	0x40000400
 800947c:	40000800 	.word	0x40000800
 8009480:	40021000 	.word	0x40021000

08009484 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009484:	b510      	push	{r4, lr}
 8009486:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009488:	2300      	movs	r3, #0
 800948a:	9302      	str	r3, [sp, #8]
 800948c:	9303      	str	r3, [sp, #12]
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8009492:	6802      	ldr	r2, [r0, #0]
 8009494:	4b15      	ldr	r3, [pc, #84]	; (80094ec <HAL_TIM_MspPostInit+0x68>)
 8009496:	429a      	cmp	r2, r3
 8009498:	d001      	beq.n	800949e <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800949a:	b006      	add	sp, #24
 800949c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800949e:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80094a2:	699a      	ldr	r2, [r3, #24]
 80094a4:	f042 0204 	orr.w	r2, r2, #4
 80094a8:	619a      	str	r2, [r3, #24]
 80094aa:	699a      	ldr	r2, [r3, #24]
 80094ac:	f002 0204 	and.w	r2, r2, #4
 80094b0:	9200      	str	r2, [sp, #0]
 80094b2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094b4:	699a      	ldr	r2, [r3, #24]
 80094b6:	f042 0208 	orr.w	r2, r2, #8
 80094ba:	619a      	str	r2, [r3, #24]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	f003 0308 	and.w	r3, r3, #8
 80094c2:	9301      	str	r3, [sp, #4]
 80094c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80094c6:	2380      	movs	r3, #128	; 0x80
 80094c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ca:	2402      	movs	r4, #2
 80094cc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094ce:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094d0:	a902      	add	r1, sp, #8
 80094d2:	4807      	ldr	r0, [pc, #28]	; (80094f0 <HAL_TIM_MspPostInit+0x6c>)
 80094d4:	f000 fa76 	bl	80099c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80094d8:	2301      	movs	r3, #1
 80094da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094dc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094de:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094e0:	a902      	add	r1, sp, #8
 80094e2:	4804      	ldr	r0, [pc, #16]	; (80094f4 <HAL_TIM_MspPostInit+0x70>)
 80094e4:	f000 fa6e 	bl	80099c4 <HAL_GPIO_Init>
}
 80094e8:	e7d7      	b.n	800949a <HAL_TIM_MspPostInit+0x16>
 80094ea:	bf00      	nop
 80094ec:	40000400 	.word	0x40000400
 80094f0:	40010800 	.word	0x40010800
 80094f4:	40010c00 	.word	0x40010c00

080094f8 <MX_TIM3_Init>:
{
 80094f8:	b500      	push	{lr}
 80094fa:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80094fc:	2300      	movs	r3, #0
 80094fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009500:	930b      	str	r3, [sp, #44]	; 0x2c
 8009502:	930c      	str	r3, [sp, #48]	; 0x30
 8009504:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009506:	9308      	str	r3, [sp, #32]
 8009508:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	9302      	str	r3, [sp, #8]
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	9304      	str	r3, [sp, #16]
 8009512:	9305      	str	r3, [sp, #20]
 8009514:	9306      	str	r3, [sp, #24]
 8009516:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8009518:	4826      	ldr	r0, [pc, #152]	; (80095b4 <MX_TIM3_Init+0xbc>)
 800951a:	4a27      	ldr	r2, [pc, #156]	; (80095b8 <MX_TIM3_Init+0xc0>)
 800951c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 800951e:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009520:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 55385;
 8009522:	f64d 0259 	movw	r2, #55385	; 0xd859
 8009526:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009528:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800952a:	2380      	movs	r3, #128	; 0x80
 800952c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800952e:	f001 fc6d 	bl	800ae0c <HAL_TIM_Base_Init>
 8009532:	bb60      	cbnz	r0, 800958e <MX_TIM3_Init+0x96>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009538:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800953a:	a90a      	add	r1, sp, #40	; 0x28
 800953c:	481d      	ldr	r0, [pc, #116]	; (80095b4 <MX_TIM3_Init+0xbc>)
 800953e:	f001 fe23 	bl	800b188 <HAL_TIM_ConfigClockSource>
 8009542:	bb38      	cbnz	r0, 8009594 <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009544:	481b      	ldr	r0, [pc, #108]	; (80095b4 <MX_TIM3_Init+0xbc>)
 8009546:	f001 fc8d 	bl	800ae64 <HAL_TIM_PWM_Init>
 800954a:	bb30      	cbnz	r0, 800959a <MX_TIM3_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800954c:	2300      	movs	r3, #0
 800954e:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009550:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009552:	a908      	add	r1, sp, #32
 8009554:	4817      	ldr	r0, [pc, #92]	; (80095b4 <MX_TIM3_Init+0xbc>)
 8009556:	f001 ffbd 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 800955a:	bb08      	cbnz	r0, 80095a0 <MX_TIM3_Init+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800955c:	2360      	movs	r3, #96	; 0x60
 800955e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009564:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009566:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009568:	2204      	movs	r2, #4
 800956a:	eb0d 0102 	add.w	r1, sp, r2
 800956e:	4811      	ldr	r0, [pc, #68]	; (80095b4 <MX_TIM3_Init+0xbc>)
 8009570:	f001 fd02 	bl	800af78 <HAL_TIM_PWM_ConfigChannel>
 8009574:	b9b8      	cbnz	r0, 80095a6 <MX_TIM3_Init+0xae>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009576:	2208      	movs	r2, #8
 8009578:	a901      	add	r1, sp, #4
 800957a:	480e      	ldr	r0, [pc, #56]	; (80095b4 <MX_TIM3_Init+0xbc>)
 800957c:	f001 fcfc 	bl	800af78 <HAL_TIM_PWM_ConfigChannel>
 8009580:	b9a0      	cbnz	r0, 80095ac <MX_TIM3_Init+0xb4>
  HAL_TIM_MspPostInit(&htim3);
 8009582:	480c      	ldr	r0, [pc, #48]	; (80095b4 <MX_TIM3_Init+0xbc>)
 8009584:	f7ff ff7e 	bl	8009484 <HAL_TIM_MspPostInit>
}
 8009588:	b00f      	add	sp, #60	; 0x3c
 800958a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800958e:	f7ff fb3f 	bl	8008c10 <Error_Handler>
 8009592:	e7cf      	b.n	8009534 <MX_TIM3_Init+0x3c>
    Error_Handler();
 8009594:	f7ff fb3c 	bl	8008c10 <Error_Handler>
 8009598:	e7d4      	b.n	8009544 <MX_TIM3_Init+0x4c>
    Error_Handler();
 800959a:	f7ff fb39 	bl	8008c10 <Error_Handler>
 800959e:	e7d5      	b.n	800954c <MX_TIM3_Init+0x54>
    Error_Handler();
 80095a0:	f7ff fb36 	bl	8008c10 <Error_Handler>
 80095a4:	e7da      	b.n	800955c <MX_TIM3_Init+0x64>
    Error_Handler();
 80095a6:	f7ff fb33 	bl	8008c10 <Error_Handler>
 80095aa:	e7e4      	b.n	8009576 <MX_TIM3_Init+0x7e>
    Error_Handler();
 80095ac:	f7ff fb30 	bl	8008c10 <Error_Handler>
 80095b0:	e7e7      	b.n	8009582 <MX_TIM3_Init+0x8a>
 80095b2:	bf00      	nop
 80095b4:	200000d4 	.word	0x200000d4
 80095b8:	40000400 	.word	0x40000400

080095bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80095bc:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80095be:	480a      	ldr	r0, [pc, #40]	; (80095e8 <MX_USART1_UART_Init+0x2c>)
 80095c0:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <MX_USART1_UART_Init+0x30>)
 80095c2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80095c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80095c8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80095ca:	2300      	movs	r3, #0
 80095cc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80095ce:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80095d0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80095d2:	220c      	movs	r2, #12
 80095d4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80095d6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80095d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80095da:	f002 f85b 	bl	800b694 <HAL_UART_Init>
 80095de:	b900      	cbnz	r0, 80095e2 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80095e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80095e2:	f7ff fb15 	bl	8008c10 <Error_Handler>
}
 80095e6:	e7fb      	b.n	80095e0 <MX_USART1_UART_Init+0x24>
 80095e8:	20000164 	.word	0x20000164
 80095ec:	40013800 	.word	0x40013800

080095f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80095f0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80095f2:	480a      	ldr	r0, [pc, #40]	; (800961c <MX_USART2_UART_Init+0x2c>)
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <MX_USART2_UART_Init+0x30>)
 80095f6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80095f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80095fc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80095fe:	2300      	movs	r3, #0
 8009600:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009602:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009604:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009606:	220c      	movs	r2, #12
 8009608:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800960a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800960c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800960e:	f002 f841 	bl	800b694 <HAL_UART_Init>
 8009612:	b900      	cbnz	r0, 8009616 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009614:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009616:	f7ff fafb 	bl	8008c10 <Error_Handler>
}
 800961a:	e7fb      	b.n	8009614 <MX_USART2_UART_Init+0x24>
 800961c:	200001ac 	.word	0x200001ac
 8009620:	40004400 	.word	0x40004400

08009624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009624:	b530      	push	{r4, r5, lr}
 8009626:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009628:	2300      	movs	r3, #0
 800962a:	9304      	str	r3, [sp, #16]
 800962c:	9305      	str	r3, [sp, #20]
 800962e:	9306      	str	r3, [sp, #24]
 8009630:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8009632:	6803      	ldr	r3, [r0, #0]
 8009634:	4a30      	ldr	r2, [pc, #192]	; (80096f8 <HAL_UART_MspInit+0xd4>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d004      	beq.n	8009644 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 800963a:	4a30      	ldr	r2, [pc, #192]	; (80096fc <HAL_UART_MspInit+0xd8>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d033      	beq.n	80096a8 <HAL_UART_MspInit+0x84>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009640:	b009      	add	sp, #36	; 0x24
 8009642:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8009644:	4b2e      	ldr	r3, [pc, #184]	; (8009700 <HAL_UART_MspInit+0xdc>)
 8009646:	699a      	ldr	r2, [r3, #24]
 8009648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800964c:	619a      	str	r2, [r3, #24]
 800964e:	699a      	ldr	r2, [r3, #24]
 8009650:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009654:	9200      	str	r2, [sp, #0]
 8009656:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009658:	699a      	ldr	r2, [r3, #24]
 800965a:	f042 0204 	orr.w	r2, r2, #4
 800965e:	619a      	str	r2, [r3, #24]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	f003 0304 	and.w	r3, r3, #4
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800966a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800966e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009670:	2302      	movs	r3, #2
 8009672:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009674:	2303      	movs	r3, #3
 8009676:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009678:	4d22      	ldr	r5, [pc, #136]	; (8009704 <HAL_UART_MspInit+0xe0>)
 800967a:	a904      	add	r1, sp, #16
 800967c:	4628      	mov	r0, r5
 800967e:	f000 f9a1 	bl	80099c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009686:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009688:	2400      	movs	r4, #0
 800968a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800968e:	a904      	add	r1, sp, #16
 8009690:	4628      	mov	r0, r5
 8009692:	f000 f997 	bl	80099c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009696:	4622      	mov	r2, r4
 8009698:	4621      	mov	r1, r4
 800969a:	2025      	movs	r0, #37	; 0x25
 800969c:	f000 f8b6 	bl	800980c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80096a0:	2025      	movs	r0, #37	; 0x25
 80096a2:	f000 f8eb 	bl	800987c <HAL_NVIC_EnableIRQ>
 80096a6:	e7cb      	b.n	8009640 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80096a8:	4b15      	ldr	r3, [pc, #84]	; (8009700 <HAL_UART_MspInit+0xdc>)
 80096aa:	69da      	ldr	r2, [r3, #28]
 80096ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80096b0:	61da      	str	r2, [r3, #28]
 80096b2:	69da      	ldr	r2, [r3, #28]
 80096b4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80096b8:	9202      	str	r2, [sp, #8]
 80096ba:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	f042 0204 	orr.w	r2, r2, #4
 80096c2:	619a      	str	r2, [r3, #24]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	f003 0304 	and.w	r3, r3, #4
 80096ca:	9303      	str	r3, [sp, #12]
 80096cc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80096ce:	2304      	movs	r3, #4
 80096d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096d2:	2302      	movs	r3, #2
 80096d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80096d6:	2303      	movs	r3, #3
 80096d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096da:	4c0a      	ldr	r4, [pc, #40]	; (8009704 <HAL_UART_MspInit+0xe0>)
 80096dc:	a904      	add	r1, sp, #16
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 f970 	bl	80099c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80096e4:	2308      	movs	r3, #8
 80096e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096e8:	2300      	movs	r3, #0
 80096ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096ee:	a904      	add	r1, sp, #16
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 f967 	bl	80099c4 <HAL_GPIO_Init>
}
 80096f6:	e7a3      	b.n	8009640 <HAL_UART_MspInit+0x1c>
 80096f8:	40013800 	.word	0x40013800
 80096fc:	40004400 	.word	0x40004400
 8009700:	40021000 	.word	0x40021000
 8009704:	40010800 	.word	0x40010800

08009708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009708:	f7ff fde2 	bl	80092d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800970c:	480b      	ldr	r0, [pc, #44]	; (800973c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800970e:	490c      	ldr	r1, [pc, #48]	; (8009740 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8009710:	4a0c      	ldr	r2, [pc, #48]	; (8009744 <LoopFillZerobss+0x16>)
  movs r3, #0
 8009712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009714:	e002      	b.n	800971c <LoopCopyDataInit>

08009716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800971a:	3304      	adds	r3, #4

0800971c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800971c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800971e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009720:	d3f9      	bcc.n	8009716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009722:	4a09      	ldr	r2, [pc, #36]	; (8009748 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8009724:	4c09      	ldr	r4, [pc, #36]	; (800974c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009728:	e001      	b.n	800972e <LoopFillZerobss>

0800972a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800972a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800972c:	3204      	adds	r2, #4

0800972e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800972e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009730:	d3fb      	bcc.n	800972a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009732:	f002 f9dd 	bl	800baf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009736:	f7ff fab3 	bl	8008ca0 <main>
  bx lr
 800973a:	4770      	bx	lr
  ldr r0, =_sdata
 800973c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009740:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8009744:	0800bba8 	.word	0x0800bba8
  ldr r2, =_sbss
 8009748:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800974c:	200001f8 	.word	0x200001f8

08009750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009750:	e7fe      	b.n	8009750 <ADC1_2_IRQHandler>
	...

08009754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009754:	b510      	push	{r4, lr}
 8009756:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009758:	4b0e      	ldr	r3, [pc, #56]	; (8009794 <HAL_InitTick+0x40>)
 800975a:	7818      	ldrb	r0, [r3, #0]
 800975c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009760:	fbb3 f3f0 	udiv	r3, r3, r0
 8009764:	4a0c      	ldr	r2, [pc, #48]	; (8009798 <HAL_InitTick+0x44>)
 8009766:	6810      	ldr	r0, [r2, #0]
 8009768:	fbb0 f0f3 	udiv	r0, r0, r3
 800976c:	f000 f8a6 	bl	80098bc <HAL_SYSTICK_Config>
 8009770:	b968      	cbnz	r0, 800978e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009772:	2c0f      	cmp	r4, #15
 8009774:	d901      	bls.n	800977a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8009776:	2001      	movs	r0, #1
 8009778:	e00a      	b.n	8009790 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800977a:	2200      	movs	r2, #0
 800977c:	4621      	mov	r1, r4
 800977e:	f04f 30ff 	mov.w	r0, #4294967295
 8009782:	f000 f843 	bl	800980c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009786:	4b05      	ldr	r3, [pc, #20]	; (800979c <HAL_InitTick+0x48>)
 8009788:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800978a:	2000      	movs	r0, #0
 800978c:	e000      	b.n	8009790 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800978e:	2001      	movs	r0, #1
}
 8009790:	bd10      	pop	{r4, pc}
 8009792:	bf00      	nop
 8009794:	20000044 	.word	0x20000044
 8009798:	20000040 	.word	0x20000040
 800979c:	20000048 	.word	0x20000048

080097a0 <HAL_Init>:
{
 80097a0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80097a2:	4a07      	ldr	r2, [pc, #28]	; (80097c0 <HAL_Init+0x20>)
 80097a4:	6813      	ldr	r3, [r2, #0]
 80097a6:	f043 0310 	orr.w	r3, r3, #16
 80097aa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80097ac:	2003      	movs	r0, #3
 80097ae:	f000 f81b 	bl	80097e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80097b2:	200f      	movs	r0, #15
 80097b4:	f7ff ffce 	bl	8009754 <HAL_InitTick>
  HAL_MspInit();
 80097b8:	f7ff fd52 	bl	8009260 <HAL_MspInit>
}
 80097bc:	2000      	movs	r0, #0
 80097be:	bd08      	pop	{r3, pc}
 80097c0:	40022000 	.word	0x40022000

080097c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80097c4:	4a03      	ldr	r2, [pc, #12]	; (80097d4 <HAL_IncTick+0x10>)
 80097c6:	6811      	ldr	r1, [r2, #0]
 80097c8:	4b03      	ldr	r3, [pc, #12]	; (80097d8 <HAL_IncTick+0x14>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	440b      	add	r3, r1
 80097ce:	6013      	str	r3, [r2, #0]
}
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	200001f4 	.word	0x200001f4
 80097d8:	20000044 	.word	0x20000044

080097dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80097dc:	4b01      	ldr	r3, [pc, #4]	; (80097e4 <HAL_GetTick+0x8>)
 80097de:	6818      	ldr	r0, [r3, #0]
}
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	200001f4 	.word	0x200001f4

080097e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097e8:	4a07      	ldr	r2, [pc, #28]	; (8009808 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80097ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80097f0:	041b      	lsls	r3, r3, #16
 80097f2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80097f4:	0200      	lsls	r0, r0, #8
 80097f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80097fa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80097fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8009804:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009806:	4770      	bx	lr
 8009808:	e000ed00 	.word	0xe000ed00

0800980c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800980c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800980e:	4b19      	ldr	r3, [pc, #100]	; (8009874 <HAL_NVIC_SetPriority+0x68>)
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009816:	f1c3 0c07 	rsb	ip, r3, #7
 800981a:	f1bc 0f04 	cmp.w	ip, #4
 800981e:	bf28      	it	cs
 8009820:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009824:	f103 0e04 	add.w	lr, r3, #4
 8009828:	f1be 0f06 	cmp.w	lr, #6
 800982c:	d918      	bls.n	8009860 <HAL_NVIC_SetPriority+0x54>
 800982e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009830:	f04f 3eff 	mov.w	lr, #4294967295
 8009834:	fa0e fc0c 	lsl.w	ip, lr, ip
 8009838:	ea21 010c 	bic.w	r1, r1, ip
 800983c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800983e:	fa0e f303 	lsl.w	r3, lr, r3
 8009842:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009846:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8009848:	2800      	cmp	r0, #0
 800984a:	db0b      	blt.n	8009864 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800984c:	0109      	lsls	r1, r1, #4
 800984e:	b2c9      	uxtb	r1, r1
 8009850:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8009854:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8009858:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800985c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009860:	2300      	movs	r3, #0
 8009862:	e7e5      	b.n	8009830 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009864:	f000 000f 	and.w	r0, r0, #15
 8009868:	0109      	lsls	r1, r1, #4
 800986a:	b2c9      	uxtb	r1, r1
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <HAL_NVIC_SetPriority+0x6c>)
 800986e:	5419      	strb	r1, [r3, r0]
 8009870:	e7f4      	b.n	800985c <HAL_NVIC_SetPriority+0x50>
 8009872:	bf00      	nop
 8009874:	e000ed00 	.word	0xe000ed00
 8009878:	e000ed14 	.word	0xe000ed14

0800987c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800987c:	2800      	cmp	r0, #0
 800987e:	db07      	blt.n	8009890 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009880:	f000 021f 	and.w	r2, r0, #31
 8009884:	0940      	lsrs	r0, r0, #5
 8009886:	2301      	movs	r3, #1
 8009888:	4093      	lsls	r3, r2
 800988a:	4a02      	ldr	r2, [pc, #8]	; (8009894 <HAL_NVIC_EnableIRQ+0x18>)
 800988c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	e000e100 	.word	0xe000e100

08009898 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009898:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800989c:	4905      	ldr	r1, [pc, #20]	; (80098b4 <HAL_NVIC_SystemReset+0x1c>)
 800989e:	68ca      	ldr	r2, [r1, #12]
 80098a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80098a4:	4b04      	ldr	r3, [pc, #16]	; (80098b8 <HAL_NVIC_SystemReset+0x20>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60cb      	str	r3, [r1, #12]
 80098aa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80098ae:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80098b0:	e7fd      	b.n	80098ae <HAL_NVIC_SystemReset+0x16>
 80098b2:	bf00      	nop
 80098b4:	e000ed00 	.word	0xe000ed00
 80098b8:	05fa0004 	.word	0x05fa0004

080098bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80098bc:	3801      	subs	r0, #1
 80098be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80098c2:	d20b      	bcs.n	80098dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80098c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80098c8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098ca:	4a05      	ldr	r2, [pc, #20]	; (80098e0 <HAL_SYSTICK_Config+0x24>)
 80098cc:	21f0      	movs	r1, #240	; 0xf0
 80098ce:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80098d2:	2000      	movs	r0, #0
 80098d4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80098d6:	2207      	movs	r2, #7
 80098d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80098da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80098dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80098de:	4770      	bx	lr
 80098e0:	e000ed00 	.word	0xe000ed00

080098e4 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80098e4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d006      	beq.n	80098fc <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80098ee:	2304      	movs	r3, #4
 80098f0:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098f2:	2300      	movs	r3, #0
 80098f4:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 80098f8:	2001      	movs	r0, #1
 80098fa:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098fc:	6802      	ldr	r2, [r0, #0]
 80098fe:	6813      	ldr	r3, [r2, #0]
 8009900:	f023 030e 	bic.w	r3, r3, #14
 8009904:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009906:	6802      	ldr	r2, [r0, #0]
 8009908:	6813      	ldr	r3, [r2, #0]
 800990a:	f023 0301 	bic.w	r3, r3, #1
 800990e:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009910:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009912:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8009914:	2201      	movs	r2, #1
 8009916:	fa02 f303 	lsl.w	r3, r2, r3
 800991a:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800991c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009920:	2300      	movs	r3, #0
 8009922:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8009926:	4618      	mov	r0, r3
}
 8009928:	4770      	bx	lr
	...

0800992c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800992c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800992e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b02      	cmp	r3, #2
 8009936:	d003      	beq.n	8009940 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009938:	2304      	movs	r3, #4
 800993a:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800993c:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800993e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009940:	6802      	ldr	r2, [r0, #0]
 8009942:	6813      	ldr	r3, [r2, #0]
 8009944:	f023 030e 	bic.w	r3, r3, #14
 8009948:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800994a:	6802      	ldr	r2, [r0, #0]
 800994c:	6813      	ldr	r3, [r2, #0]
 800994e:	f023 0301 	bic.w	r3, r3, #1
 8009952:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009954:	6803      	ldr	r3, [r0, #0]
 8009956:	4a19      	ldr	r2, [pc, #100]	; (80099bc <HAL_DMA_Abort_IT+0x90>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d014      	beq.n	8009986 <HAL_DMA_Abort_IT+0x5a>
 800995c:	3214      	adds	r2, #20
 800995e:	4293      	cmp	r3, r2
 8009960:	d01f      	beq.n	80099a2 <HAL_DMA_Abort_IT+0x76>
 8009962:	3214      	adds	r2, #20
 8009964:	4293      	cmp	r3, r2
 8009966:	d01e      	beq.n	80099a6 <HAL_DMA_Abort_IT+0x7a>
 8009968:	3214      	adds	r2, #20
 800996a:	4293      	cmp	r3, r2
 800996c:	d01e      	beq.n	80099ac <HAL_DMA_Abort_IT+0x80>
 800996e:	3214      	adds	r2, #20
 8009970:	4293      	cmp	r3, r2
 8009972:	d01e      	beq.n	80099b2 <HAL_DMA_Abort_IT+0x86>
 8009974:	3214      	adds	r2, #20
 8009976:	4293      	cmp	r3, r2
 8009978:	d002      	beq.n	8009980 <HAL_DMA_Abort_IT+0x54>
 800997a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800997e:	e003      	b.n	8009988 <HAL_DMA_Abort_IT+0x5c>
 8009980:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009984:	e000      	b.n	8009988 <HAL_DMA_Abort_IT+0x5c>
 8009986:	2201      	movs	r2, #1
 8009988:	4b0d      	ldr	r3, [pc, #52]	; (80099c0 <HAL_DMA_Abort_IT+0x94>)
 800998a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800998c:	2301      	movs	r3, #1
 800998e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8009992:	2300      	movs	r3, #0
 8009994:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8009998:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800999a:	b16b      	cbz	r3, 80099b8 <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 800999c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800999e:	2000      	movs	r0, #0
 80099a0:	e7cd      	b.n	800993e <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80099a2:	2210      	movs	r2, #16
 80099a4:	e7f0      	b.n	8009988 <HAL_DMA_Abort_IT+0x5c>
 80099a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099aa:	e7ed      	b.n	8009988 <HAL_DMA_Abort_IT+0x5c>
 80099ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80099b0:	e7ea      	b.n	8009988 <HAL_DMA_Abort_IT+0x5c>
 80099b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80099b6:	e7e7      	b.n	8009988 <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 80099b8:	2000      	movs	r0, #0
 80099ba:	e7c0      	b.n	800993e <HAL_DMA_Abort_IT+0x12>
 80099bc:	40020008 	.word	0x40020008
 80099c0:	40020000 	.word	0x40020000

080099c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80099c8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80099ca:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80099cc:	e0a6      	b.n	8009b1c <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80099ce:	4d80      	ldr	r5, [pc, #512]	; (8009bd0 <HAL_GPIO_Init+0x20c>)
 80099d0:	42aa      	cmp	r2, r5
 80099d2:	d010      	beq.n	80099f6 <HAL_GPIO_Init+0x32>
 80099d4:	d907      	bls.n	80099e6 <HAL_GPIO_Init+0x22>
 80099d6:	4d7f      	ldr	r5, [pc, #508]	; (8009bd4 <HAL_GPIO_Init+0x210>)
 80099d8:	42aa      	cmp	r2, r5
 80099da:	d00c      	beq.n	80099f6 <HAL_GPIO_Init+0x32>
 80099dc:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80099e0:	42aa      	cmp	r2, r5
 80099e2:	d008      	beq.n	80099f6 <HAL_GPIO_Init+0x32>
 80099e4:	e013      	b.n	8009a0e <HAL_GPIO_Init+0x4a>
 80099e6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80099ea:	42aa      	cmp	r2, r5
 80099ec:	d003      	beq.n	80099f6 <HAL_GPIO_Init+0x32>
 80099ee:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 80099f2:	42aa      	cmp	r2, r5
 80099f4:	d107      	bne.n	8009a06 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80099f6:	688a      	ldr	r2, [r1, #8]
 80099f8:	2a00      	cmp	r2, #0
 80099fa:	d058      	beq.n	8009aae <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80099fc:	2a01      	cmp	r2, #1
 80099fe:	d051      	beq.n	8009aa4 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8009a00:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a02:	2408      	movs	r4, #8
 8009a04:	e003      	b.n	8009a0e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8009a06:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009a0a:	42aa      	cmp	r2, r5
 8009a0c:	d0f3      	beq.n	80099f6 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009a0e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8009a12:	d84e      	bhi.n	8009ab2 <HAL_GPIO_Init+0xee>
 8009a14:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009a16:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8009a1a:	d84c      	bhi.n	8009ab6 <HAL_GPIO_Init+0xf2>
 8009a1c:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009a20:	6833      	ldr	r3, [r6, #0]
 8009a22:	250f      	movs	r5, #15
 8009a24:	4095      	lsls	r5, r2
 8009a26:	ea23 0305 	bic.w	r3, r3, r5
 8009a2a:	fa04 f202 	lsl.w	r2, r4, r2
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009a32:	684b      	ldr	r3, [r1, #4]
 8009a34:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8009a38:	d06e      	beq.n	8009b18 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009a3a:	4b67      	ldr	r3, [pc, #412]	; (8009bd8 <HAL_GPIO_Init+0x214>)
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	f042 0201 	orr.w	r2, r2, #1
 8009a42:	619a      	str	r2, [r3, #24]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	9301      	str	r3, [sp, #4]
 8009a4c:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8009a4e:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8009a52:	1c95      	adds	r5, r2, #2
 8009a54:	4b61      	ldr	r3, [pc, #388]	; (8009bdc <HAL_GPIO_Init+0x218>)
 8009a56:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009a5a:	f00c 0303 	and.w	r3, ip, #3
 8009a5e:	009d      	lsls	r5, r3, #2
 8009a60:	230f      	movs	r3, #15
 8009a62:	40ab      	lsls	r3, r5
 8009a64:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009a68:	4b5d      	ldr	r3, [pc, #372]	; (8009be0 <HAL_GPIO_Init+0x21c>)
 8009a6a:	4298      	cmp	r0, r3
 8009a6c:	d029      	beq.n	8009ac2 <HAL_GPIO_Init+0xfe>
 8009a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a72:	4298      	cmp	r0, r3
 8009a74:	f000 808e 	beq.w	8009b94 <HAL_GPIO_Init+0x1d0>
 8009a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a7c:	4298      	cmp	r0, r3
 8009a7e:	f000 808b 	beq.w	8009b98 <HAL_GPIO_Init+0x1d4>
 8009a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a86:	4298      	cmp	r0, r3
 8009a88:	d019      	beq.n	8009abe <HAL_GPIO_Init+0xfa>
 8009a8a:	2304      	movs	r3, #4
 8009a8c:	e01a      	b.n	8009ac4 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009a8e:	68cc      	ldr	r4, [r1, #12]
          break;
 8009a90:	e7bd      	b.n	8009a0e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009a92:	68cc      	ldr	r4, [r1, #12]
 8009a94:	3404      	adds	r4, #4
          break;
 8009a96:	e7ba      	b.n	8009a0e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009a98:	68cc      	ldr	r4, [r1, #12]
 8009a9a:	3408      	adds	r4, #8
          break;
 8009a9c:	e7b7      	b.n	8009a0e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009a9e:	68cc      	ldr	r4, [r1, #12]
 8009aa0:	340c      	adds	r4, #12
          break;
 8009aa2:	e7b4      	b.n	8009a0e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8009aa4:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009aa6:	2408      	movs	r4, #8
 8009aa8:	e7b1      	b.n	8009a0e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009aaa:	2400      	movs	r4, #0
 8009aac:	e7af      	b.n	8009a0e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009aae:	2404      	movs	r4, #4
 8009ab0:	e7ad      	b.n	8009a0e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ab2:	1d06      	adds	r6, r0, #4
 8009ab4:	e7af      	b.n	8009a16 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009ab6:	f1ac 0208 	sub.w	r2, ip, #8
 8009aba:	0092      	lsls	r2, r2, #2
 8009abc:	e7b0      	b.n	8009a20 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e000      	b.n	8009ac4 <HAL_GPIO_Init+0x100>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	40ab      	lsls	r3, r5
 8009ac6:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8009ac8:	3202      	adds	r2, #2
 8009aca:	4d44      	ldr	r5, [pc, #272]	; (8009bdc <HAL_GPIO_Init+0x218>)
 8009acc:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009ad0:	684b      	ldr	r3, [r1, #4]
 8009ad2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009ad6:	d061      	beq.n	8009b9c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009ad8:	4a42      	ldr	r2, [pc, #264]	; (8009be4 <HAL_GPIO_Init+0x220>)
 8009ada:	6893      	ldr	r3, [r2, #8]
 8009adc:	ea43 030e 	orr.w	r3, r3, lr
 8009ae0:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009ae2:	684b      	ldr	r3, [r1, #4]
 8009ae4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8009ae8:	d05e      	beq.n	8009ba8 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009aea:	4a3e      	ldr	r2, [pc, #248]	; (8009be4 <HAL_GPIO_Init+0x220>)
 8009aec:	68d3      	ldr	r3, [r2, #12]
 8009aee:	ea43 030e 	orr.w	r3, r3, lr
 8009af2:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009af4:	684b      	ldr	r3, [r1, #4]
 8009af6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009afa:	d05b      	beq.n	8009bb4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009afc:	4a39      	ldr	r2, [pc, #228]	; (8009be4 <HAL_GPIO_Init+0x220>)
 8009afe:	6853      	ldr	r3, [r2, #4]
 8009b00:	ea43 030e 	orr.w	r3, r3, lr
 8009b04:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009b06:	684b      	ldr	r3, [r1, #4]
 8009b08:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009b0c:	d058      	beq.n	8009bc0 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009b0e:	4a35      	ldr	r2, [pc, #212]	; (8009be4 <HAL_GPIO_Init+0x220>)
 8009b10:	6813      	ldr	r3, [r2, #0]
 8009b12:	ea43 030e 	orr.w	r3, r3, lr
 8009b16:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8009b18:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009b1c:	680a      	ldr	r2, [r1, #0]
 8009b1e:	fa32 f30c 	lsrs.w	r3, r2, ip
 8009b22:	d053      	beq.n	8009bcc <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8009b24:	2301      	movs	r3, #1
 8009b26:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009b2a:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8009b2e:	ea33 0202 	bics.w	r2, r3, r2
 8009b32:	d1f1      	bne.n	8009b18 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8009b34:	684a      	ldr	r2, [r1, #4]
 8009b36:	2a12      	cmp	r2, #18
 8009b38:	f63f af49 	bhi.w	80099ce <HAL_GPIO_Init+0xa>
 8009b3c:	2a12      	cmp	r2, #18
 8009b3e:	f63f af66 	bhi.w	8009a0e <HAL_GPIO_Init+0x4a>
 8009b42:	a501      	add	r5, pc, #4	; (adr r5, 8009b48 <HAL_GPIO_Init+0x184>)
 8009b44:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8009b48:	080099f7 	.word	0x080099f7
 8009b4c:	08009a8f 	.word	0x08009a8f
 8009b50:	08009a99 	.word	0x08009a99
 8009b54:	08009aab 	.word	0x08009aab
 8009b58:	08009a0f 	.word	0x08009a0f
 8009b5c:	08009a0f 	.word	0x08009a0f
 8009b60:	08009a0f 	.word	0x08009a0f
 8009b64:	08009a0f 	.word	0x08009a0f
 8009b68:	08009a0f 	.word	0x08009a0f
 8009b6c:	08009a0f 	.word	0x08009a0f
 8009b70:	08009a0f 	.word	0x08009a0f
 8009b74:	08009a0f 	.word	0x08009a0f
 8009b78:	08009a0f 	.word	0x08009a0f
 8009b7c:	08009a0f 	.word	0x08009a0f
 8009b80:	08009a0f 	.word	0x08009a0f
 8009b84:	08009a0f 	.word	0x08009a0f
 8009b88:	08009a0f 	.word	0x08009a0f
 8009b8c:	08009a93 	.word	0x08009a93
 8009b90:	08009a9f 	.word	0x08009a9f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009b94:	2301      	movs	r3, #1
 8009b96:	e795      	b.n	8009ac4 <HAL_GPIO_Init+0x100>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e793      	b.n	8009ac4 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009b9c:	4a11      	ldr	r2, [pc, #68]	; (8009be4 <HAL_GPIO_Init+0x220>)
 8009b9e:	6893      	ldr	r3, [r2, #8]
 8009ba0:	ea23 030e 	bic.w	r3, r3, lr
 8009ba4:	6093      	str	r3, [r2, #8]
 8009ba6:	e79c      	b.n	8009ae2 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009ba8:	4a0e      	ldr	r2, [pc, #56]	; (8009be4 <HAL_GPIO_Init+0x220>)
 8009baa:	68d3      	ldr	r3, [r2, #12]
 8009bac:	ea23 030e 	bic.w	r3, r3, lr
 8009bb0:	60d3      	str	r3, [r2, #12]
 8009bb2:	e79f      	b.n	8009af4 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009bb4:	4a0b      	ldr	r2, [pc, #44]	; (8009be4 <HAL_GPIO_Init+0x220>)
 8009bb6:	6853      	ldr	r3, [r2, #4]
 8009bb8:	ea23 030e 	bic.w	r3, r3, lr
 8009bbc:	6053      	str	r3, [r2, #4]
 8009bbe:	e7a2      	b.n	8009b06 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009bc0:	4a08      	ldr	r2, [pc, #32]	; (8009be4 <HAL_GPIO_Init+0x220>)
 8009bc2:	6813      	ldr	r3, [r2, #0]
 8009bc4:	ea23 030e 	bic.w	r3, r3, lr
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	e7a5      	b.n	8009b18 <HAL_GPIO_Init+0x154>
  }
}
 8009bcc:	b002      	add	sp, #8
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	10220000 	.word	0x10220000
 8009bd4:	10310000 	.word	0x10310000
 8009bd8:	40021000 	.word	0x40021000
 8009bdc:	40010000 	.word	0x40010000
 8009be0:	40010800 	.word	0x40010800
 8009be4:	40010400 	.word	0x40010400

08009be8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009be8:	b10a      	cbz	r2, 8009bee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009bea:	6101      	str	r1, [r0, #16]
 8009bec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009bee:	0409      	lsls	r1, r1, #16
 8009bf0:	6101      	str	r1, [r0, #16]
  }
}
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009bf4:	4b01      	ldr	r3, [pc, #4]	; (8009bfc <HAL_PWR_EnableBkUpAccess+0x8>)
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	621a      	str	r2, [r3, #32]
}
 8009bfa:	4770      	bx	lr
 8009bfc:	420e0000 	.word	0x420e0000

08009c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009c00:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009c02:	4b08      	ldr	r3, [pc, #32]	; (8009c24 <RCC_Delay+0x24>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a08      	ldr	r2, [pc, #32]	; (8009c28 <RCC_Delay+0x28>)
 8009c08:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0c:	0a5b      	lsrs	r3, r3, #9
 8009c0e:	fb00 f303 	mul.w	r3, r0, r3
 8009c12:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8009c14:	bf00      	nop
  }
  while (Delay --);
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	1e5a      	subs	r2, r3, #1
 8009c1a:	9201      	str	r2, [sp, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1f9      	bne.n	8009c14 <RCC_Delay+0x14>
}
 8009c20:	b002      	add	sp, #8
 8009c22:	4770      	bx	lr
 8009c24:	20000040 	.word	0x20000040
 8009c28:	10624dd3 	.word	0x10624dd3

08009c2c <HAL_RCC_DeInit>:
{
 8009c2c:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 8009c2e:	f7ff fdd5 	bl	80097dc <HAL_GetTick>
 8009c32:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009c34:	4a36      	ldr	r2, [pc, #216]	; (8009d10 <HAL_RCC_DeInit+0xe4>)
 8009c36:	6813      	ldr	r3, [r2, #0]
 8009c38:	f043 0301 	orr.w	r3, r3, #1
 8009c3c:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009c3e:	4b34      	ldr	r3, [pc, #208]	; (8009d10 <HAL_RCC_DeInit+0xe4>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f013 0f02 	tst.w	r3, #2
 8009c46:	d107      	bne.n	8009c58 <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c48:	f7ff fdc8 	bl	80097dc <HAL_GetTick>
 8009c4c:	1b00      	subs	r0, r0, r4
 8009c4e:	2802      	cmp	r0, #2
 8009c50:	d9f5      	bls.n	8009c3e <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8009c52:	2403      	movs	r4, #3
}
 8009c54:	4620      	mov	r0, r4
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8009c58:	4d2d      	ldr	r5, [pc, #180]	; (8009d10 <HAL_RCC_DeInit+0xe4>)
 8009c5a:	682b      	ldr	r3, [r5, #0]
 8009c5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c64:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8009c66:	f7ff fdb9 	bl	80097dc <HAL_GetTick>
 8009c6a:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009c70:	4b27      	ldr	r3, [pc, #156]	; (8009d10 <HAL_RCC_DeInit+0xe4>)
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f013 0f0c 	tst.w	r3, #12
 8009c78:	d008      	beq.n	8009c8c <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c7a:	f7ff fdaf 	bl	80097dc <HAL_GetTick>
 8009c7e:	1b00      	subs	r0, r0, r4
 8009c80:	f241 3388 	movw	r3, #5000	; 0x1388
 8009c84:	4298      	cmp	r0, r3
 8009c86:	d9f3      	bls.n	8009c70 <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 8009c88:	2403      	movs	r4, #3
 8009c8a:	e7e3      	b.n	8009c54 <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 8009c8c:	4b21      	ldr	r3, [pc, #132]	; (8009d14 <HAL_RCC_DeInit+0xe8>)
 8009c8e:	4a22      	ldr	r2, [pc, #136]	; (8009d18 <HAL_RCC_DeInit+0xec>)
 8009c90:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009c92:	4b22      	ldr	r3, [pc, #136]	; (8009d1c <HAL_RCC_DeInit+0xf0>)
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	f7ff fd5d 	bl	8009754 <HAL_InitTick>
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	b108      	cbz	r0, 8009ca2 <HAL_RCC_DeInit+0x76>
    return HAL_ERROR;
 8009c9e:	2401      	movs	r4, #1
 8009ca0:	e7d8      	b.n	8009c54 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009ca2:	f7ff fd9b 	bl	80097dc <HAL_GetTick>
 8009ca6:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009ca8:	4a19      	ldr	r2, [pc, #100]	; (8009d10 <HAL_RCC_DeInit+0xe4>)
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cb0:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009cb2:	4b17      	ldr	r3, [pc, #92]	; (8009d10 <HAL_RCC_DeInit+0xe4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009cba:	d006      	beq.n	8009cca <HAL_RCC_DeInit+0x9e>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cbc:	f7ff fd8e 	bl	80097dc <HAL_GetTick>
 8009cc0:	1b40      	subs	r0, r0, r5
 8009cc2:	2802      	cmp	r0, #2
 8009cc4:	d9f5      	bls.n	8009cb2 <HAL_RCC_DeInit+0x86>
      return HAL_TIMEOUT;
 8009cc6:	2403      	movs	r4, #3
 8009cc8:	e7c4      	b.n	8009c54 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 8009cca:	4e11      	ldr	r6, [pc, #68]	; (8009d10 <HAL_RCC_DeInit+0xe4>)
 8009ccc:	2300      	movs	r3, #0
 8009cce:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 8009cd0:	f7ff fd84 	bl	80097dc <HAL_GetTick>
 8009cd4:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8009cd6:	6833      	ldr	r3, [r6, #0]
 8009cd8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8009cdc:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009cde:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <HAL_RCC_DeInit+0xe4>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009ce6:	d006      	beq.n	8009cf6 <HAL_RCC_DeInit+0xca>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ce8:	f7ff fd78 	bl	80097dc <HAL_GetTick>
 8009cec:	1b40      	subs	r0, r0, r5
 8009cee:	2864      	cmp	r0, #100	; 0x64
 8009cf0:	d9f5      	bls.n	8009cde <HAL_RCC_DeInit+0xb2>
      return HAL_TIMEOUT;
 8009cf2:	2403      	movs	r4, #3
 8009cf4:	e7ae      	b.n	8009c54 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8009cf6:	4b06      	ldr	r3, [pc, #24]	; (8009d10 <HAL_RCC_DeInit+0xe4>)
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009cfe:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8009d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d02:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8009d06:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 8009d08:	2200      	movs	r2, #0
 8009d0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d0c:	e7a2      	b.n	8009c54 <HAL_RCC_DeInit+0x28>
 8009d0e:	bf00      	nop
 8009d10:	40021000 	.word	0x40021000
 8009d14:	20000040 	.word	0x20000040
 8009d18:	007a1200 	.word	0x007a1200
 8009d1c:	20000048 	.word	0x20000048

08009d20 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8009d20:	2800      	cmp	r0, #0
 8009d22:	f000 81f1 	beq.w	800a108 <HAL_RCC_OscConfig+0x3e8>
{
 8009d26:	b570      	push	{r4, r5, r6, lr}
 8009d28:	b082      	sub	sp, #8
 8009d2a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d2c:	6803      	ldr	r3, [r0, #0]
 8009d2e:	f013 0f01 	tst.w	r3, #1
 8009d32:	d02c      	beq.n	8009d8e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009d34:	4b99      	ldr	r3, [pc, #612]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f003 030c 	and.w	r3, r3, #12
 8009d3c:	2b04      	cmp	r3, #4
 8009d3e:	d01d      	beq.n	8009d7c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009d40:	4b96      	ldr	r3, [pc, #600]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	f003 030c 	and.w	r3, r3, #12
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d012      	beq.n	8009d72 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d4c:	6863      	ldr	r3, [r4, #4]
 8009d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d52:	d041      	beq.n	8009dd8 <HAL_RCC_OscConfig+0xb8>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d155      	bne.n	8009e04 <HAL_RCC_OscConfig+0xe4>
 8009d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d5c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	e037      	b.n	8009de2 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009d72:	4b8a      	ldr	r3, [pc, #552]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009d7a:	d0e7      	beq.n	8009d4c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d7c:	4b87      	ldr	r3, [pc, #540]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009d84:	d003      	beq.n	8009d8e <HAL_RCC_OscConfig+0x6e>
 8009d86:	6863      	ldr	r3, [r4, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 81bf 	beq.w	800a10c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	f013 0f02 	tst.w	r3, #2
 8009d94:	d075      	beq.n	8009e82 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009d96:	4b81      	ldr	r3, [pc, #516]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f013 0f0c 	tst.w	r3, #12
 8009d9e:	d05f      	beq.n	8009e60 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009da0:	4b7e      	ldr	r3, [pc, #504]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	f003 030c 	and.w	r3, r3, #12
 8009da8:	2b08      	cmp	r3, #8
 8009daa:	d054      	beq.n	8009e56 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009dac:	6923      	ldr	r3, [r4, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 808a 	beq.w	8009ec8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8009db4:	4b7a      	ldr	r3, [pc, #488]	; (8009fa0 <HAL_RCC_OscConfig+0x280>)
 8009db6:	2201      	movs	r2, #1
 8009db8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009dba:	f7ff fd0f 	bl	80097dc <HAL_GetTick>
 8009dbe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dc0:	4b76      	ldr	r3, [pc, #472]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f013 0f02 	tst.w	r3, #2
 8009dc8:	d175      	bne.n	8009eb6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009dca:	f7ff fd07 	bl	80097dc <HAL_GetTick>
 8009dce:	1b40      	subs	r0, r0, r5
 8009dd0:	2802      	cmp	r0, #2
 8009dd2:	d9f5      	bls.n	8009dc0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8009dd4:	2003      	movs	r0, #3
 8009dd6:	e19e      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009dd8:	4a70      	ldr	r2, [pc, #448]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009de0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009de2:	6863      	ldr	r3, [r4, #4]
 8009de4:	b343      	cbz	r3, 8009e38 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8009de6:	f7ff fcf9 	bl	80097dc <HAL_GetTick>
 8009dea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dec:	4b6b      	ldr	r3, [pc, #428]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009df4:	d1cb      	bne.n	8009d8e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009df6:	f7ff fcf1 	bl	80097dc <HAL_GetTick>
 8009dfa:	1b40      	subs	r0, r0, r5
 8009dfc:	2864      	cmp	r0, #100	; 0x64
 8009dfe:	d9f5      	bls.n	8009dec <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8009e00:	2003      	movs	r0, #3
 8009e02:	e188      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e08:	d009      	beq.n	8009e1e <HAL_RCC_OscConfig+0xfe>
 8009e0a:	4b64      	ldr	r3, [pc, #400]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	e7e1      	b.n	8009de2 <HAL_RCC_OscConfig+0xc2>
 8009e1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e22:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	e7d4      	b.n	8009de2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8009e38:	f7ff fcd0 	bl	80097dc <HAL_GetTick>
 8009e3c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e3e:	4b57      	ldr	r3, [pc, #348]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009e46:	d0a2      	beq.n	8009d8e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e48:	f7ff fcc8 	bl	80097dc <HAL_GetTick>
 8009e4c:	1b40      	subs	r0, r0, r5
 8009e4e:	2864      	cmp	r0, #100	; 0x64
 8009e50:	d9f5      	bls.n	8009e3e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8009e52:	2003      	movs	r0, #3
 8009e54:	e15f      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009e56:	4b51      	ldr	r3, [pc, #324]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009e5e:	d1a5      	bne.n	8009dac <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e60:	4b4e      	ldr	r3, [pc, #312]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f013 0f02 	tst.w	r3, #2
 8009e68:	d003      	beq.n	8009e72 <HAL_RCC_OscConfig+0x152>
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	f040 814f 	bne.w	800a110 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e72:	4a4a      	ldr	r2, [pc, #296]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009e74:	6813      	ldr	r3, [r2, #0]
 8009e76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009e7a:	6961      	ldr	r1, [r4, #20]
 8009e7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009e80:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	f013 0f08 	tst.w	r3, #8
 8009e88:	d033      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e8a:	69a3      	ldr	r3, [r4, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d05c      	beq.n	8009f4a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8009e90:	4b43      	ldr	r3, [pc, #268]	; (8009fa0 <HAL_RCC_OscConfig+0x280>)
 8009e92:	2201      	movs	r2, #1
 8009e94:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8009e98:	f7ff fca0 	bl	80097dc <HAL_GetTick>
 8009e9c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e9e:	4b3f      	ldr	r3, [pc, #252]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	f013 0f02 	tst.w	r3, #2
 8009ea6:	d121      	bne.n	8009eec <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ea8:	f7ff fc98 	bl	80097dc <HAL_GetTick>
 8009eac:	1b40      	subs	r0, r0, r5
 8009eae:	2802      	cmp	r0, #2
 8009eb0:	d9f5      	bls.n	8009e9e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8009eb2:	2003      	movs	r0, #3
 8009eb4:	e12f      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eb6:	4a39      	ldr	r2, [pc, #228]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009eb8:	6813      	ldr	r3, [r2, #0]
 8009eba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009ebe:	6961      	ldr	r1, [r4, #20]
 8009ec0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009ec4:	6013      	str	r3, [r2, #0]
 8009ec6:	e7dc      	b.n	8009e82 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8009ec8:	4b35      	ldr	r3, [pc, #212]	; (8009fa0 <HAL_RCC_OscConfig+0x280>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009ece:	f7ff fc85 	bl	80097dc <HAL_GetTick>
 8009ed2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ed4:	4b31      	ldr	r3, [pc, #196]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f013 0f02 	tst.w	r3, #2
 8009edc:	d0d1      	beq.n	8009e82 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ede:	f7ff fc7d 	bl	80097dc <HAL_GetTick>
 8009ee2:	1b40      	subs	r0, r0, r5
 8009ee4:	2802      	cmp	r0, #2
 8009ee6:	d9f5      	bls.n	8009ed4 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8009ee8:	2003      	movs	r0, #3
 8009eea:	e114      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8009eec:	2001      	movs	r0, #1
 8009eee:	f7ff fe87 	bl	8009c00 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	f013 0f04 	tst.w	r3, #4
 8009ef8:	f000 8096 	beq.w	800a028 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009efc:	4b27      	ldr	r3, [pc, #156]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8009f04:	d134      	bne.n	8009f70 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f06:	4b25      	ldr	r3, [pc, #148]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009f08:	69da      	ldr	r2, [r3, #28]
 8009f0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009f0e:	61da      	str	r2, [r3, #28]
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009f1a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f1c:	4b21      	ldr	r3, [pc, #132]	; (8009fa4 <HAL_RCC_OscConfig+0x284>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009f24:	d026      	beq.n	8009f74 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f26:	68e3      	ldr	r3, [r4, #12]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d03d      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x288>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d153      	bne.n	8009fd8 <HAL_RCC_OscConfig+0x2b8>
 8009f30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f34:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8009f38:	6a1a      	ldr	r2, [r3, #32]
 8009f3a:	f022 0201 	bic.w	r2, r2, #1
 8009f3e:	621a      	str	r2, [r3, #32]
 8009f40:	6a1a      	ldr	r2, [r3, #32]
 8009f42:	f022 0204 	bic.w	r2, r2, #4
 8009f46:	621a      	str	r2, [r3, #32]
 8009f48:	e033      	b.n	8009fb2 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8009f4a:	4b15      	ldr	r3, [pc, #84]	; (8009fa0 <HAL_RCC_OscConfig+0x280>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8009f52:	f7ff fc43 	bl	80097dc <HAL_GetTick>
 8009f56:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f58:	4b10      	ldr	r3, [pc, #64]	; (8009f9c <HAL_RCC_OscConfig+0x27c>)
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	f013 0f02 	tst.w	r3, #2
 8009f60:	d0c7      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f62:	f7ff fc3b 	bl	80097dc <HAL_GetTick>
 8009f66:	1b40      	subs	r0, r0, r5
 8009f68:	2802      	cmp	r0, #2
 8009f6a:	d9f5      	bls.n	8009f58 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8009f6c:	2003      	movs	r0, #3
 8009f6e:	e0d2      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8009f70:	2500      	movs	r5, #0
 8009f72:	e7d3      	b.n	8009f1c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f74:	4a0b      	ldr	r2, [pc, #44]	; (8009fa4 <HAL_RCC_OscConfig+0x284>)
 8009f76:	6813      	ldr	r3, [r2, #0]
 8009f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f7c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009f7e:	f7ff fc2d 	bl	80097dc <HAL_GetTick>
 8009f82:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f84:	4b07      	ldr	r3, [pc, #28]	; (8009fa4 <HAL_RCC_OscConfig+0x284>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009f8c:	d1cb      	bne.n	8009f26 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f8e:	f7ff fc25 	bl	80097dc <HAL_GetTick>
 8009f92:	1b80      	subs	r0, r0, r6
 8009f94:	2864      	cmp	r0, #100	; 0x64
 8009f96:	d9f5      	bls.n	8009f84 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8009f98:	2003      	movs	r0, #3
 8009f9a:	e0bc      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
 8009f9c:	40021000 	.word	0x40021000
 8009fa0:	42420000 	.word	0x42420000
 8009fa4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fa8:	4a5f      	ldr	r2, [pc, #380]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 8009faa:	6a13      	ldr	r3, [r2, #32]
 8009fac:	f043 0301 	orr.w	r3, r3, #1
 8009fb0:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009fb2:	68e3      	ldr	r3, [r4, #12]
 8009fb4:	b333      	cbz	r3, 800a004 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8009fb6:	f7ff fc11 	bl	80097dc <HAL_GetTick>
 8009fba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fbc:	4b5a      	ldr	r3, [pc, #360]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	f013 0f02 	tst.w	r3, #2
 8009fc4:	d12f      	bne.n	800a026 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fc6:	f7ff fc09 	bl	80097dc <HAL_GetTick>
 8009fca:	1b80      	subs	r0, r0, r6
 8009fcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8009fd0:	4298      	cmp	r0, r3
 8009fd2:	d9f3      	bls.n	8009fbc <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8009fd4:	2003      	movs	r0, #3
 8009fd6:	e09e      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fd8:	2b05      	cmp	r3, #5
 8009fda:	d009      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x2d0>
 8009fdc:	4b52      	ldr	r3, [pc, #328]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 8009fde:	6a1a      	ldr	r2, [r3, #32]
 8009fe0:	f022 0201 	bic.w	r2, r2, #1
 8009fe4:	621a      	str	r2, [r3, #32]
 8009fe6:	6a1a      	ldr	r2, [r3, #32]
 8009fe8:	f022 0204 	bic.w	r2, r2, #4
 8009fec:	621a      	str	r2, [r3, #32]
 8009fee:	e7e0      	b.n	8009fb2 <HAL_RCC_OscConfig+0x292>
 8009ff0:	4b4d      	ldr	r3, [pc, #308]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 8009ff2:	6a1a      	ldr	r2, [r3, #32]
 8009ff4:	f042 0204 	orr.w	r2, r2, #4
 8009ff8:	621a      	str	r2, [r3, #32]
 8009ffa:	6a1a      	ldr	r2, [r3, #32]
 8009ffc:	f042 0201 	orr.w	r2, r2, #1
 800a000:	621a      	str	r2, [r3, #32]
 800a002:	e7d6      	b.n	8009fb2 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 800a004:	f7ff fbea 	bl	80097dc <HAL_GetTick>
 800a008:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a00a:	4b47      	ldr	r3, [pc, #284]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	f013 0f02 	tst.w	r3, #2
 800a012:	d008      	beq.n	800a026 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a014:	f7ff fbe2 	bl	80097dc <HAL_GetTick>
 800a018:	1b80      	subs	r0, r0, r6
 800a01a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a01e:	4298      	cmp	r0, r3
 800a020:	d9f3      	bls.n	800a00a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800a022:	2003      	movs	r0, #3
 800a024:	e077      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800a026:	b9e5      	cbnz	r5, 800a062 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a028:	69e3      	ldr	r3, [r4, #28]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d072      	beq.n	800a114 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a02e:	4a3e      	ldr	r2, [pc, #248]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 800a030:	6852      	ldr	r2, [r2, #4]
 800a032:	f002 020c 	and.w	r2, r2, #12
 800a036:	2a08      	cmp	r2, #8
 800a038:	d056      	beq.n	800a0e8 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d017      	beq.n	800a06e <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800a03e:	4b3b      	ldr	r3, [pc, #236]	; (800a12c <HAL_RCC_OscConfig+0x40c>)
 800a040:	2200      	movs	r2, #0
 800a042:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a044:	f7ff fbca 	bl	80097dc <HAL_GetTick>
 800a048:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a04a:	4b37      	ldr	r3, [pc, #220]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a052:	d047      	beq.n	800a0e4 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a054:	f7ff fbc2 	bl	80097dc <HAL_GetTick>
 800a058:	1b00      	subs	r0, r0, r4
 800a05a:	2802      	cmp	r0, #2
 800a05c:	d9f5      	bls.n	800a04a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800a05e:	2003      	movs	r0, #3
 800a060:	e059      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a062:	4a31      	ldr	r2, [pc, #196]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 800a064:	69d3      	ldr	r3, [r2, #28]
 800a066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a06a:	61d3      	str	r3, [r2, #28]
 800a06c:	e7dc      	b.n	800a028 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800a06e:	4b2f      	ldr	r3, [pc, #188]	; (800a12c <HAL_RCC_OscConfig+0x40c>)
 800a070:	2200      	movs	r2, #0
 800a072:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a074:	f7ff fbb2 	bl	80097dc <HAL_GetTick>
 800a078:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a07a:	4b2b      	ldr	r3, [pc, #172]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a082:	d006      	beq.n	800a092 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a084:	f7ff fbaa 	bl	80097dc <HAL_GetTick>
 800a088:	1b40      	subs	r0, r0, r5
 800a08a:	2802      	cmp	r0, #2
 800a08c:	d9f5      	bls.n	800a07a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800a08e:	2003      	movs	r0, #3
 800a090:	e041      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a092:	6a23      	ldr	r3, [r4, #32]
 800a094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a098:	d01a      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a09a:	4923      	ldr	r1, [pc, #140]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 800a09c:	684b      	ldr	r3, [r1, #4]
 800a09e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800a0a2:	6a22      	ldr	r2, [r4, #32]
 800a0a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a0a6:	4302      	orrs	r2, r0
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800a0ac:	4b1f      	ldr	r3, [pc, #124]	; (800a12c <HAL_RCC_OscConfig+0x40c>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a0b2:	f7ff fb93 	bl	80097dc <HAL_GetTick>
 800a0b6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a0b8:	4b1b      	ldr	r3, [pc, #108]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a0c0:	d10e      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0c2:	f7ff fb8b 	bl	80097dc <HAL_GetTick>
 800a0c6:	1b00      	subs	r0, r0, r4
 800a0c8:	2802      	cmp	r0, #2
 800a0ca:	d9f5      	bls.n	800a0b8 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800a0cc:	2003      	movs	r0, #3
 800a0ce:	e022      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a0d0:	4a15      	ldr	r2, [pc, #84]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 800a0d2:	6853      	ldr	r3, [r2, #4]
 800a0d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a0d8:	68a1      	ldr	r1, [r4, #8]
 800a0da:	430b      	orrs	r3, r1
 800a0dc:	6053      	str	r3, [r2, #4]
 800a0de:	e7dc      	b.n	800a09a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e018      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	e016      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d016      	beq.n	800a11a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	; (800a128 <HAL_RCC_OscConfig+0x408>)
 800a0ee:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0f0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800a0f4:	6a22      	ldr	r2, [r4, #32]
 800a0f6:	4291      	cmp	r1, r2
 800a0f8:	d111      	bne.n	800a11e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a0fa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a0fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a100:	4293      	cmp	r3, r2
 800a102:	d10e      	bne.n	800a122 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 800a104:	2000      	movs	r0, #0
 800a106:	e006      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 800a108:	2001      	movs	r0, #1
}
 800a10a:	4770      	bx	lr
        return HAL_ERROR;
 800a10c:	2001      	movs	r0, #1
 800a10e:	e002      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800a110:	2001      	movs	r0, #1
 800a112:	e000      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 800a114:	2000      	movs	r0, #0
}
 800a116:	b002      	add	sp, #8
 800a118:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800a11a:	2001      	movs	r0, #1
 800a11c:	e7fb      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800a11e:	2001      	movs	r0, #1
 800a120:	e7f9      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
 800a122:	2001      	movs	r0, #1
 800a124:	e7f7      	b.n	800a116 <HAL_RCC_OscConfig+0x3f6>
 800a126:	bf00      	nop
 800a128:	40021000 	.word	0x40021000
 800a12c:	42420000 	.word	0x42420000

0800a130 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a130:	4b01      	ldr	r3, [pc, #4]	; (800a138 <HAL_RCC_EnableCSS+0x8>)
 800a132:	2201      	movs	r2, #1
 800a134:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800a136:	4770      	bx	lr
 800a138:	42420000 	.word	0x42420000

0800a13c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800a13c:	4b0f      	ldr	r3, [pc, #60]	; (800a17c <HAL_RCC_GetSysClockFreq+0x40>)
 800a13e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800a140:	f003 020c 	and.w	r2, r3, #12
 800a144:	2a08      	cmp	r2, #8
 800a146:	d001      	beq.n	800a14c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 800a148:	480d      	ldr	r0, [pc, #52]	; (800a180 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800a14a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a14c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800a150:	490c      	ldr	r1, [pc, #48]	; (800a184 <HAL_RCC_GetSysClockFreq+0x48>)
 800a152:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a154:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a158:	d00b      	beq.n	800a172 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a15a:	4b08      	ldr	r3, [pc, #32]	; (800a17c <HAL_RCC_GetSysClockFreq+0x40>)
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800a162:	4a09      	ldr	r2, [pc, #36]	; (800a188 <HAL_RCC_GetSysClockFreq+0x4c>)
 800a164:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a166:	4a06      	ldr	r2, [pc, #24]	; (800a180 <HAL_RCC_GetSysClockFreq+0x44>)
 800a168:	fb02 f000 	mul.w	r0, r2, r0
 800a16c:	fbb0 f0f3 	udiv	r0, r0, r3
 800a170:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a172:	4b06      	ldr	r3, [pc, #24]	; (800a18c <HAL_RCC_GetSysClockFreq+0x50>)
 800a174:	fb03 f000 	mul.w	r0, r3, r0
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	40021000 	.word	0x40021000
 800a180:	007a1200 	.word	0x007a1200
 800a184:	0800bb78 	.word	0x0800bb78
 800a188:	0800bb88 	.word	0x0800bb88
 800a18c:	003d0900 	.word	0x003d0900

0800a190 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800a190:	2800      	cmp	r0, #0
 800a192:	f000 80a0 	beq.w	800a2d6 <HAL_RCC_ClockConfig+0x146>
{
 800a196:	b570      	push	{r4, r5, r6, lr}
 800a198:	460d      	mov	r5, r1
 800a19a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a19c:	4b52      	ldr	r3, [pc, #328]	; (800a2e8 <HAL_RCC_ClockConfig+0x158>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0307 	and.w	r3, r3, #7
 800a1a4:	428b      	cmp	r3, r1
 800a1a6:	d20b      	bcs.n	800a1c0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1a8:	4a4f      	ldr	r2, [pc, #316]	; (800a2e8 <HAL_RCC_ClockConfig+0x158>)
 800a1aa:	6813      	ldr	r3, [r2, #0]
 800a1ac:	f023 0307 	bic.w	r3, r3, #7
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1b4:	6813      	ldr	r3, [r2, #0]
 800a1b6:	f003 0307 	and.w	r3, r3, #7
 800a1ba:	428b      	cmp	r3, r1
 800a1bc:	f040 808d 	bne.w	800a2da <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	f013 0f02 	tst.w	r3, #2
 800a1c6:	d017      	beq.n	800a1f8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1c8:	f013 0f04 	tst.w	r3, #4
 800a1cc:	d004      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1ce:	4a47      	ldr	r2, [pc, #284]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a1d0:	6853      	ldr	r3, [r2, #4]
 800a1d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a1d6:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	f013 0f08 	tst.w	r3, #8
 800a1de:	d004      	beq.n	800a1ea <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a1e0:	4a42      	ldr	r2, [pc, #264]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a1e2:	6853      	ldr	r3, [r2, #4]
 800a1e4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a1e8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1ea:	4a40      	ldr	r2, [pc, #256]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a1ec:	6853      	ldr	r3, [r2, #4]
 800a1ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1f2:	68a1      	ldr	r1, [r4, #8]
 800a1f4:	430b      	orrs	r3, r1
 800a1f6:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	f013 0f01 	tst.w	r3, #1
 800a1fe:	d031      	beq.n	800a264 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a200:	6863      	ldr	r3, [r4, #4]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d020      	beq.n	800a248 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a206:	2b02      	cmp	r3, #2
 800a208:	d025      	beq.n	800a256 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a20a:	4a38      	ldr	r2, [pc, #224]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a20c:	6812      	ldr	r2, [r2, #0]
 800a20e:	f012 0f02 	tst.w	r2, #2
 800a212:	d064      	beq.n	800a2de <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a214:	4935      	ldr	r1, [pc, #212]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a216:	684a      	ldr	r2, [r1, #4]
 800a218:	f022 0203 	bic.w	r2, r2, #3
 800a21c:	4313      	orrs	r3, r2
 800a21e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800a220:	f7ff fadc 	bl	80097dc <HAL_GetTick>
 800a224:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a226:	4b31      	ldr	r3, [pc, #196]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f003 030c 	and.w	r3, r3, #12
 800a22e:	6862      	ldr	r2, [r4, #4]
 800a230:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a234:	d016      	beq.n	800a264 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a236:	f7ff fad1 	bl	80097dc <HAL_GetTick>
 800a23a:	1b80      	subs	r0, r0, r6
 800a23c:	f241 3388 	movw	r3, #5000	; 0x1388
 800a240:	4298      	cmp	r0, r3
 800a242:	d9f0      	bls.n	800a226 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800a244:	2003      	movs	r0, #3
 800a246:	e045      	b.n	800a2d4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a248:	4a28      	ldr	r2, [pc, #160]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a24a:	6812      	ldr	r2, [r2, #0]
 800a24c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800a250:	d1e0      	bne.n	800a214 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800a252:	2001      	movs	r0, #1
 800a254:	e03e      	b.n	800a2d4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a256:	4a25      	ldr	r2, [pc, #148]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a258:	6812      	ldr	r2, [r2, #0]
 800a25a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800a25e:	d1d9      	bne.n	800a214 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800a260:	2001      	movs	r0, #1
 800a262:	e037      	b.n	800a2d4 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a264:	4b20      	ldr	r3, [pc, #128]	; (800a2e8 <HAL_RCC_ClockConfig+0x158>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	42ab      	cmp	r3, r5
 800a26e:	d90a      	bls.n	800a286 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a270:	4a1d      	ldr	r2, [pc, #116]	; (800a2e8 <HAL_RCC_ClockConfig+0x158>)
 800a272:	6813      	ldr	r3, [r2, #0]
 800a274:	f023 0307 	bic.w	r3, r3, #7
 800a278:	432b      	orrs	r3, r5
 800a27a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a27c:	6813      	ldr	r3, [r2, #0]
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	42ab      	cmp	r3, r5
 800a284:	d12d      	bne.n	800a2e2 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	f013 0f04 	tst.w	r3, #4
 800a28c:	d006      	beq.n	800a29c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a28e:	4a17      	ldr	r2, [pc, #92]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a290:	6853      	ldr	r3, [r2, #4]
 800a292:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a296:	68e1      	ldr	r1, [r4, #12]
 800a298:	430b      	orrs	r3, r1
 800a29a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	f013 0f08 	tst.w	r3, #8
 800a2a2:	d007      	beq.n	800a2b4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a2a4:	4a11      	ldr	r2, [pc, #68]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a2a6:	6853      	ldr	r3, [r2, #4]
 800a2a8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a2ac:	6921      	ldr	r1, [r4, #16]
 800a2ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a2b2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a2b4:	f7ff ff42 	bl	800a13c <HAL_RCC_GetSysClockFreq>
 800a2b8:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <HAL_RCC_ClockConfig+0x15c>)
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a2c0:	4a0b      	ldr	r2, [pc, #44]	; (800a2f0 <HAL_RCC_ClockConfig+0x160>)
 800a2c2:	5cd3      	ldrb	r3, [r2, r3]
 800a2c4:	40d8      	lsrs	r0, r3
 800a2c6:	4b0b      	ldr	r3, [pc, #44]	; (800a2f4 <HAL_RCC_ClockConfig+0x164>)
 800a2c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <HAL_RCC_ClockConfig+0x168>)
 800a2cc:	6818      	ldr	r0, [r3, #0]
 800a2ce:	f7ff fa41 	bl	8009754 <HAL_InitTick>
  return HAL_OK;
 800a2d2:	2000      	movs	r0, #0
}
 800a2d4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a2d6:	2001      	movs	r0, #1
}
 800a2d8:	4770      	bx	lr
    return HAL_ERROR;
 800a2da:	2001      	movs	r0, #1
 800a2dc:	e7fa      	b.n	800a2d4 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800a2de:	2001      	movs	r0, #1
 800a2e0:	e7f8      	b.n	800a2d4 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	e7f6      	b.n	800a2d4 <HAL_RCC_ClockConfig+0x144>
 800a2e6:	bf00      	nop
 800a2e8:	40022000 	.word	0x40022000
 800a2ec:	40021000 	.word	0x40021000
 800a2f0:	0800bb60 	.word	0x0800bb60
 800a2f4:	20000040 	.word	0x20000040
 800a2f8:	20000048 	.word	0x20000048

0800a2fc <HAL_RCC_GetHCLKFreq>:
}
 800a2fc:	4b01      	ldr	r3, [pc, #4]	; (800a304 <HAL_RCC_GetHCLKFreq+0x8>)
 800a2fe:	6818      	ldr	r0, [r3, #0]
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	20000040 	.word	0x20000040

0800a308 <HAL_RCC_GetPCLK1Freq>:
{
 800a308:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a30a:	f7ff fff7 	bl	800a2fc <HAL_RCC_GetHCLKFreq>
 800a30e:	4b04      	ldr	r3, [pc, #16]	; (800a320 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a316:	4a03      	ldr	r2, [pc, #12]	; (800a324 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a318:	5cd3      	ldrb	r3, [r2, r3]
}
 800a31a:	40d8      	lsrs	r0, r3
 800a31c:	bd08      	pop	{r3, pc}
 800a31e:	bf00      	nop
 800a320:	40021000 	.word	0x40021000
 800a324:	0800bb70 	.word	0x0800bb70

0800a328 <HAL_RCC_GetPCLK2Freq>:
{
 800a328:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a32a:	f7ff ffe7 	bl	800a2fc <HAL_RCC_GetHCLKFreq>
 800a32e:	4b04      	ldr	r3, [pc, #16]	; (800a340 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a336:	4a03      	ldr	r2, [pc, #12]	; (800a344 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a338:	5cd3      	ldrb	r3, [r2, r3]
}
 800a33a:	40d8      	lsrs	r0, r3
 800a33c:	bd08      	pop	{r3, pc}
 800a33e:	bf00      	nop
 800a340:	40021000 	.word	0x40021000
 800a344:	0800bb70 	.word	0x0800bb70

0800a348 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800a348:	4770      	bx	lr
	...

0800a34c <HAL_RCC_NMI_IRQHandler>:
{
 800a34c:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a34e:	4b06      	ldr	r3, [pc, #24]	; (800a368 <HAL_RCC_NMI_IRQHandler+0x1c>)
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a356:	d100      	bne.n	800a35a <HAL_RCC_NMI_IRQHandler+0xe>
}
 800a358:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 800a35a:	f7ff fff5 	bl	800a348 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a35e:	4b02      	ldr	r3, [pc, #8]	; (800a368 <HAL_RCC_NMI_IRQHandler+0x1c>)
 800a360:	2280      	movs	r2, #128	; 0x80
 800a362:	729a      	strb	r2, [r3, #10]
}
 800a364:	e7f8      	b.n	800a358 <HAL_RCC_NMI_IRQHandler+0xc>
 800a366:	bf00      	nop
 800a368:	40021000 	.word	0x40021000

0800a36c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a372:	6803      	ldr	r3, [r0, #0]
 800a374:	f013 0f01 	tst.w	r3, #1
 800a378:	d036      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a37a:	4b3f      	ldr	r3, [pc, #252]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800a382:	d149      	bne.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a384:	4b3c      	ldr	r3, [pc, #240]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800a386:	69da      	ldr	r2, [r3, #28]
 800a388:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a38c:	61da      	str	r2, [r3, #28]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a398:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a39a:	4b38      	ldr	r3, [pc, #224]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a3a2:	d03b      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a3a4:	4b34      	ldr	r3, [pc, #208]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a3a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800a3ac:	d013      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a3ae:	6862      	ldr	r2, [r4, #4]
 800a3b0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d00e      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3b8:	4a2f      	ldr	r2, [pc, #188]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800a3ba:	6a13      	ldr	r3, [r2, #32]
 800a3bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a3c0:	492f      	ldr	r1, [pc, #188]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800a3c2:	2601      	movs	r6, #1
 800a3c4:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a3c8:	2600      	movs	r6, #0
 800a3ca:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a3ce:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a3d0:	f013 0f01 	tst.w	r3, #1
 800a3d4:	d136      	bne.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a3d6:	4a28      	ldr	r2, [pc, #160]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800a3d8:	6a13      	ldr	r3, [r2, #32]
 800a3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3de:	6861      	ldr	r1, [r4, #4]
 800a3e0:	430b      	orrs	r3, r1
 800a3e2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a3e4:	2d00      	cmp	r5, #0
 800a3e6:	d13e      	bne.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	f013 0f02 	tst.w	r3, #2
 800a3ee:	d006      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3f0:	4a21      	ldr	r2, [pc, #132]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800a3f2:	6853      	ldr	r3, [r2, #4]
 800a3f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a3f8:	68a1      	ldr	r1, [r4, #8]
 800a3fa:	430b      	orrs	r3, r1
 800a3fc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	f013 0f10 	tst.w	r3, #16
 800a404:	d034      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a406:	4a1c      	ldr	r2, [pc, #112]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800a408:	6853      	ldr	r3, [r2, #4]
 800a40a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a40e:	68e1      	ldr	r1, [r4, #12]
 800a410:	430b      	orrs	r3, r1
 800a412:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a414:	2000      	movs	r0, #0
 800a416:	e02c      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 800a418:	2500      	movs	r5, #0
 800a41a:	e7be      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a41c:	4a17      	ldr	r2, [pc, #92]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800a41e:	6813      	ldr	r3, [r2, #0]
 800a420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a424:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a426:	f7ff f9d9 	bl	80097dc <HAL_GetTick>
 800a42a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a42c:	4b13      	ldr	r3, [pc, #76]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a434:	d1b6      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a436:	f7ff f9d1 	bl	80097dc <HAL_GetTick>
 800a43a:	1b80      	subs	r0, r0, r6
 800a43c:	2864      	cmp	r0, #100	; 0x64
 800a43e:	d9f5      	bls.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 800a440:	2003      	movs	r0, #3
 800a442:	e016      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 800a444:	f7ff f9ca 	bl	80097dc <HAL_GetTick>
 800a448:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a44a:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	f013 0f02 	tst.w	r3, #2
 800a452:	d1c0      	bne.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a454:	f7ff f9c2 	bl	80097dc <HAL_GetTick>
 800a458:	1b80      	subs	r0, r0, r6
 800a45a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a45e:	4298      	cmp	r0, r3
 800a460:	d9f3      	bls.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 800a462:	2003      	movs	r0, #3
 800a464:	e005      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a466:	69d3      	ldr	r3, [r2, #28]
 800a468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a46c:	61d3      	str	r3, [r2, #28]
 800a46e:	e7bb      	b.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 800a470:	2000      	movs	r0, #0
}
 800a472:	b002      	add	sp, #8
 800a474:	bd70      	pop	{r4, r5, r6, pc}
 800a476:	bf00      	nop
 800a478:	40021000 	.word	0x40021000
 800a47c:	40007000 	.word	0x40007000
 800a480:	42420000 	.word	0x42420000

0800a484 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a484:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800a486:	2802      	cmp	r0, #2
 800a488:	d04e      	beq.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800a48a:	2810      	cmp	r0, #16
 800a48c:	d003      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 800a48e:	2801      	cmp	r0, #1
 800a490:	d028      	beq.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800a492:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 800a494:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 800a496:	4b2b      	ldr	r3, [pc, #172]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800a498:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800a4a0:	d0f8      	beq.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a4a2:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800a4a6:	4928      	ldr	r1, [pc, #160]	; (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 800a4a8:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a4aa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800a4ae:	d015      	beq.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a4b0:	4b24      	ldr	r3, [pc, #144]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800a4b8:	4a24      	ldr	r2, [pc, #144]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800a4ba:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800a4bc:	4b24      	ldr	r3, [pc, #144]	; (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 800a4be:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4c2:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800a4c6:	4b1f      	ldr	r3, [pc, #124]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a4ce:	d1e1      	bne.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 800a4d0:	0040      	lsls	r0, r0, #1
 800a4d2:	4b20      	ldr	r3, [pc, #128]	; (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 800a4d4:	fba3 3000 	umull	r3, r0, r3, r0
 800a4d8:	0840      	lsrs	r0, r0, #1
 800a4da:	e7db      	b.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a4dc:	4b1e      	ldr	r3, [pc, #120]	; (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 800a4de:	fb03 f000 	mul.w	r0, r3, r0
 800a4e2:	e7f0      	b.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 800a4e4:	4b17      	ldr	r3, [pc, #92]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800a4e8:	f240 3202 	movw	r2, #770	; 0x302
 800a4ec:	401a      	ands	r2, r3
 800a4ee:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800a4f2:	d024      	beq.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800a4f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4fc:	d004      	beq.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800a4fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a502:	d009      	beq.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 800a504:	2000      	movs	r0, #0
 800a506:	e7c5      	b.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800a508:	4a0e      	ldr	r2, [pc, #56]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800a50a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a50c:	f012 0f02 	tst.w	r2, #2
 800a510:	d0f5      	beq.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 800a512:	f649 4040 	movw	r0, #40000	; 0x9c40
 800a516:	e7bd      	b.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800a518:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800a51a:	6818      	ldr	r0, [r3, #0]
 800a51c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a520:	d0b8      	beq.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = HSE_VALUE / 128U;
 800a522:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 800a526:	e7b5      	b.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800a528:	f7ff fefe 	bl	800a328 <HAL_RCC_GetPCLK2Freq>
 800a52c:	4b05      	ldr	r3, [pc, #20]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800a534:	3301      	adds	r3, #1
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800a53c:	e7aa      	b.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 800a53e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a542:	e7a7      	b.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800a544:	40021000 	.word	0x40021000
 800a548:	0800bb8c 	.word	0x0800bb8c
 800a54c:	0800bb9c 	.word	0x0800bb9c
 800a550:	007a1200 	.word	0x007a1200
 800a554:	aaaaaaab 	.word	0xaaaaaaab
 800a558:	003d0900 	.word	0x003d0900

0800a55c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800a55c:	b410      	push	{r4}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800a55e:	6802      	ldr	r2, [r0, #0]
 800a560:	6994      	ldr	r4, [r2, #24]
 800a562:	fa1f fc84 	uxth.w	ip, r4
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800a566:	69d3      	ldr	r3, [r2, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800a568:	6991      	ldr	r1, [r2, #24]
 800a56a:	b288      	uxth	r0, r1

  if (high1 != high2)
 800a56c:	4584      	cmp	ip, r0
 800a56e:	d005      	beq.n	800a57c <RTC_ReadTimeCounter+0x20>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800a570:	69d0      	ldr	r0, [r2, #28]
 800a572:	b280      	uxth	r0, r0
 800a574:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 800a578:	bc10      	pop	{r4}
 800a57a:	4770      	bx	lr
    timecounter = (((uint32_t) high1 << 16U) | low);
 800a57c:	b298      	uxth	r0, r3
 800a57e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
  return timecounter;
 800a582:	e7f9      	b.n	800a578 <RTC_ReadTimeCounter+0x1c>

0800a584 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800a584:	6803      	ldr	r3, [r0, #0]
 800a586:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800a588:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 800a58a:	b29b      	uxth	r3, r3
}
 800a58c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a590:	4770      	bx	lr

0800a592 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800a592:	0903      	lsrs	r3, r0, #4
 800a594:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800a598:	f000 000f 	and.w	r0, r0, #15
 800a59c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800a5a0:	b2c0      	uxtb	r0, r0
 800a5a2:	4770      	bx	lr

0800a5a4 <RTC_WeekDayNum>:
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 800a5a4:	f500 6cfa 	add.w	ip, r0, #2000	; 0x7d0

  if (nMonth < 3U)
 800a5a8:	2902      	cmp	r1, #2
 800a5aa:	d821      	bhi.n	800a5f0 <RTC_WeekDayNum+0x4c>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800a5ac:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800a5b0:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 800a5b4:	4b1e      	ldr	r3, [pc, #120]	; (800a630 <RTC_WeekDayNum+0x8c>)
 800a5b6:	fba3 1301 	umull	r1, r3, r3, r1
 800a5ba:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 800a5be:	4463      	add	r3, ip
 800a5c0:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 800a5c4:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 800a5c8:	4a1a      	ldr	r2, [pc, #104]	; (800a634 <RTC_WeekDayNum+0x90>)
 800a5ca:	fba2 2000 	umull	r2, r0, r2, r0
 800a5ce:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 800a5d2:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	4817      	ldr	r0, [pc, #92]	; (800a638 <RTC_WeekDayNum+0x94>)
 800a5da:	fba0 2003 	umull	r2, r0, r0, r3
 800a5de:	1a1a      	subs	r2, r3, r0
 800a5e0:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800a5e4:	0880      	lsrs	r0, r0, #2
 800a5e6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800a5ea:	1a18      	subs	r0, r3, r0
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
  }

  return (uint8_t)weekday;
}
 800a5ec:	b2c0      	uxtb	r0, r0
 800a5ee:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800a5f0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800a5f4:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 800a5f8:	4b0d      	ldr	r3, [pc, #52]	; (800a630 <RTC_WeekDayNum+0x8c>)
 800a5fa:	fba3 1301 	umull	r1, r3, r3, r1
 800a5fe:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 800a602:	4463      	add	r3, ip
 800a604:	eb03 039c 	add.w	r3, r3, ip, lsr #2
 800a608:	4a0a      	ldr	r2, [pc, #40]	; (800a634 <RTC_WeekDayNum+0x90>)
 800a60a:	fba2 2c0c 	umull	r2, ip, r2, ip
 800a60e:	eba3 135c 	sub.w	r3, r3, ip, lsr #5
 800a612:	eb03 13dc 	add.w	r3, r3, ip, lsr #7
 800a616:	3302      	adds	r3, #2
 800a618:	4807      	ldr	r0, [pc, #28]	; (800a638 <RTC_WeekDayNum+0x94>)
 800a61a:	fba0 2003 	umull	r2, r0, r0, r3
 800a61e:	1a1a      	subs	r2, r3, r0
 800a620:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800a624:	0880      	lsrs	r0, r0, #2
 800a626:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800a62a:	1a18      	subs	r0, r3, r0
 800a62c:	e7de      	b.n	800a5ec <RTC_WeekDayNum+0x48>
 800a62e:	bf00      	nop
 800a630:	38e38e39 	.word	0x38e38e39
 800a634:	51eb851f 	.word	0x51eb851f
 800a638:	24924925 	.word	0x24924925

0800a63c <RTC_EnterInitMode>:
{
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800a640:	f7ff f8cc 	bl	80097dc <HAL_GetTick>
 800a644:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	f012 0f20 	tst.w	r2, #32
 800a64e:	d107      	bne.n	800a660 <RTC_EnterInitMode+0x24>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a650:	f7ff f8c4 	bl	80097dc <HAL_GetTick>
 800a654:	1b40      	subs	r0, r0, r5
 800a656:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a65a:	d9f4      	bls.n	800a646 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800a65c:	2003      	movs	r0, #3
 800a65e:	e004      	b.n	800a66a <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	f042 0210 	orr.w	r2, r2, #16
 800a666:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 800a668:	2000      	movs	r0, #0
}
 800a66a:	bd38      	pop	{r3, r4, r5, pc}

0800a66c <RTC_ExitInitMode>:
{
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a670:	6802      	ldr	r2, [r0, #0]
 800a672:	6853      	ldr	r3, [r2, #4]
 800a674:	f023 0310 	bic.w	r3, r3, #16
 800a678:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800a67a:	f7ff f8af 	bl	80097dc <HAL_GetTick>
 800a67e:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a680:	6823      	ldr	r3, [r4, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f013 0f20 	tst.w	r3, #32
 800a688:	d107      	bne.n	800a69a <RTC_ExitInitMode+0x2e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a68a:	f7ff f8a7 	bl	80097dc <HAL_GetTick>
 800a68e:	1b40      	subs	r0, r0, r5
 800a690:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a694:	d9f4      	bls.n	800a680 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 800a696:	2003      	movs	r0, #3
 800a698:	e000      	b.n	800a69c <RTC_ExitInitMode+0x30>
  return HAL_OK;
 800a69a:	2000      	movs	r0, #0
}
 800a69c:	bd38      	pop	{r3, r4, r5, pc}

0800a69e <RTC_WriteTimeCounter>:
{
 800a69e:	b538      	push	{r3, r4, r5, lr}
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a6a4:	f7ff ffca 	bl	800a63c <RTC_EnterInitMode>
 800a6a8:	b108      	cbz	r0, 800a6ae <RTC_WriteTimeCounter+0x10>
    status = HAL_ERROR;
 800a6aa:	2001      	movs	r0, #1
}
 800a6ac:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800a6ae:	682b      	ldr	r3, [r5, #0]
 800a6b0:	0c22      	lsrs	r2, r4, #16
 800a6b2:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	b2a4      	uxth	r4, r4
 800a6b8:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f7ff ffd6 	bl	800a66c <RTC_ExitInitMode>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d0f3      	beq.n	800a6ac <RTC_WriteTimeCounter+0xe>
      status = HAL_ERROR;
 800a6c4:	2001      	movs	r0, #1
 800a6c6:	e7f1      	b.n	800a6ac <RTC_WriteTimeCounter+0xe>

0800a6c8 <RTC_WriteAlarmCounter>:
{
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a6ce:	f7ff ffb5 	bl	800a63c <RTC_EnterInitMode>
 800a6d2:	b108      	cbz	r0, 800a6d8 <RTC_WriteAlarmCounter+0x10>
    status = HAL_ERROR;
 800a6d4:	2001      	movs	r0, #1
}
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	0c22      	lsrs	r2, r4, #16
 800a6dc:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800a6de:	682b      	ldr	r3, [r5, #0]
 800a6e0:	b2a4      	uxth	r4, r4
 800a6e2:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f7ff ffc1 	bl	800a66c <RTC_ExitInitMode>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d0f3      	beq.n	800a6d6 <RTC_WriteAlarmCounter+0xe>
      status = HAL_ERROR;
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	e7f1      	b.n	800a6d6 <RTC_WriteAlarmCounter+0xe>

0800a6f2 <HAL_RTC_SetTime>:
{
 800a6f2:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d057      	beq.n	800a7a8 <HAL_RTC_SetTime+0xb6>
 800a6f8:	460d      	mov	r5, r1
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	2900      	cmp	r1, #0
 800a6fe:	d055      	beq.n	800a7ac <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 800a700:	7c03      	ldrb	r3, [r0, #16]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d054      	beq.n	800a7b0 <HAL_RTC_SetTime+0xbe>
 800a706:	2301      	movs	r3, #1
 800a708:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a70a:	2302      	movs	r3, #2
 800a70c:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 800a70e:	b9ba      	cbnz	r2, 800a740 <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800a710:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 800a712:	784b      	ldrb	r3, [r1, #1]
 800a714:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800a718:	009c      	lsls	r4, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800a71a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a71e:	fb03 4400 	mla	r4, r3, r0, r4
                              ((uint32_t)sTime->Seconds));
 800a722:	7888      	ldrb	r0, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800a724:	4404      	add	r4, r0
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800a726:	4621      	mov	r1, r4
 800a728:	4630      	mov	r0, r6
 800a72a:	f7ff ffb8 	bl	800a69e <RTC_WriteTimeCounter>
 800a72e:	4605      	mov	r5, r0
 800a730:	b1c8      	cbz	r0, 800a766 <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a732:	2304      	movs	r3, #4
 800a734:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 800a736:	2300      	movs	r3, #0
 800a738:	7433      	strb	r3, [r6, #16]
    return HAL_ERROR;
 800a73a:	2501      	movs	r5, #1
}
 800a73c:	4628      	mov	r0, r5
 800a73e:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800a740:	7808      	ldrb	r0, [r1, #0]
 800a742:	f7ff ff26 	bl	800a592 <RTC_Bcd2ToByte>
 800a746:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 800a74a:	fb00 f404 	mul.w	r4, r0, r4
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800a74e:	7868      	ldrb	r0, [r5, #1]
 800a750:	f7ff ff1f 	bl	800a592 <RTC_Bcd2ToByte>
 800a754:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800a758:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800a75c:	78a8      	ldrb	r0, [r5, #2]
 800a75e:	f7ff ff18 	bl	800a592 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800a762:	4404      	add	r4, r0
 800a764:	e7df      	b.n	800a726 <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800a766:	6832      	ldr	r2, [r6, #0]
 800a768:	6853      	ldr	r3, [r2, #4]
 800a76a:	f023 0305 	bic.w	r3, r3, #5
 800a76e:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800a770:	4630      	mov	r0, r6
 800a772:	f7ff ff07 	bl	800a584 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800a776:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a77a:	d001      	beq.n	800a780 <HAL_RTC_SetTime+0x8e>
      if (counter_alarm < counter_time)
 800a77c:	4284      	cmp	r4, r0
 800a77e:	d804      	bhi.n	800a78a <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 800a780:	2301      	movs	r3, #1
 800a782:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 800a784:	2300      	movs	r3, #0
 800a786:	7433      	strb	r3, [r6, #16]
    return HAL_OK;
 800a788:	e7d8      	b.n	800a73c <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800a78a:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800a78e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800a792:	4630      	mov	r0, r6
 800a794:	f7ff ff98 	bl	800a6c8 <RTC_WriteAlarmCounter>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d0f1      	beq.n	800a780 <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800a79c:	2304      	movs	r3, #4
 800a79e:	7473      	strb	r3, [r6, #17]
          __HAL_UNLOCK(hrtc);
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	7433      	strb	r3, [r6, #16]
          return HAL_ERROR;
 800a7a4:	2501      	movs	r5, #1
 800a7a6:	e7c9      	b.n	800a73c <HAL_RTC_SetTime+0x4a>
    return HAL_ERROR;
 800a7a8:	2501      	movs	r5, #1
 800a7aa:	e7c7      	b.n	800a73c <HAL_RTC_SetTime+0x4a>
 800a7ac:	2501      	movs	r5, #1
 800a7ae:	e7c5      	b.n	800a73c <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 800a7b0:	2502      	movs	r5, #2
 800a7b2:	e7c3      	b.n	800a73c <HAL_RTC_SetTime+0x4a>

0800a7b4 <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d05a      	beq.n	800a86e <HAL_RTC_SetDate+0xba>
{
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	460d      	mov	r5, r1
 800a7bc:	4604      	mov	r4, r0
  if ((hrtc == NULL) || (sDate == NULL))
 800a7be:	2900      	cmp	r1, #0
 800a7c0:	d057      	beq.n	800a872 <HAL_RTC_SetDate+0xbe>
  __HAL_LOCK(hrtc);
 800a7c2:	7c03      	ldrb	r3, [r0, #16]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d056      	beq.n	800a876 <HAL_RTC_SetDate+0xc2>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 800a7d0:	b9ba      	cbnz	r2, 800a802 <HAL_RTC_SetDate+0x4e>
    hrtc->DateToUpdate.Year  = sDate->Year;
 800a7d2:	78cb      	ldrb	r3, [r1, #3]
 800a7d4:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800a7d6:	784b      	ldrb	r3, [r1, #1]
 800a7d8:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800a7da:	788b      	ldrb	r3, [r1, #2]
 800a7dc:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800a7de:	7ba2      	ldrb	r2, [r4, #14]
 800a7e0:	7b61      	ldrb	r1, [r4, #13]
 800a7e2:	7be0      	ldrb	r0, [r4, #15]
 800a7e4:	f7ff fede 	bl	800a5a4 <RTC_WeekDayNum>
 800a7e8:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800a7ea:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f7ff feb5 	bl	800a55c <RTC_ReadTimeCounter>
  if (hours > 24U)
 800a7f2:	4b22      	ldr	r3, [pc, #136]	; (800a87c <HAL_RTC_SetDate+0xc8>)
 800a7f4:	4298      	cmp	r0, r3
 800a7f6:	d811      	bhi.n	800a81c <HAL_RTC_SetDate+0x68>
  hrtc->State = HAL_RTC_STATE_READY ;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	7420      	strb	r0, [r4, #16]
}
 800a800:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800a802:	78c8      	ldrb	r0, [r1, #3]
 800a804:	f7ff fec5 	bl	800a592 <RTC_Bcd2ToByte>
 800a808:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800a80a:	7868      	ldrb	r0, [r5, #1]
 800a80c:	f7ff fec1 	bl	800a592 <RTC_Bcd2ToByte>
 800a810:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800a812:	78a8      	ldrb	r0, [r5, #2]
 800a814:	f7ff febd 	bl	800a592 <RTC_Bcd2ToByte>
 800a818:	73a0      	strb	r0, [r4, #14]
 800a81a:	e7e0      	b.n	800a7de <HAL_RTC_SetDate+0x2a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800a81c:	4d18      	ldr	r5, [pc, #96]	; (800a880 <HAL_RTC_SetDate+0xcc>)
 800a81e:	fba5 3500 	umull	r3, r5, r5, r0
 800a822:	0c2d      	lsrs	r5, r5, #16
 800a824:	4b17      	ldr	r3, [pc, #92]	; (800a884 <HAL_RTC_SetDate+0xd0>)
 800a826:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800a82a:	4629      	mov	r1, r5
 800a82c:	4620      	mov	r0, r4
 800a82e:	f7ff ff36 	bl	800a69e <RTC_WriteTimeCounter>
 800a832:	b128      	cbz	r0, 800a840 <HAL_RTC_SetDate+0x8c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a834:	2304      	movs	r3, #4
 800a836:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 800a838:	2300      	movs	r3, #0
 800a83a:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 800a83c:	2001      	movs	r0, #1
 800a83e:	e7df      	b.n	800a800 <HAL_RTC_SetDate+0x4c>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800a840:	4620      	mov	r0, r4
 800a842:	f7ff fe9f 	bl	800a584 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800a846:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a84a:	d0d5      	beq.n	800a7f8 <HAL_RTC_SetDate+0x44>
      if (counter_alarm < counter_time)
 800a84c:	4285      	cmp	r5, r0
 800a84e:	d9d3      	bls.n	800a7f8 <HAL_RTC_SetDate+0x44>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800a850:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800a854:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800a858:	4620      	mov	r0, r4
 800a85a:	f7ff ff35 	bl	800a6c8 <RTC_WriteAlarmCounter>
 800a85e:	2800      	cmp	r0, #0
 800a860:	d0ca      	beq.n	800a7f8 <HAL_RTC_SetDate+0x44>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800a862:	2304      	movs	r3, #4
 800a864:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 800a866:	2300      	movs	r3, #0
 800a868:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 800a86a:	2001      	movs	r0, #1
 800a86c:	e7c8      	b.n	800a800 <HAL_RTC_SetDate+0x4c>
    return HAL_ERROR;
 800a86e:	2001      	movs	r0, #1
}
 800a870:	4770      	bx	lr
    return HAL_ERROR;
 800a872:	2001      	movs	r0, #1
 800a874:	e7c4      	b.n	800a800 <HAL_RTC_SetDate+0x4c>
  __HAL_LOCK(hrtc);
 800a876:	2002      	movs	r0, #2
 800a878:	e7c2      	b.n	800a800 <HAL_RTC_SetDate+0x4c>
 800a87a:	bf00      	nop
 800a87c:	00015f8f 	.word	0x00015f8f
 800a880:	c22e4507 	.word	0xc22e4507
 800a884:	00015180 	.word	0x00015180

0800a888 <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 800a888:	b1c0      	cbz	r0, 800a8bc <HAL_RTC_WaitForSynchro+0x34>
{
 800a88a:	b538      	push	{r3, r4, r5, lr}
 800a88c:	4605      	mov	r5, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800a88e:	6802      	ldr	r2, [r0, #0]
 800a890:	6853      	ldr	r3, [r2, #4]
 800a892:	f023 0308 	bic.w	r3, r3, #8
 800a896:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800a898:	f7fe ffa0 	bl	80097dc <HAL_GetTick>
 800a89c:	4604      	mov	r4, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f013 0f08 	tst.w	r3, #8
 800a8a6:	d107      	bne.n	800a8b8 <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a8a8:	f7fe ff98 	bl	80097dc <HAL_GetTick>
 800a8ac:	1b00      	subs	r0, r0, r4
 800a8ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a8b2:	d9f4      	bls.n	800a89e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800a8b4:	2003      	movs	r0, #3
 800a8b6:	e000      	b.n	800a8ba <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 800a8b8:	2000      	movs	r0, #0
}
 800a8ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a8bc:	2001      	movs	r0, #1
}
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_RTC_Init>:
  if (hrtc == NULL)
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d050      	beq.n	800a966 <HAL_RTC_Init+0xa6>
{
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a8c8:	7c43      	ldrb	r3, [r0, #17]
 800a8ca:	b14b      	cbz	r3, 800a8e0 <HAL_RTC_Init+0x20>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f7ff ffd9 	bl	800a888 <HAL_RTC_WaitForSynchro>
 800a8d6:	b138      	cbz	r0, 800a8e8 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a8d8:	2304      	movs	r3, #4
 800a8da:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 800a8dc:	2001      	movs	r0, #1
}
 800a8de:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800a8e0:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800a8e2:	f7fe fa4d 	bl	8008d80 <HAL_RTC_MspInit>
 800a8e6:	e7f1      	b.n	800a8cc <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f7ff fea7 	bl	800a63c <RTC_EnterInitMode>
 800a8ee:	bb28      	cbnz	r0, 800a93c <HAL_RTC_Init+0x7c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800a8f0:	6822      	ldr	r2, [r4, #0]
 800a8f2:	6853      	ldr	r3, [r2, #4]
 800a8f4:	f023 0307 	bic.w	r3, r3, #7
 800a8f8:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800a8fa:	68a3      	ldr	r3, [r4, #8]
 800a8fc:	b123      	cbz	r3, 800a908 <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800a8fe:	4a1b      	ldr	r2, [pc, #108]	; (800a96c <HAL_RTC_Init+0xac>)
 800a900:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a902:	f023 0301 	bic.w	r3, r3, #1
 800a906:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800a908:	4a18      	ldr	r2, [pc, #96]	; (800a96c <HAL_RTC_Init+0xac>)
 800a90a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a90c:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800a910:	68a1      	ldr	r1, [r4, #8]
 800a912:	430b      	orrs	r3, r1
 800a914:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800a916:	6863      	ldr	r3, [r4, #4]
 800a918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91c:	d012      	beq.n	800a944 <HAL_RTC_Init+0x84>
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800a91e:	6822      	ldr	r2, [r4, #0]
 800a920:	f3c3 4103 	ubfx	r1, r3, #16, #4
 800a924:	6091      	str	r1, [r2, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	60d3      	str	r3, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800a92c:	4620      	mov	r0, r4
 800a92e:	f7ff fe9d 	bl	800a66c <RTC_ExitInitMode>
 800a932:	b188      	cbz	r0, 800a958 <HAL_RTC_Init+0x98>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a934:	2304      	movs	r3, #4
 800a936:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 800a938:	2001      	movs	r0, #1
 800a93a:	e7d0      	b.n	800a8de <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a93c:	2304      	movs	r3, #4
 800a93e:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 800a940:	2001      	movs	r0, #1
 800a942:	e7cc      	b.n	800a8de <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800a944:	2001      	movs	r0, #1
 800a946:	f7ff fd9d 	bl	800a484 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 800a94a:	b108      	cbz	r0, 800a950 <HAL_RTC_Init+0x90>
        prescaler = prescaler - 1U;
 800a94c:	1e43      	subs	r3, r0, #1
 800a94e:	e7e6      	b.n	800a91e <HAL_RTC_Init+0x5e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a950:	2304      	movs	r3, #4
 800a952:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 800a954:	2001      	movs	r0, #1
 800a956:	e7c2      	b.n	800a8de <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Year = 0x00U;
 800a958:	2300      	movs	r3, #0
 800a95a:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800a95c:	2301      	movs	r3, #1
 800a95e:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800a960:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800a962:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 800a964:	e7bb      	b.n	800a8de <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 800a966:	2001      	movs	r0, #1
}
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40006c00 	.word	0x40006c00

0800a970 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 800a970:	0089      	lsls	r1, r1, #2
 800a972:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800a976:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800a97a:	b292      	uxth	r2, r2
 800a97c:	600a      	str	r2, [r1, #0]
}
 800a97e:	4770      	bx	lr

0800a980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a980:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a982:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a984:	6a02      	ldr	r2, [r0, #32]
 800a986:	f022 0201 	bic.w	r2, r2, #1
 800a98a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a98c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a98e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a990:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a994:	680c      	ldr	r4, [r1, #0]
 800a996:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a99a:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a99e:	688b      	ldr	r3, [r1, #8]
 800a9a0:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9a2:	4c0d      	ldr	r4, [pc, #52]	; (800a9d8 <TIM_OC1_SetConfig+0x58>)
 800a9a4:	42a0      	cmp	r0, r4
 800a9a6:	d009      	beq.n	800a9bc <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9a8:	4c0b      	ldr	r4, [pc, #44]	; (800a9d8 <TIM_OC1_SetConfig+0x58>)
 800a9aa:	42a0      	cmp	r0, r4
 800a9ac:	d00d      	beq.n	800a9ca <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ae:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9b0:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9b2:	684a      	ldr	r2, [r1, #4]
 800a9b4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9b6:	6203      	str	r3, [r0, #32]
}
 800a9b8:	bc70      	pop	{r4, r5, r6}
 800a9ba:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9bc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800a9c0:	68ca      	ldr	r2, [r1, #12]
 800a9c2:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9c4:	f023 0304 	bic.w	r3, r3, #4
 800a9c8:	e7ee      	b.n	800a9a8 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9ca:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800a9ce:	694a      	ldr	r2, [r1, #20]
 800a9d0:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9d2:	698e      	ldr	r6, [r1, #24]
 800a9d4:	4316      	orrs	r6, r2
 800a9d6:	e7ea      	b.n	800a9ae <TIM_OC1_SetConfig+0x2e>
 800a9d8:	40012c00 	.word	0x40012c00

0800a9dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9de:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9e0:	6a02      	ldr	r2, [r0, #32]
 800a9e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9e6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9e8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9ea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9ec:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9f0:	680c      	ldr	r4, [r1, #0]
 800a9f2:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9f8:	688c      	ldr	r4, [r1, #8]
 800a9fa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9fe:	4c0f      	ldr	r4, [pc, #60]	; (800aa3c <TIM_OC3_SetConfig+0x60>)
 800aa00:	42a0      	cmp	r0, r4
 800aa02:	d009      	beq.n	800aa18 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa04:	4c0d      	ldr	r4, [pc, #52]	; (800aa3c <TIM_OC3_SetConfig+0x60>)
 800aa06:	42a0      	cmp	r0, r4
 800aa08:	d00e      	beq.n	800aa28 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa0a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa0c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa0e:	684a      	ldr	r2, [r1, #4]
 800aa10:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa12:	6203      	str	r3, [r0, #32]
}
 800aa14:	bc30      	pop	{r4, r5}
 800aa16:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa1c:	68cc      	ldr	r4, [r1, #12]
 800aa1e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa26:	e7ed      	b.n	800aa04 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa28:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa2c:	694c      	ldr	r4, [r1, #20]
 800aa2e:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa32:	698c      	ldr	r4, [r1, #24]
 800aa34:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 800aa38:	e7e7      	b.n	800aa0a <TIM_OC3_SetConfig+0x2e>
 800aa3a:	bf00      	nop
 800aa3c:	40012c00 	.word	0x40012c00

0800aa40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa40:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa42:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa44:	6a02      	ldr	r2, [r0, #32]
 800aa46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa4a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa4c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa4e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa50:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa54:	680d      	ldr	r5, [r1, #0]
 800aa56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa5e:	688d      	ldr	r5, [r1, #8]
 800aa60:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa64:	4d07      	ldr	r5, [pc, #28]	; (800aa84 <TIM_OC4_SetConfig+0x44>)
 800aa66:	42a8      	cmp	r0, r5
 800aa68:	d006      	beq.n	800aa78 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa6a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa6c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa6e:	684a      	ldr	r2, [r1, #4]
 800aa70:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa72:	6203      	str	r3, [r0, #32]
}
 800aa74:	bc30      	pop	{r4, r5}
 800aa76:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa78:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa7c:	694d      	ldr	r5, [r1, #20]
 800aa7e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800aa82:	e7f2      	b.n	800aa6a <TIM_OC4_SetConfig+0x2a>
 800aa84:	40012c00 	.word	0x40012c00

0800aa88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa88:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa8a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa8c:	6a04      	ldr	r4, [r0, #32]
 800aa8e:	f024 0401 	bic.w	r4, r4, #1
 800aa92:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa94:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa96:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa9a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa9e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800aaa2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aaa4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800aaa6:	6203      	str	r3, [r0, #32]
}
 800aaa8:	bc10      	pop	{r4}
 800aaaa:	4770      	bx	lr

0800aaac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aaac:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aaae:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aab0:	6a04      	ldr	r4, [r0, #32]
 800aab2:	f024 0410 	bic.w	r4, r4, #16
 800aab6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aab8:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aaba:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aabe:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aac2:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aac6:	031b      	lsls	r3, r3, #12
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aace:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aad2:	0109      	lsls	r1, r1, #4
 800aad4:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800aad8:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aada:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800aadc:	6201      	str	r1, [r0, #32]
}
 800aade:	bc30      	pop	{r4, r5}
 800aae0:	4770      	bx	lr

0800aae2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aae2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aae4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aae6:	6a04      	ldr	r4, [r0, #32]
 800aae8:	f024 0410 	bic.w	r4, r4, #16
 800aaec:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aaee:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aaf0:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aaf4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800aafc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab00:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ab02:	6203      	str	r3, [r0, #32]
}
 800ab04:	bc10      	pop	{r4}
 800ab06:	4770      	bx	lr

0800ab08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab08:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800ab0a:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab0c:	6a04      	ldr	r4, [r0, #32]
 800ab0e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800ab12:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab14:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ab16:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800ab1a:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ab1e:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ab22:	011b      	lsls	r3, r3, #4
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800ab2a:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800ab2e:	0209      	lsls	r1, r1, #8
 800ab30:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800ab34:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab36:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 800ab38:	6201      	str	r1, [r0, #32]
}
 800ab3a:	bc30      	pop	{r4, r5}
 800ab3c:	4770      	bx	lr

0800ab3e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab3e:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800ab40:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab42:	6a04      	ldr	r4, [r0, #32]
 800ab44:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800ab48:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab4a:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ab4c:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ab50:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ab54:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ab58:	031b      	lsls	r3, r3, #12
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800ab60:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800ab64:	0309      	lsls	r1, r1, #12
 800ab66:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800ab6a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab6c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800ab6e:	6201      	str	r1, [r0, #32]
}
 800ab70:	bc30      	pop	{r4, r5}
 800ab72:	4770      	bx	lr

0800ab74 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab74:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab7a:	430b      	orrs	r3, r1
 800ab7c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab80:	6083      	str	r3, [r0, #8]
}
 800ab82:	4770      	bx	lr

0800ab84 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800ab84:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d122      	bne.n	800abd4 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800ab8e:	2302      	movs	r3, #2
 800ab90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab94:	6803      	ldr	r3, [r0, #0]
 800ab96:	4a11      	ldr	r2, [pc, #68]	; (800abdc <HAL_TIM_Base_Start+0x58>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d010      	beq.n	800abbe <HAL_TIM_Base_Start+0x3a>
 800ab9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aba0:	d00d      	beq.n	800abbe <HAL_TIM_Base_Start+0x3a>
 800aba2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d009      	beq.n	800abbe <HAL_TIM_Base_Start+0x3a>
 800abaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abae:	4293      	cmp	r3, r2
 800abb0:	d005      	beq.n	800abbe <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	f042 0201 	orr.w	r2, r2, #1
 800abb8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800abba:	2000      	movs	r0, #0
 800abbc:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abbe:	689a      	ldr	r2, [r3, #8]
 800abc0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abc4:	2a06      	cmp	r2, #6
 800abc6:	d007      	beq.n	800abd8 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	f042 0201 	orr.w	r2, r2, #1
 800abce:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800abd0:	2000      	movs	r0, #0
 800abd2:	4770      	bx	lr
    return HAL_ERROR;
 800abd4:	2001      	movs	r0, #1
 800abd6:	4770      	bx	lr
  return HAL_OK;
 800abd8:	2000      	movs	r0, #0
}
 800abda:	4770      	bx	lr
 800abdc:	40012c00 	.word	0x40012c00

0800abe0 <HAL_TIM_PWM_MspInit>:
}
 800abe0:	4770      	bx	lr

0800abe2 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 800abe2:	290c      	cmp	r1, #12
 800abe4:	d814      	bhi.n	800ac10 <HAL_TIM_ReadCapturedValue+0x2e>
 800abe6:	e8df f001 	tbb	[pc, r1]
 800abea:	1307      	.short	0x1307
 800abec:	130a1313 	.word	0x130a1313
 800abf0:	130d1313 	.word	0x130d1313
 800abf4:	1313      	.short	0x1313
 800abf6:	10          	.byte	0x10
 800abf7:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800abf8:	6803      	ldr	r3, [r0, #0]
 800abfa:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800abfc:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800abfe:	6803      	ldr	r3, [r0, #0]
 800ac00:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800ac02:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800ac04:	6803      	ldr	r3, [r0, #0]
 800ac06:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800ac08:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 800ac0a:	6803      	ldr	r3, [r0, #0]
 800ac0c:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 800ac0e:	4770      	bx	lr
  switch (Channel)
 800ac10:	2000      	movs	r0, #0
}
 800ac12:	4770      	bx	lr

0800ac14 <HAL_TIM_PeriodElapsedCallback>:
}
 800ac14:	4770      	bx	lr

0800ac16 <HAL_TIM_OC_DelayElapsedCallback>:
}
 800ac16:	4770      	bx	lr

0800ac18 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800ac18:	4770      	bx	lr

0800ac1a <HAL_TIM_TriggerCallback>:
}
 800ac1a:	4770      	bx	lr

0800ac1c <HAL_TIM_IRQHandler>:
{
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac20:	6803      	ldr	r3, [r0, #0]
 800ac22:	691a      	ldr	r2, [r3, #16]
 800ac24:	f012 0f02 	tst.w	r2, #2
 800ac28:	d011      	beq.n	800ac4e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac2a:	68da      	ldr	r2, [r3, #12]
 800ac2c:	f012 0f02 	tst.w	r2, #2
 800ac30:	d00d      	beq.n	800ac4e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac32:	f06f 0202 	mvn.w	r2, #2
 800ac36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac3c:	6803      	ldr	r3, [r0, #0]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	f013 0f03 	tst.w	r3, #3
 800ac44:	d070      	beq.n	800ad28 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800ac46:	f7fe f9e7 	bl	8009018 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	691a      	ldr	r2, [r3, #16]
 800ac52:	f012 0f04 	tst.w	r2, #4
 800ac56:	d012      	beq.n	800ac7e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac58:	68da      	ldr	r2, [r3, #12]
 800ac5a:	f012 0f04 	tst.w	r2, #4
 800ac5e:	d00e      	beq.n	800ac7e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac60:	f06f 0204 	mvn.w	r2, #4
 800ac64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac66:	2302      	movs	r3, #2
 800ac68:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ac72:	d05f      	beq.n	800ad34 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800ac74:	4620      	mov	r0, r4
 800ac76:	f7fe f9cf 	bl	8009018 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	691a      	ldr	r2, [r3, #16]
 800ac82:	f012 0f08 	tst.w	r2, #8
 800ac86:	d012      	beq.n	800acae <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac88:	68da      	ldr	r2, [r3, #12]
 800ac8a:	f012 0f08 	tst.w	r2, #8
 800ac8e:	d00e      	beq.n	800acae <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac90:	f06f 0208 	mvn.w	r2, #8
 800ac94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac96:	2304      	movs	r3, #4
 800ac98:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	f013 0f03 	tst.w	r3, #3
 800aca2:	d04e      	beq.n	800ad42 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800aca4:	4620      	mov	r0, r4
 800aca6:	f7fe f9b7 	bl	8009018 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acaa:	2300      	movs	r3, #0
 800acac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	691a      	ldr	r2, [r3, #16]
 800acb2:	f012 0f10 	tst.w	r2, #16
 800acb6:	d012      	beq.n	800acde <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	f012 0f10 	tst.w	r2, #16
 800acbe:	d00e      	beq.n	800acde <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800acc0:	f06f 0210 	mvn.w	r2, #16
 800acc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acc6:	2308      	movs	r3, #8
 800acc8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	69db      	ldr	r3, [r3, #28]
 800acce:	f413 7f40 	tst.w	r3, #768	; 0x300
 800acd2:	d03d      	beq.n	800ad50 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800acd4:	4620      	mov	r0, r4
 800acd6:	f7fe f99f 	bl	8009018 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acda:	2300      	movs	r3, #0
 800acdc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	691a      	ldr	r2, [r3, #16]
 800ace2:	f012 0f01 	tst.w	r2, #1
 800ace6:	d003      	beq.n	800acf0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ace8:	68da      	ldr	r2, [r3, #12]
 800acea:	f012 0f01 	tst.w	r2, #1
 800acee:	d136      	bne.n	800ad5e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	691a      	ldr	r2, [r3, #16]
 800acf4:	f012 0f80 	tst.w	r2, #128	; 0x80
 800acf8:	d003      	beq.n	800ad02 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acfa:	68da      	ldr	r2, [r3, #12]
 800acfc:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ad00:	d134      	bne.n	800ad6c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	691a      	ldr	r2, [r3, #16]
 800ad06:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ad0a:	d003      	beq.n	800ad14 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad0c:	68da      	ldr	r2, [r3, #12]
 800ad0e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ad12:	d132      	bne.n	800ad7a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	691a      	ldr	r2, [r3, #16]
 800ad18:	f012 0f20 	tst.w	r2, #32
 800ad1c:	d003      	beq.n	800ad26 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad1e:	68da      	ldr	r2, [r3, #12]
 800ad20:	f012 0f20 	tst.w	r2, #32
 800ad24:	d130      	bne.n	800ad88 <HAL_TIM_IRQHandler+0x16c>
}
 800ad26:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad28:	f7ff ff75 	bl	800ac16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f7ff ff73 	bl	800ac18 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad32:	e78a      	b.n	800ac4a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad34:	4620      	mov	r0, r4
 800ad36:	f7ff ff6e 	bl	800ac16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f7ff ff6c 	bl	800ac18 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad40:	e79b      	b.n	800ac7a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad42:	4620      	mov	r0, r4
 800ad44:	f7ff ff67 	bl	800ac16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f7ff ff65 	bl	800ac18 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad4e:	e7ac      	b.n	800acaa <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad50:	4620      	mov	r0, r4
 800ad52:	f7ff ff60 	bl	800ac16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad56:	4620      	mov	r0, r4
 800ad58:	f7ff ff5e 	bl	800ac18 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad5c:	e7bd      	b.n	800acda <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad5e:	f06f 0201 	mvn.w	r2, #1
 800ad62:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad64:	4620      	mov	r0, r4
 800ad66:	f7ff ff55 	bl	800ac14 <HAL_TIM_PeriodElapsedCallback>
 800ad6a:	e7c1      	b.n	800acf0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad70:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 fbe5 	bl	800b542 <HAL_TIMEx_BreakCallback>
 800ad78:	e7c3      	b.n	800ad02 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ad80:	4620      	mov	r0, r4
 800ad82:	f7ff ff4a 	bl	800ac1a <HAL_TIM_TriggerCallback>
 800ad86:	e7c5      	b.n	800ad14 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad88:	f06f 0220 	mvn.w	r2, #32
 800ad8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f000 fbd6 	bl	800b540 <HAL_TIMEx_CommutCallback>
}
 800ad94:	e7c7      	b.n	800ad26 <HAL_TIM_IRQHandler+0x10a>
	...

0800ad98 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800ad98:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad9a:	4a1b      	ldr	r2, [pc, #108]	; (800ae08 <TIM_Base_SetConfig+0x70>)
 800ad9c:	4290      	cmp	r0, r2
 800ad9e:	d00a      	beq.n	800adb6 <TIM_Base_SetConfig+0x1e>
 800ada0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ada4:	d007      	beq.n	800adb6 <TIM_Base_SetConfig+0x1e>
 800ada6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800adaa:	4290      	cmp	r0, r2
 800adac:	d003      	beq.n	800adb6 <TIM_Base_SetConfig+0x1e>
 800adae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adb2:	4290      	cmp	r0, r2
 800adb4:	d103      	bne.n	800adbe <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800adb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800adba:	684a      	ldr	r2, [r1, #4]
 800adbc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adbe:	4a12      	ldr	r2, [pc, #72]	; (800ae08 <TIM_Base_SetConfig+0x70>)
 800adc0:	4290      	cmp	r0, r2
 800adc2:	d00a      	beq.n	800adda <TIM_Base_SetConfig+0x42>
 800adc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800adc8:	d007      	beq.n	800adda <TIM_Base_SetConfig+0x42>
 800adca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800adce:	4290      	cmp	r0, r2
 800add0:	d003      	beq.n	800adda <TIM_Base_SetConfig+0x42>
 800add2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800add6:	4290      	cmp	r0, r2
 800add8:	d103      	bne.n	800ade2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800adda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adde:	68ca      	ldr	r2, [r1, #12]
 800ade0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ade2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ade6:	694a      	ldr	r2, [r1, #20]
 800ade8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800adea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adec:	688b      	ldr	r3, [r1, #8]
 800adee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800adf0:	680b      	ldr	r3, [r1, #0]
 800adf2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adf4:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <TIM_Base_SetConfig+0x70>)
 800adf6:	4298      	cmp	r0, r3
 800adf8:	d002      	beq.n	800ae00 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800adfa:	2301      	movs	r3, #1
 800adfc:	6143      	str	r3, [r0, #20]
}
 800adfe:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800ae00:	690b      	ldr	r3, [r1, #16]
 800ae02:	6303      	str	r3, [r0, #48]	; 0x30
 800ae04:	e7f9      	b.n	800adfa <TIM_Base_SetConfig+0x62>
 800ae06:	bf00      	nop
 800ae08:	40012c00 	.word	0x40012c00

0800ae0c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800ae0c:	b340      	cbz	r0, 800ae60 <HAL_TIM_Base_Init+0x54>
{
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800ae12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ae16:	b1f3      	cbz	r3, 800ae56 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800ae18:	2302      	movs	r3, #2
 800ae1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae1e:	4621      	mov	r1, r4
 800ae20:	f851 0b04 	ldr.w	r0, [r1], #4
 800ae24:	f7ff ffb8 	bl	800ad98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800ae32:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ae36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ae3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ae4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800ae4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800ae52:	2000      	movs	r0, #0
}
 800ae54:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800ae56:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ae5a:	f7fe faed 	bl	8009438 <HAL_TIM_Base_MspInit>
 800ae5e:	e7db      	b.n	800ae18 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800ae60:	2001      	movs	r0, #1
}
 800ae62:	4770      	bx	lr

0800ae64 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800ae64:	b340      	cbz	r0, 800aeb8 <HAL_TIM_PWM_Init+0x54>
{
 800ae66:	b510      	push	{r4, lr}
 800ae68:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800ae6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ae6e:	b1f3      	cbz	r3, 800aeae <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800ae70:	2302      	movs	r3, #2
 800ae72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae76:	4621      	mov	r1, r4
 800ae78:	f851 0b04 	ldr.w	r0, [r1], #4
 800ae7c:	f7ff ff8c 	bl	800ad98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800ae8a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ae8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ae92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800aea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800aea6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800aeaa:	2000      	movs	r0, #0
}
 800aeac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800aeae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800aeb2:	f7ff fe95 	bl	800abe0 <HAL_TIM_PWM_MspInit>
 800aeb6:	e7db      	b.n	800ae70 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800aeb8:	2001      	movs	r0, #1
}
 800aeba:	4770      	bx	lr

0800aebc <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800aebc:	b340      	cbz	r0, 800af10 <HAL_TIM_IC_Init+0x54>
{
 800aebe:	b510      	push	{r4, lr}
 800aec0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800aec2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800aec6:	b1f3      	cbz	r3, 800af06 <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800aec8:	2302      	movs	r3, #2
 800aeca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aece:	4621      	mov	r1, r4
 800aed0:	f851 0b04 	ldr.w	r0, [r1], #4
 800aed4:	f7ff ff60 	bl	800ad98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aed8:	2301      	movs	r3, #1
 800aeda:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aede:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800aee2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800aee6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800aeea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aef6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800aefa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800aefe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800af02:	2000      	movs	r0, #0
}
 800af04:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800af06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800af0a:	f7fe fa55 	bl	80093b8 <HAL_TIM_IC_MspInit>
 800af0e:	e7db      	b.n	800aec8 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800af10:	2001      	movs	r0, #1
}
 800af12:	4770      	bx	lr

0800af14 <TIM_OC2_SetConfig>:
{
 800af14:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800af16:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af18:	6a02      	ldr	r2, [r0, #32]
 800af1a:	f022 0210 	bic.w	r2, r2, #16
 800af1e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800af20:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800af22:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af24:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af28:	680d      	ldr	r5, [r1, #0]
 800af2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800af2e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af32:	688d      	ldr	r5, [r1, #8]
 800af34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af38:	4d0e      	ldr	r5, [pc, #56]	; (800af74 <TIM_OC2_SetConfig+0x60>)
 800af3a:	42a8      	cmp	r0, r5
 800af3c:	d009      	beq.n	800af52 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af3e:	4d0d      	ldr	r5, [pc, #52]	; (800af74 <TIM_OC2_SetConfig+0x60>)
 800af40:	42a8      	cmp	r0, r5
 800af42:	d00e      	beq.n	800af62 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 800af44:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800af46:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800af48:	684a      	ldr	r2, [r1, #4]
 800af4a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800af4c:	6203      	str	r3, [r0, #32]
}
 800af4e:	bc30      	pop	{r4, r5}
 800af50:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800af52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af56:	68cd      	ldr	r5, [r1, #12]
 800af58:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800af5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af60:	e7ed      	b.n	800af3e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af62:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af66:	694d      	ldr	r5, [r1, #20]
 800af68:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af6c:	698d      	ldr	r5, [r1, #24]
 800af6e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800af72:	e7e7      	b.n	800af44 <TIM_OC2_SetConfig+0x30>
 800af74:	40012c00 	.word	0x40012c00

0800af78 <HAL_TIM_PWM_ConfigChannel>:
{
 800af78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800af7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d066      	beq.n	800b050 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800af82:	4604      	mov	r4, r0
 800af84:	460d      	mov	r5, r1
 800af86:	2301      	movs	r3, #1
 800af88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800af8c:	2a0c      	cmp	r2, #12
 800af8e:	d85a      	bhi.n	800b046 <HAL_TIM_PWM_ConfigChannel+0xce>
 800af90:	e8df f002 	tbb	[pc, r2]
 800af94:	59595907 	.word	0x59595907
 800af98:	5959591b 	.word	0x5959591b
 800af9c:	59595930 	.word	0x59595930
 800afa0:	44          	.byte	0x44
 800afa1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afa2:	6800      	ldr	r0, [r0, #0]
 800afa4:	f7ff fcec 	bl	800a980 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afa8:	6822      	ldr	r2, [r4, #0]
 800afaa:	6993      	ldr	r3, [r2, #24]
 800afac:	f043 0308 	orr.w	r3, r3, #8
 800afb0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afb2:	6822      	ldr	r2, [r4, #0]
 800afb4:	6993      	ldr	r3, [r2, #24]
 800afb6:	f023 0304 	bic.w	r3, r3, #4
 800afba:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afbc:	6822      	ldr	r2, [r4, #0]
 800afbe:	6993      	ldr	r3, [r2, #24]
 800afc0:	6929      	ldr	r1, [r5, #16]
 800afc2:	430b      	orrs	r3, r1
 800afc4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800afc6:	2000      	movs	r0, #0
      break;
 800afc8:	e03e      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afca:	6800      	ldr	r0, [r0, #0]
 800afcc:	f7ff ffa2 	bl	800af14 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afd0:	6822      	ldr	r2, [r4, #0]
 800afd2:	6993      	ldr	r3, [r2, #24]
 800afd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800afd8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800afda:	6822      	ldr	r2, [r4, #0]
 800afdc:	6993      	ldr	r3, [r2, #24]
 800afde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800afe2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afe4:	6822      	ldr	r2, [r4, #0]
 800afe6:	6993      	ldr	r3, [r2, #24]
 800afe8:	6929      	ldr	r1, [r5, #16]
 800afea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800afee:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800aff0:	2000      	movs	r0, #0
      break;
 800aff2:	e029      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aff4:	6800      	ldr	r0, [r0, #0]
 800aff6:	f7ff fcf1 	bl	800a9dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800affa:	6822      	ldr	r2, [r4, #0]
 800affc:	69d3      	ldr	r3, [r2, #28]
 800affe:	f043 0308 	orr.w	r3, r3, #8
 800b002:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b004:	6822      	ldr	r2, [r4, #0]
 800b006:	69d3      	ldr	r3, [r2, #28]
 800b008:	f023 0304 	bic.w	r3, r3, #4
 800b00c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b00e:	6822      	ldr	r2, [r4, #0]
 800b010:	69d3      	ldr	r3, [r2, #28]
 800b012:	6929      	ldr	r1, [r5, #16]
 800b014:	430b      	orrs	r3, r1
 800b016:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b018:	2000      	movs	r0, #0
      break;
 800b01a:	e015      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b01c:	6800      	ldr	r0, [r0, #0]
 800b01e:	f7ff fd0f 	bl	800aa40 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b022:	6822      	ldr	r2, [r4, #0]
 800b024:	69d3      	ldr	r3, [r2, #28]
 800b026:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b02a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b02c:	6822      	ldr	r2, [r4, #0]
 800b02e:	69d3      	ldr	r3, [r2, #28]
 800b030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b034:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b036:	6822      	ldr	r2, [r4, #0]
 800b038:	69d3      	ldr	r3, [r2, #28]
 800b03a:	6929      	ldr	r1, [r5, #16]
 800b03c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b040:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b042:	2000      	movs	r0, #0
      break;
 800b044:	e000      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800b046:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800b048:	2300      	movs	r3, #0
 800b04a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800b050:	2002      	movs	r0, #2
 800b052:	e7fc      	b.n	800b04e <HAL_TIM_PWM_ConfigChannel+0xd6>

0800b054 <TIM_TI1_SetConfig>:
{
 800b054:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 800b056:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b058:	6a04      	ldr	r4, [r0, #32]
 800b05a:	f024 0401 	bic.w	r4, r4, #1
 800b05e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b060:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b062:	4e11      	ldr	r6, [pc, #68]	; (800b0a8 <TIM_TI1_SetConfig+0x54>)
 800b064:	42b0      	cmp	r0, r6
 800b066:	d00d      	beq.n	800b084 <TIM_TI1_SetConfig+0x30>
 800b068:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b06c:	d00a      	beq.n	800b084 <TIM_TI1_SetConfig+0x30>
 800b06e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800b072:	42b0      	cmp	r0, r6
 800b074:	d006      	beq.n	800b084 <TIM_TI1_SetConfig+0x30>
 800b076:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b07a:	42b0      	cmp	r0, r6
 800b07c:	d002      	beq.n	800b084 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b07e:	f044 0201 	orr.w	r2, r4, #1
 800b082:	e002      	b.n	800b08a <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b084:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800b088:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b08a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b08e:	011b      	lsls	r3, r3, #4
 800b090:	b2db      	uxtb	r3, r3
 800b092:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b094:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b098:	f001 010a 	and.w	r1, r1, #10
 800b09c:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800b09e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800b0a0:	6201      	str	r1, [r0, #32]
}
 800b0a2:	bc70      	pop	{r4, r5, r6}
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	40012c00 	.word	0x40012c00

0800b0ac <HAL_TIM_IC_ConfigChannel>:
{
 800b0ac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800b0ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d05a      	beq.n	800b16c <HAL_TIM_IC_ConfigChannel+0xc0>
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	460d      	mov	r5, r1
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800b0c0:	b152      	cbz	r2, 800b0d8 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 800b0c2:	2a04      	cmp	r2, #4
 800b0c4:	d01a      	beq.n	800b0fc <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 800b0c6:	2a08      	cmp	r2, #8
 800b0c8:	d02b      	beq.n	800b122 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 800b0ca:	2a0c      	cmp	r2, #12
 800b0cc:	d03b      	beq.n	800b146 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 800b0ce:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800b0d8:	68cb      	ldr	r3, [r1, #12]
 800b0da:	684a      	ldr	r2, [r1, #4]
 800b0dc:	6809      	ldr	r1, [r1, #0]
 800b0de:	6800      	ldr	r0, [r0, #0]
 800b0e0:	f7ff ffb8 	bl	800b054 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b0e4:	6822      	ldr	r2, [r4, #0]
 800b0e6:	6993      	ldr	r3, [r2, #24]
 800b0e8:	f023 030c 	bic.w	r3, r3, #12
 800b0ec:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	6993      	ldr	r3, [r2, #24]
 800b0f2:	68a9      	ldr	r1, [r5, #8]
 800b0f4:	430b      	orrs	r3, r1
 800b0f6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	e7e9      	b.n	800b0d0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 800b0fc:	68cb      	ldr	r3, [r1, #12]
 800b0fe:	684a      	ldr	r2, [r1, #4]
 800b100:	6809      	ldr	r1, [r1, #0]
 800b102:	6800      	ldr	r0, [r0, #0]
 800b104:	f7ff fcd2 	bl	800aaac <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	6993      	ldr	r3, [r2, #24]
 800b10c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b110:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	6993      	ldr	r3, [r2, #24]
 800b116:	68a9      	ldr	r1, [r5, #8]
 800b118:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b11c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800b11e:	2000      	movs	r0, #0
 800b120:	e7d6      	b.n	800b0d0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800b122:	68cb      	ldr	r3, [r1, #12]
 800b124:	684a      	ldr	r2, [r1, #4]
 800b126:	6809      	ldr	r1, [r1, #0]
 800b128:	6800      	ldr	r0, [r0, #0]
 800b12a:	f7ff fced 	bl	800ab08 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b12e:	6822      	ldr	r2, [r4, #0]
 800b130:	69d3      	ldr	r3, [r2, #28]
 800b132:	f023 030c 	bic.w	r3, r3, #12
 800b136:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b138:	6822      	ldr	r2, [r4, #0]
 800b13a:	69d3      	ldr	r3, [r2, #28]
 800b13c:	68a9      	ldr	r1, [r5, #8]
 800b13e:	430b      	orrs	r3, r1
 800b140:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b142:	2000      	movs	r0, #0
 800b144:	e7c4      	b.n	800b0d0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 800b146:	68cb      	ldr	r3, [r1, #12]
 800b148:	684a      	ldr	r2, [r1, #4]
 800b14a:	6809      	ldr	r1, [r1, #0]
 800b14c:	6800      	ldr	r0, [r0, #0]
 800b14e:	f7ff fcf6 	bl	800ab3e <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b152:	6822      	ldr	r2, [r4, #0]
 800b154:	69d3      	ldr	r3, [r2, #28]
 800b156:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b15a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b15c:	6822      	ldr	r2, [r4, #0]
 800b15e:	69d3      	ldr	r3, [r2, #28]
 800b160:	68a9      	ldr	r1, [r5, #8]
 800b162:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b166:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b168:	2000      	movs	r0, #0
 800b16a:	e7b1      	b.n	800b0d0 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 800b16c:	2002      	movs	r0, #2
 800b16e:	e7b2      	b.n	800b0d6 <HAL_TIM_IC_ConfigChannel+0x2a>

0800b170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b170:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b172:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b174:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b178:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800b17c:	430a      	orrs	r2, r1
 800b17e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b182:	6082      	str	r2, [r0, #8]
}
 800b184:	bc10      	pop	{r4}
 800b186:	4770      	bx	lr

0800b188 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800b188:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d078      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0xfa>
{
 800b190:	b510      	push	{r4, lr}
 800b192:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800b194:	2301      	movs	r3, #1
 800b196:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b19a:	2302      	movs	r3, #2
 800b19c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800b1a0:	6802      	ldr	r2, [r0, #0]
 800b1a2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800b1ac:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800b1ae:	680b      	ldr	r3, [r1, #0]
 800b1b0:	2b60      	cmp	r3, #96	; 0x60
 800b1b2:	d04c      	beq.n	800b24e <HAL_TIM_ConfigClockSource+0xc6>
 800b1b4:	d829      	bhi.n	800b20a <HAL_TIM_ConfigClockSource+0x82>
 800b1b6:	2b40      	cmp	r3, #64	; 0x40
 800b1b8:	d054      	beq.n	800b264 <HAL_TIM_ConfigClockSource+0xdc>
 800b1ba:	d90c      	bls.n	800b1d6 <HAL_TIM_ConfigClockSource+0x4e>
 800b1bc:	2b50      	cmp	r3, #80	; 0x50
 800b1be:	d122      	bne.n	800b206 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1c0:	68ca      	ldr	r2, [r1, #12]
 800b1c2:	6849      	ldr	r1, [r1, #4]
 800b1c4:	6800      	ldr	r0, [r0, #0]
 800b1c6:	f7ff fc5f 	bl	800aa88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1ca:	2150      	movs	r1, #80	; 0x50
 800b1cc:	6820      	ldr	r0, [r4, #0]
 800b1ce:	f7ff fcd1 	bl	800ab74 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b1d2:	2000      	movs	r0, #0
      break;
 800b1d4:	e005      	b.n	800b1e2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800b1d6:	2b20      	cmp	r3, #32
 800b1d8:	d00d      	beq.n	800b1f6 <HAL_TIM_ConfigClockSource+0x6e>
 800b1da:	d909      	bls.n	800b1f0 <HAL_TIM_ConfigClockSource+0x68>
 800b1dc:	2b30      	cmp	r3, #48	; 0x30
 800b1de:	d00a      	beq.n	800b1f6 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800b1e0:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b1ee:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800b1f0:	b10b      	cbz	r3, 800b1f6 <HAL_TIM_ConfigClockSource+0x6e>
 800b1f2:	2b10      	cmp	r3, #16
 800b1f4:	d105      	bne.n	800b202 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6820      	ldr	r0, [r4, #0]
 800b1fa:	f7ff fcbb 	bl	800ab74 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b1fe:	2000      	movs	r0, #0
      break;
 800b200:	e7ef      	b.n	800b1e2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800b202:	2001      	movs	r0, #1
 800b204:	e7ed      	b.n	800b1e2 <HAL_TIM_ConfigClockSource+0x5a>
 800b206:	2001      	movs	r0, #1
 800b208:	e7eb      	b.n	800b1e2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800b20a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b20e:	d034      	beq.n	800b27a <HAL_TIM_ConfigClockSource+0xf2>
 800b210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b214:	d10c      	bne.n	800b230 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 800b216:	68cb      	ldr	r3, [r1, #12]
 800b218:	684a      	ldr	r2, [r1, #4]
 800b21a:	6889      	ldr	r1, [r1, #8]
 800b21c:	6800      	ldr	r0, [r0, #0]
 800b21e:	f7ff ffa7 	bl	800b170 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b222:	6822      	ldr	r2, [r4, #0]
 800b224:	6893      	ldr	r3, [r2, #8]
 800b226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b22a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b22c:	2000      	movs	r0, #0
      break;
 800b22e:	e7d8      	b.n	800b1e2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800b230:	2b70      	cmp	r3, #112	; 0x70
 800b232:	d124      	bne.n	800b27e <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 800b234:	68cb      	ldr	r3, [r1, #12]
 800b236:	684a      	ldr	r2, [r1, #4]
 800b238:	6889      	ldr	r1, [r1, #8]
 800b23a:	6800      	ldr	r0, [r0, #0]
 800b23c:	f7ff ff98 	bl	800b170 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b240:	6822      	ldr	r2, [r4, #0]
 800b242:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b244:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800b248:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b24a:	2000      	movs	r0, #0
      break;
 800b24c:	e7c9      	b.n	800b1e2 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b24e:	68ca      	ldr	r2, [r1, #12]
 800b250:	6849      	ldr	r1, [r1, #4]
 800b252:	6800      	ldr	r0, [r0, #0]
 800b254:	f7ff fc45 	bl	800aae2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b258:	2160      	movs	r1, #96	; 0x60
 800b25a:	6820      	ldr	r0, [r4, #0]
 800b25c:	f7ff fc8a 	bl	800ab74 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b260:	2000      	movs	r0, #0
      break;
 800b262:	e7be      	b.n	800b1e2 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b264:	68ca      	ldr	r2, [r1, #12]
 800b266:	6849      	ldr	r1, [r1, #4]
 800b268:	6800      	ldr	r0, [r0, #0]
 800b26a:	f7ff fc0d 	bl	800aa88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b26e:	2140      	movs	r1, #64	; 0x40
 800b270:	6820      	ldr	r0, [r4, #0]
 800b272:	f7ff fc7f 	bl	800ab74 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b276:	2000      	movs	r0, #0
      break;
 800b278:	e7b3      	b.n	800b1e2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800b27a:	2000      	movs	r0, #0
 800b27c:	e7b1      	b.n	800b1e2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800b27e:	2001      	movs	r0, #1
 800b280:	e7af      	b.n	800b1e2 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800b282:	2002      	movs	r0, #2
}
 800b284:	4770      	bx	lr

0800b286 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b286:	f001 011f 	and.w	r1, r1, #31
 800b28a:	2301      	movs	r3, #1
 800b28c:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b290:	6a03      	ldr	r3, [r0, #32]
 800b292:	ea23 030c 	bic.w	r3, r3, ip
 800b296:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b298:	6a03      	ldr	r3, [r0, #32]
 800b29a:	fa02 f101 	lsl.w	r1, r2, r1
 800b29e:	430b      	orrs	r3, r1
 800b2a0:	6203      	str	r3, [r0, #32]
}
 800b2a2:	4770      	bx	lr

0800b2a4 <HAL_TIM_PWM_Start>:
{
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b2a8:	4608      	mov	r0, r1
 800b2aa:	bb51      	cbnz	r1, 800b302 <HAL_TIM_PWM_Start+0x5e>
 800b2ac:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	bf18      	it	ne
 800b2b6:	2301      	movne	r3, #1
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d15b      	bne.n	800b374 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d139      	bne.n	800b334 <HAL_TIM_PWM_Start+0x90>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	4601      	mov	r1, r0
 800b2ca:	6820      	ldr	r0, [r4, #0]
 800b2cc:	f7ff ffdb 	bl	800b286 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	4a2a      	ldr	r2, [pc, #168]	; (800b37c <HAL_TIM_PWM_Start+0xd8>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d03d      	beq.n	800b354 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	4a28      	ldr	r2, [pc, #160]	; (800b37c <HAL_TIM_PWM_Start+0xd8>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d03e      	beq.n	800b35e <HAL_TIM_PWM_Start+0xba>
 800b2e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2e4:	d03b      	beq.n	800b35e <HAL_TIM_PWM_Start+0xba>
 800b2e6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d037      	beq.n	800b35e <HAL_TIM_PWM_Start+0xba>
 800b2ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d033      	beq.n	800b35e <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	f042 0201 	orr.w	r2, r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b2fe:	2000      	movs	r0, #0
 800b300:	e039      	b.n	800b376 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b302:	2904      	cmp	r1, #4
 800b304:	d008      	beq.n	800b318 <HAL_TIM_PWM_Start+0x74>
 800b306:	2908      	cmp	r1, #8
 800b308:	d00d      	beq.n	800b326 <HAL_TIM_PWM_Start+0x82>
 800b30a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	3b01      	subs	r3, #1
 800b312:	bf18      	it	ne
 800b314:	2301      	movne	r3, #1
 800b316:	e7cf      	b.n	800b2b8 <HAL_TIM_PWM_Start+0x14>
 800b318:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	3b01      	subs	r3, #1
 800b320:	bf18      	it	ne
 800b322:	2301      	movne	r3, #1
 800b324:	e7c8      	b.n	800b2b8 <HAL_TIM_PWM_Start+0x14>
 800b326:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	3b01      	subs	r3, #1
 800b32e:	bf18      	it	ne
 800b330:	2301      	movne	r3, #1
 800b332:	e7c1      	b.n	800b2b8 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b334:	2804      	cmp	r0, #4
 800b336:	d005      	beq.n	800b344 <HAL_TIM_PWM_Start+0xa0>
 800b338:	2808      	cmp	r0, #8
 800b33a:	d007      	beq.n	800b34c <HAL_TIM_PWM_Start+0xa8>
 800b33c:	2302      	movs	r3, #2
 800b33e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b342:	e7c0      	b.n	800b2c6 <HAL_TIM_PWM_Start+0x22>
 800b344:	2302      	movs	r3, #2
 800b346:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b34a:	e7bc      	b.n	800b2c6 <HAL_TIM_PWM_Start+0x22>
 800b34c:	2302      	movs	r3, #2
 800b34e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b352:	e7b8      	b.n	800b2c6 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 800b354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b35a:	645a      	str	r2, [r3, #68]	; 0x44
 800b35c:	e7bc      	b.n	800b2d8 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b35e:	689a      	ldr	r2, [r3, #8]
 800b360:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b364:	2a06      	cmp	r2, #6
 800b366:	d007      	beq.n	800b378 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	f042 0201 	orr.w	r2, r2, #1
 800b36e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b370:	2000      	movs	r0, #0
 800b372:	e000      	b.n	800b376 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 800b374:	2001      	movs	r0, #1
}
 800b376:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800b378:	2000      	movs	r0, #0
 800b37a:	e7fc      	b.n	800b376 <HAL_TIM_PWM_Start+0xd2>
 800b37c:	40012c00 	.word	0x40012c00

0800b380 <HAL_TIM_IC_Start_IT>:
{
 800b380:	b510      	push	{r4, lr}
 800b382:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b384:	460b      	mov	r3, r1
 800b386:	bb09      	cbnz	r1, 800b3cc <HAL_TIM_IC_Start_IT+0x4c>
 800b388:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800b38c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b38e:	bb6b      	cbnz	r3, 800b3ec <HAL_TIM_IC_Start_IT+0x6c>
 800b390:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800b394:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b396:	2801      	cmp	r0, #1
 800b398:	f040 8094 	bne.w	800b4c4 <HAL_TIM_IC_Start_IT+0x144>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b39c:	2a01      	cmp	r2, #1
 800b39e:	f040 8092 	bne.w	800b4c6 <HAL_TIM_IC_Start_IT+0x146>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3a2:	bb9b      	cbnz	r3, 800b40c <HAL_TIM_IC_Start_IT+0x8c>
 800b3a4:	2102      	movs	r1, #2
 800b3a6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d13e      	bne.n	800b42c <HAL_TIM_IC_Start_IT+0xac>
 800b3ae:	2102      	movs	r1, #2
 800b3b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  switch (Channel)
 800b3b4:	2b0c      	cmp	r3, #12
 800b3b6:	f200 8087 	bhi.w	800b4c8 <HAL_TIM_IC_Start_IT+0x148>
 800b3ba:	e8df f003 	tbb	[pc, r3]
 800b3be:	8547      	.short	0x8547
 800b3c0:	85668585 	.word	0x85668585
 800b3c4:	856c8585 	.word	0x856c8585
 800b3c8:	8585      	.short	0x8585
 800b3ca:	72          	.byte	0x72
 800b3cb:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b3cc:	2904      	cmp	r1, #4
 800b3ce:	d005      	beq.n	800b3dc <HAL_TIM_IC_Start_IT+0x5c>
 800b3d0:	2908      	cmp	r1, #8
 800b3d2:	d007      	beq.n	800b3e4 <HAL_TIM_IC_Start_IT+0x64>
 800b3d4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800b3d8:	b2c0      	uxtb	r0, r0
 800b3da:	e7d8      	b.n	800b38e <HAL_TIM_IC_Start_IT+0xe>
 800b3dc:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800b3e0:	b2c0      	uxtb	r0, r0
 800b3e2:	e7d4      	b.n	800b38e <HAL_TIM_IC_Start_IT+0xe>
 800b3e4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800b3e8:	b2c0      	uxtb	r0, r0
 800b3ea:	e7d0      	b.n	800b38e <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d005      	beq.n	800b3fc <HAL_TIM_IC_Start_IT+0x7c>
 800b3f0:	2b08      	cmp	r3, #8
 800b3f2:	d007      	beq.n	800b404 <HAL_TIM_IC_Start_IT+0x84>
 800b3f4:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800b3f8:	b2d2      	uxtb	r2, r2
 800b3fa:	e7cc      	b.n	800b396 <HAL_TIM_IC_Start_IT+0x16>
 800b3fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b400:	b2d2      	uxtb	r2, r2
 800b402:	e7c8      	b.n	800b396 <HAL_TIM_IC_Start_IT+0x16>
 800b404:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800b408:	b2d2      	uxtb	r2, r2
 800b40a:	e7c4      	b.n	800b396 <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b40c:	2b04      	cmp	r3, #4
 800b40e:	d005      	beq.n	800b41c <HAL_TIM_IC_Start_IT+0x9c>
 800b410:	2b08      	cmp	r3, #8
 800b412:	d007      	beq.n	800b424 <HAL_TIM_IC_Start_IT+0xa4>
 800b414:	2102      	movs	r1, #2
 800b416:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 800b41a:	e7c6      	b.n	800b3aa <HAL_TIM_IC_Start_IT+0x2a>
 800b41c:	2102      	movs	r1, #2
 800b41e:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 800b422:	e7c2      	b.n	800b3aa <HAL_TIM_IC_Start_IT+0x2a>
 800b424:	2102      	movs	r1, #2
 800b426:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 800b42a:	e7be      	b.n	800b3aa <HAL_TIM_IC_Start_IT+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b42c:	2b04      	cmp	r3, #4
 800b42e:	d005      	beq.n	800b43c <HAL_TIM_IC_Start_IT+0xbc>
 800b430:	2b08      	cmp	r3, #8
 800b432:	d007      	beq.n	800b444 <HAL_TIM_IC_Start_IT+0xc4>
 800b434:	2102      	movs	r1, #2
 800b436:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b43a:	e7bb      	b.n	800b3b4 <HAL_TIM_IC_Start_IT+0x34>
 800b43c:	2102      	movs	r1, #2
 800b43e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b442:	e7b7      	b.n	800b3b4 <HAL_TIM_IC_Start_IT+0x34>
 800b444:	2102      	movs	r1, #2
 800b446:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 800b44a:	e7b3      	b.n	800b3b4 <HAL_TIM_IC_Start_IT+0x34>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b44c:	6821      	ldr	r1, [r4, #0]
 800b44e:	68ca      	ldr	r2, [r1, #12]
 800b450:	f042 0202 	orr.w	r2, r2, #2
 800b454:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b456:	2201      	movs	r2, #1
 800b458:	4619      	mov	r1, r3
 800b45a:	6820      	ldr	r0, [r4, #0]
 800b45c:	f7ff ff13 	bl	800b286 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	4a1b      	ldr	r2, [pc, #108]	; (800b4d0 <HAL_TIM_IC_Start_IT+0x150>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d022      	beq.n	800b4ae <HAL_TIM_IC_Start_IT+0x12e>
 800b468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b46c:	d01f      	beq.n	800b4ae <HAL_TIM_IC_Start_IT+0x12e>
 800b46e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b472:	4293      	cmp	r3, r2
 800b474:	d01b      	beq.n	800b4ae <HAL_TIM_IC_Start_IT+0x12e>
 800b476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d017      	beq.n	800b4ae <HAL_TIM_IC_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	f042 0201 	orr.w	r2, r2, #1
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	2000      	movs	r0, #0
 800b488:	e01d      	b.n	800b4c6 <HAL_TIM_IC_Start_IT+0x146>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b48a:	6821      	ldr	r1, [r4, #0]
 800b48c:	68ca      	ldr	r2, [r1, #12]
 800b48e:	f042 0204 	orr.w	r2, r2, #4
 800b492:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800b494:	e7df      	b.n	800b456 <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b496:	6821      	ldr	r1, [r4, #0]
 800b498:	68ca      	ldr	r2, [r1, #12]
 800b49a:	f042 0208 	orr.w	r2, r2, #8
 800b49e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800b4a0:	e7d9      	b.n	800b456 <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b4a2:	6821      	ldr	r1, [r4, #0]
 800b4a4:	68ca      	ldr	r2, [r1, #12]
 800b4a6:	f042 0210 	orr.w	r2, r2, #16
 800b4aa:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800b4ac:	e7d3      	b.n	800b456 <HAL_TIM_IC_Start_IT+0xd6>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4ae:	689a      	ldr	r2, [r3, #8]
 800b4b0:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4b4:	2a06      	cmp	r2, #6
 800b4b6:	d009      	beq.n	800b4cc <HAL_TIM_IC_Start_IT+0x14c>
        __HAL_TIM_ENABLE(htim);
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	f042 0201 	orr.w	r2, r2, #1
 800b4be:	601a      	str	r2, [r3, #0]
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	e000      	b.n	800b4c6 <HAL_TIM_IC_Start_IT+0x146>
    return HAL_ERROR;
 800b4c4:	2001      	movs	r0, #1
}
 800b4c6:	bd10      	pop	{r4, pc}
  switch (Channel)
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	e7fc      	b.n	800b4c6 <HAL_TIM_IC_Start_IT+0x146>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e7fa      	b.n	800b4c6 <HAL_TIM_IC_Start_IT+0x146>
 800b4d0:	40012c00 	.word	0x40012c00

0800b4d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d02c      	beq.n	800b536 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 800b4dc:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800b4de:	2301      	movs	r3, #1
 800b4e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4ea:	6803      	ldr	r3, [r0, #0]
 800b4ec:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4ee:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4f0:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4f4:	680a      	ldr	r2, [r1, #0]
 800b4f6:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4fc:	6803      	ldr	r3, [r0, #0]
 800b4fe:	4a0f      	ldr	r2, [pc, #60]	; (800b53c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d00a      	beq.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800b504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b508:	d007      	beq.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800b50a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b50e:	4293      	cmp	r3, r2
 800b510:	d003      	beq.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800b512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b516:	4293      	cmp	r3, r2
 800b518:	d104      	bne.n	800b524 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b51a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b51e:	684a      	ldr	r2, [r1, #4]
 800b520:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b522:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b524:	2301      	movs	r3, #1
 800b526:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b52a:	2300      	movs	r3, #0
 800b52c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800b530:	4618      	mov	r0, r3
}
 800b532:	bc10      	pop	{r4}
 800b534:	4770      	bx	lr
  __HAL_LOCK(htim);
 800b536:	2002      	movs	r0, #2
}
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	40012c00 	.word	0x40012c00

0800b540 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b540:	4770      	bx	lr

0800b542 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b542:	4770      	bx	lr

0800b544 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b544:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b546:	f102 030c 	add.w	r3, r2, #12
 800b54a:	e853 3f00 	ldrex	r3, [r3]
 800b54e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b552:	320c      	adds	r2, #12
 800b554:	e842 3100 	strex	r1, r3, [r2]
 800b558:	2900      	cmp	r1, #0
 800b55a:	d1f3      	bne.n	800b544 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b55c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55e:	f102 0314 	add.w	r3, r2, #20
 800b562:	e853 3f00 	ldrex	r3, [r3]
 800b566:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56a:	3214      	adds	r2, #20
 800b56c:	e842 3100 	strex	r1, r3, [r2]
 800b570:	2900      	cmp	r1, #0
 800b572:	d1f3      	bne.n	800b55c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b574:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b576:	2b01      	cmp	r3, #1
 800b578:	d005      	beq.n	800b586 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b57a:	2320      	movs	r3, #32
 800b57c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b580:	2300      	movs	r3, #0
 800b582:	6303      	str	r3, [r0, #48]	; 0x30
}
 800b584:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b586:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	f102 030c 	add.w	r3, r2, #12
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b594:	320c      	adds	r2, #12
 800b596:	e842 3100 	strex	r1, r3, [r2]
 800b59a:	2900      	cmp	r1, #0
 800b59c:	d1f3      	bne.n	800b586 <UART_EndRxTransfer+0x42>
 800b59e:	e7ec      	b.n	800b57a <UART_EndRxTransfer+0x36>

0800b5a0 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b21      	cmp	r3, #33	; 0x21
 800b5a8:	d001      	beq.n	800b5ae <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800b5aa:	2002      	movs	r0, #2
  }
}
 800b5ac:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5ae:	6883      	ldr	r3, [r0, #8]
 800b5b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5b4:	d017      	beq.n	800b5e6 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5b6:	6a03      	ldr	r3, [r0, #32]
 800b5b8:	1c5a      	adds	r2, r3, #1
 800b5ba:	6202      	str	r2, [r0, #32]
 800b5bc:	781a      	ldrb	r2, [r3, #0]
 800b5be:	6803      	ldr	r3, [r0, #0]
 800b5c0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800b5c2:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	84c3      	strh	r3, [r0, #38]	; 0x26
 800b5cc:	b94b      	cbnz	r3, 800b5e2 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b5ce:	6802      	ldr	r2, [r0, #0]
 800b5d0:	68d3      	ldr	r3, [r2, #12]
 800b5d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5d6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b5d8:	6802      	ldr	r2, [r0, #0]
 800b5da:	68d3      	ldr	r3, [r2, #12]
 800b5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e0:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5e6:	6903      	ldr	r3, [r0, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1e4      	bne.n	800b5b6 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b5ec:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5ee:	881b      	ldrh	r3, [r3, #0]
 800b5f0:	6802      	ldr	r2, [r0, #0]
 800b5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f6:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800b5f8:	6a03      	ldr	r3, [r0, #32]
 800b5fa:	3302      	adds	r3, #2
 800b5fc:	6203      	str	r3, [r0, #32]
 800b5fe:	e7e0      	b.n	800b5c2 <UART_Transmit_IT+0x22>

0800b600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b600:	b510      	push	{r4, lr}
 800b602:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b604:	6802      	ldr	r2, [r0, #0]
 800b606:	6913      	ldr	r3, [r2, #16]
 800b608:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b60c:	68c1      	ldr	r1, [r0, #12]
 800b60e:	430b      	orrs	r3, r1
 800b610:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b612:	6883      	ldr	r3, [r0, #8]
 800b614:	6902      	ldr	r2, [r0, #16]
 800b616:	4313      	orrs	r3, r2
 800b618:	6942      	ldr	r2, [r0, #20]
 800b61a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800b61c:	6801      	ldr	r1, [r0, #0]
 800b61e:	68cb      	ldr	r3, [r1, #12]
 800b620:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b624:	f023 030c 	bic.w	r3, r3, #12
 800b628:	4313      	orrs	r3, r2
 800b62a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b62c:	6802      	ldr	r2, [r0, #0]
 800b62e:	6953      	ldr	r3, [r2, #20]
 800b630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b634:	6981      	ldr	r1, [r0, #24]
 800b636:	430b      	orrs	r3, r1
 800b638:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800b63a:	6802      	ldr	r2, [r0, #0]
 800b63c:	4b13      	ldr	r3, [pc, #76]	; (800b68c <UART_SetConfig+0x8c>)
 800b63e:	429a      	cmp	r2, r3
 800b640:	d020      	beq.n	800b684 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b642:	f7fe fe61 	bl	800a308 <HAL_RCC_GetPCLK1Freq>
 800b646:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b648:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b64c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b650:	6863      	ldr	r3, [r4, #4]
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	fbb2 f2f3 	udiv	r2, r2, r3
 800b658:	480d      	ldr	r0, [pc, #52]	; (800b690 <UART_SetConfig+0x90>)
 800b65a:	fba0 3102 	umull	r3, r1, r0, r2
 800b65e:	0949      	lsrs	r1, r1, #5
 800b660:	2364      	movs	r3, #100	; 0x64
 800b662:	fb03 2311 	mls	r3, r3, r1, r2
 800b666:	011b      	lsls	r3, r3, #4
 800b668:	3332      	adds	r3, #50	; 0x32
 800b66a:	fba0 2303 	umull	r2, r3, r0, r3
 800b66e:	095b      	lsrs	r3, r3, #5
 800b670:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b674:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800b678:	f003 030f 	and.w	r3, r3, #15
 800b67c:	6821      	ldr	r1, [r4, #0]
 800b67e:	4413      	add	r3, r2
 800b680:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800b682:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800b684:	f7fe fe50 	bl	800a328 <HAL_RCC_GetPCLK2Freq>
 800b688:	4602      	mov	r2, r0
 800b68a:	e7dd      	b.n	800b648 <UART_SetConfig+0x48>
 800b68c:	40013800 	.word	0x40013800
 800b690:	51eb851f 	.word	0x51eb851f

0800b694 <HAL_UART_Init>:
  if (huart == NULL)
 800b694:	b360      	cbz	r0, 800b6f0 <HAL_UART_Init+0x5c>
{
 800b696:	b510      	push	{r4, lr}
 800b698:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b69a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b69e:	b313      	cbz	r3, 800b6e6 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800b6a0:	2324      	movs	r3, #36	; 0x24
 800b6a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800b6a6:	6822      	ldr	r2, [r4, #0]
 800b6a8:	68d3      	ldr	r3, [r2, #12]
 800b6aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6ae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f7ff ffa5 	bl	800b600 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6b6:	6822      	ldr	r2, [r4, #0]
 800b6b8:	6913      	ldr	r3, [r2, #16]
 800b6ba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800b6be:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6c0:	6822      	ldr	r2, [r4, #0]
 800b6c2:	6953      	ldr	r3, [r2, #20]
 800b6c4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800b6c8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800b6ca:	6822      	ldr	r2, [r4, #0]
 800b6cc:	68d3      	ldr	r3, [r2, #12]
 800b6ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b6d2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b6d8:	2320      	movs	r3, #32
 800b6da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b6de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6e2:	6360      	str	r0, [r4, #52]	; 0x34
}
 800b6e4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800b6e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 800b6ea:	f7fd ff9b 	bl	8009624 <HAL_UART_MspInit>
 800b6ee:	e7d7      	b.n	800b6a0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800b6f0:	2001      	movs	r0, #1
}
 800b6f2:	4770      	bx	lr

0800b6f4 <HAL_UART_TxCpltCallback>:
}
 800b6f4:	4770      	bx	lr

0800b6f6 <UART_EndTransmit_IT>:
{
 800b6f6:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b6f8:	6801      	ldr	r1, [r0, #0]
 800b6fa:	68ca      	ldr	r2, [r1, #12]
 800b6fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b700:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b702:	2220      	movs	r2, #32
 800b704:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 800b708:	f7ff fff4 	bl	800b6f4 <HAL_UART_TxCpltCallback>
}
 800b70c:	2000      	movs	r0, #0
 800b70e:	bd08      	pop	{r3, pc}

0800b710 <HAL_UART_ErrorCallback>:
}
 800b710:	4770      	bx	lr

0800b712 <UART_DMAAbortOnError>:
{
 800b712:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b714:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800b716:	2300      	movs	r3, #0
 800b718:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b71a:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800b71c:	f7ff fff8 	bl	800b710 <HAL_UART_ErrorCallback>
}
 800b720:	bd08      	pop	{r3, pc}

0800b722 <HAL_UARTEx_RxEventCallback>:
}
 800b722:	4770      	bx	lr

0800b724 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b724:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b22      	cmp	r3, #34	; 0x22
 800b72c:	d169      	bne.n	800b802 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b72e:	6883      	ldr	r3, [r0, #8]
 800b730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b734:	d04f      	beq.n	800b7d6 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b736:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b73c:	d004      	beq.n	800b748 <UART_Receive_IT+0x24>
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d156      	bne.n	800b7f0 <UART_Receive_IT+0xcc>
 800b742:	6903      	ldr	r3, [r0, #16]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d153      	bne.n	800b7f0 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b748:	6803      	ldr	r3, [r0, #0]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800b74e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b750:	3301      	adds	r3, #1
 800b752:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800b754:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800b756:	b29b      	uxth	r3, r3
 800b758:	3b01      	subs	r3, #1
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d151      	bne.n	800b806 <UART_Receive_IT+0xe2>
{
 800b762:	b500      	push	{lr}
 800b764:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b766:	6802      	ldr	r2, [r0, #0]
 800b768:	68d3      	ldr	r3, [r2, #12]
 800b76a:	f023 0320 	bic.w	r3, r3, #32
 800b76e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b770:	6802      	ldr	r2, [r0, #0]
 800b772:	68d3      	ldr	r3, [r2, #12]
 800b774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b778:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b77a:	6802      	ldr	r2, [r0, #0]
 800b77c:	6953      	ldr	r3, [r2, #20]
 800b77e:	f023 0301 	bic.w	r3, r3, #1
 800b782:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800b784:	2320      	movs	r3, #32
 800b786:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b78a:	2300      	movs	r3, #0
 800b78c:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b78e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b790:	2b01      	cmp	r3, #1
 800b792:	d133      	bne.n	800b7fc <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b794:	2300      	movs	r3, #0
 800b796:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b798:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79a:	f102 030c 	add.w	r3, r2, #12
 800b79e:	e853 3f00 	ldrex	r3, [r3]
 800b7a2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a6:	320c      	adds	r2, #12
 800b7a8:	e842 3100 	strex	r1, r3, [r2]
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	d1f3      	bne.n	800b798 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b7b0:	6803      	ldr	r3, [r0, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	f012 0f10 	tst.w	r2, #16
 800b7b8:	d006      	beq.n	800b7c8 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	9201      	str	r2, [sp, #4]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	9201      	str	r2, [sp, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7c8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b7ca:	f7ff ffaa 	bl	800b722 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800b7ce:	2000      	movs	r0, #0
}
 800b7d0:	b003      	add	sp, #12
 800b7d2:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7d6:	6902      	ldr	r2, [r0, #16]
 800b7d8:	2a00      	cmp	r2, #0
 800b7da:	d1ac      	bne.n	800b736 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b7dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b7de:	6803      	ldr	r3, [r0, #0]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e6:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800b7e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b7ea:	3302      	adds	r3, #2
 800b7ec:	6283      	str	r3, [r0, #40]	; 0x28
 800b7ee:	e7b1      	b.n	800b754 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b7f0:	6803      	ldr	r3, [r0, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7f8:	7013      	strb	r3, [r2, #0]
 800b7fa:	e7a8      	b.n	800b74e <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 800b7fc:	f7fd fd10 	bl	8009220 <HAL_UART_RxCpltCallback>
 800b800:	e7e5      	b.n	800b7ce <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 800b802:	2002      	movs	r0, #2
 800b804:	4770      	bx	lr
    return HAL_OK;
 800b806:	2000      	movs	r0, #0
}
 800b808:	4770      	bx	lr
	...

0800b80c <HAL_UART_IRQHandler>:
{
 800b80c:	b530      	push	{r4, r5, lr}
 800b80e:	b083      	sub	sp, #12
 800b810:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b812:	6802      	ldr	r2, [r0, #0]
 800b814:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b816:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b818:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800b81a:	f013 050f 	ands.w	r5, r3, #15
 800b81e:	d105      	bne.n	800b82c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b820:	f013 0f20 	tst.w	r3, #32
 800b824:	d002      	beq.n	800b82c <HAL_UART_IRQHandler+0x20>
 800b826:	f010 0f20 	tst.w	r0, #32
 800b82a:	d119      	bne.n	800b860 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b82c:	b12d      	cbz	r5, 800b83a <HAL_UART_IRQHandler+0x2e>
 800b82e:	f011 0101 	ands.w	r1, r1, #1
 800b832:	d119      	bne.n	800b868 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b834:	f410 7f90 	tst.w	r0, #288	; 0x120
 800b838:	d116      	bne.n	800b868 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b83a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b83c:	2901      	cmp	r1, #1
 800b83e:	d07d      	beq.n	800b93c <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b840:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b844:	d003      	beq.n	800b84e <HAL_UART_IRQHandler+0x42>
 800b846:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b84a:	f040 8118 	bne.w	800ba7e <HAL_UART_IRQHandler+0x272>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b84e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b852:	d003      	beq.n	800b85c <HAL_UART_IRQHandler+0x50>
 800b854:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b858:	f040 8115 	bne.w	800ba86 <HAL_UART_IRQHandler+0x27a>
}
 800b85c:	b003      	add	sp, #12
 800b85e:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 800b860:	4620      	mov	r0, r4
 800b862:	f7ff ff5f 	bl	800b724 <UART_Receive_IT>
      return;
 800b866:	e7f9      	b.n	800b85c <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b868:	f013 0f01 	tst.w	r3, #1
 800b86c:	d006      	beq.n	800b87c <HAL_UART_IRQHandler+0x70>
 800b86e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b872:	d003      	beq.n	800b87c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b874:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b876:	f042 0201 	orr.w	r2, r2, #1
 800b87a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b87c:	f013 0f04 	tst.w	r3, #4
 800b880:	d004      	beq.n	800b88c <HAL_UART_IRQHandler+0x80>
 800b882:	b119      	cbz	r1, 800b88c <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b884:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b886:	f042 0202 	orr.w	r2, r2, #2
 800b88a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b88c:	f013 0f02 	tst.w	r3, #2
 800b890:	d004      	beq.n	800b89c <HAL_UART_IRQHandler+0x90>
 800b892:	b119      	cbz	r1, 800b89c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b894:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b896:	f042 0204 	orr.w	r2, r2, #4
 800b89a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b89c:	f013 0f08 	tst.w	r3, #8
 800b8a0:	d007      	beq.n	800b8b2 <HAL_UART_IRQHandler+0xa6>
 800b8a2:	f010 0f20 	tst.w	r0, #32
 800b8a6:	d100      	bne.n	800b8aa <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b8a8:	b119      	cbz	r1, 800b8b2 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b8ac:	f042 0208 	orr.w	r2, r2, #8
 800b8b0:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b8b4:	2a00      	cmp	r2, #0
 800b8b6:	d0d1      	beq.n	800b85c <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8b8:	f013 0f20 	tst.w	r3, #32
 800b8bc:	d002      	beq.n	800b8c4 <HAL_UART_IRQHandler+0xb8>
 800b8be:	f010 0f20 	tst.w	r0, #32
 800b8c2:	d129      	bne.n	800b918 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8c4:	6823      	ldr	r3, [r4, #0]
 800b8c6:	695b      	ldr	r3, [r3, #20]
 800b8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b8cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b8ce:	f012 0f08 	tst.w	r2, #8
 800b8d2:	d100      	bne.n	800b8d6 <HAL_UART_IRQHandler+0xca>
 800b8d4:	b363      	cbz	r3, 800b930 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f7ff fe34 	bl	800b544 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b8e4:	d020      	beq.n	800b928 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e8:	f102 0314 	add.w	r3, r2, #20
 800b8ec:	e853 3f00 	ldrex	r3, [r3]
 800b8f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f4:	3214      	adds	r2, #20
 800b8f6:	e842 3100 	strex	r1, r3, [r2]
 800b8fa:	2900      	cmp	r1, #0
 800b8fc:	d1f3      	bne.n	800b8e6 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 800b8fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b900:	b173      	cbz	r3, 800b920 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b902:	4a63      	ldr	r2, [pc, #396]	; (800ba90 <HAL_UART_IRQHandler+0x284>)
 800b904:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b906:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b908:	f7fe f810 	bl	800992c <HAL_DMA_Abort_IT>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d0a5      	beq.n	800b85c <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b910:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b912:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b914:	4798      	blx	r3
 800b916:	e7a1      	b.n	800b85c <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 800b918:	4620      	mov	r0, r4
 800b91a:	f7ff ff03 	bl	800b724 <UART_Receive_IT>
 800b91e:	e7d1      	b.n	800b8c4 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 800b920:	4620      	mov	r0, r4
 800b922:	f7ff fef5 	bl	800b710 <HAL_UART_ErrorCallback>
 800b926:	e799      	b.n	800b85c <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 800b928:	4620      	mov	r0, r4
 800b92a:	f7ff fef1 	bl	800b710 <HAL_UART_ErrorCallback>
 800b92e:	e795      	b.n	800b85c <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 800b930:	4620      	mov	r0, r4
 800b932:	f7ff feed 	bl	800b710 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b936:	2300      	movs	r3, #0
 800b938:	6463      	str	r3, [r4, #68]	; 0x44
    return;
 800b93a:	e78f      	b.n	800b85c <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b93c:	f013 0f10 	tst.w	r3, #16
 800b940:	f43f af7e 	beq.w	800b840 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b944:	f010 0f10 	tst.w	r0, #16
 800b948:	f43f af7a 	beq.w	800b840 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b94c:	2300      	movs	r3, #0
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	6813      	ldr	r3, [r2, #0]
 800b952:	9301      	str	r3, [sp, #4]
 800b954:	6853      	ldr	r3, [r2, #4]
 800b956:	9301      	str	r3, [sp, #4]
 800b958:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b95a:	6953      	ldr	r3, [r2, #20]
 800b95c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b960:	d051      	beq.n	800ba06 <HAL_UART_IRQHandler+0x1fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b962:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b964:	6813      	ldr	r3, [r2, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f43f af76 	beq.w	800b85c <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b970:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800b972:	4299      	cmp	r1, r3
 800b974:	f67f af72 	bls.w	800b85c <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 800b978:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b97a:	6993      	ldr	r3, [r2, #24]
 800b97c:	2b20      	cmp	r3, #32
 800b97e:	d037      	beq.n	800b9f0 <HAL_UART_IRQHandler+0x1e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b980:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	f102 030c 	add.w	r3, r2, #12
 800b986:	e853 3f00 	ldrex	r3, [r3]
 800b98a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98e:	320c      	adds	r2, #12
 800b990:	e842 3100 	strex	r1, r3, [r2]
 800b994:	2900      	cmp	r1, #0
 800b996:	d1f3      	bne.n	800b980 <HAL_UART_IRQHandler+0x174>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b998:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	f102 0314 	add.w	r3, r2, #20
 800b99e:	e853 3f00 	ldrex	r3, [r3]
 800b9a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a6:	3214      	adds	r2, #20
 800b9a8:	e842 3100 	strex	r1, r3, [r2]
 800b9ac:	2900      	cmp	r1, #0
 800b9ae:	d1f3      	bne.n	800b998 <HAL_UART_IRQHandler+0x18c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b2:	f102 0314 	add.w	r3, r2, #20
 800b9b6:	e853 3f00 	ldrex	r3, [r3]
 800b9ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9be:	3214      	adds	r2, #20
 800b9c0:	e842 3100 	strex	r1, r3, [r2]
 800b9c4:	2900      	cmp	r1, #0
 800b9c6:	d1f3      	bne.n	800b9b0 <HAL_UART_IRQHandler+0x1a4>
          huart->RxState = HAL_UART_STATE_READY;
 800b9c8:	2320      	movs	r3, #32
 800b9ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d4:	f102 030c 	add.w	r3, r2, #12
 800b9d8:	e853 3f00 	ldrex	r3, [r3]
 800b9dc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e0:	320c      	adds	r2, #12
 800b9e2:	e842 3100 	strex	r1, r3, [r2]
 800b9e6:	2900      	cmp	r1, #0
 800b9e8:	d1f3      	bne.n	800b9d2 <HAL_UART_IRQHandler+0x1c6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b9ec:	f7fd ff7a 	bl	80098e4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9f4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800b9f6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	1ac9      	subs	r1, r1, r3
 800b9fc:	b289      	uxth	r1, r1
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f7ff fe8f 	bl	800b722 <HAL_UARTEx_RxEventCallback>
      return;
 800ba04:	e72a      	b.n	800b85c <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba06:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800ba08:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	1ac9      	subs	r1, r1, r3
 800ba0e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800ba10:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f43f af21 	beq.w	800b85c <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 800ba1a:	2900      	cmp	r1, #0
 800ba1c:	f43f af1e 	beq.w	800b85c <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba20:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	f102 030c 	add.w	r3, r2, #12
 800ba26:	e853 3f00 	ldrex	r3, [r3]
 800ba2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2e:	320c      	adds	r2, #12
 800ba30:	e842 3000 	strex	r0, r3, [r2]
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d1f3      	bne.n	800ba20 <HAL_UART_IRQHandler+0x214>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba38:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3a:	f102 0314 	add.w	r3, r2, #20
 800ba3e:	e853 3f00 	ldrex	r3, [r3]
 800ba42:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba46:	3214      	adds	r2, #20
 800ba48:	e842 3000 	strex	r0, r3, [r2]
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d1f3      	bne.n	800ba38 <HAL_UART_IRQHandler+0x22c>
        huart->RxState = HAL_UART_STATE_READY;
 800ba50:	2320      	movs	r3, #32
 800ba52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba56:	2300      	movs	r3, #0
 800ba58:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5c:	f102 030c 	add.w	r3, r2, #12
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba68:	320c      	adds	r2, #12
 800ba6a:	e842 3000 	strex	r0, r3, [r2]
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d1f3      	bne.n	800ba5a <HAL_UART_IRQHandler+0x24e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba72:	2302      	movs	r3, #2
 800ba74:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba76:	4620      	mov	r0, r4
 800ba78:	f7ff fe53 	bl	800b722 <HAL_UARTEx_RxEventCallback>
      return;
 800ba7c:	e6ee      	b.n	800b85c <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f7ff fd8e 	bl	800b5a0 <UART_Transmit_IT>
    return;
 800ba84:	e6ea      	b.n	800b85c <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 800ba86:	4620      	mov	r0, r4
 800ba88:	f7ff fe35 	bl	800b6f6 <UART_EndTransmit_IT>
    return;
 800ba8c:	e6e6      	b.n	800b85c <HAL_UART_IRQHandler+0x50>
 800ba8e:	bf00      	nop
 800ba90:	0800b713 	.word	0x0800b713

0800ba94 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 800ba94:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800ba96:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ba98:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba9e:	2322      	movs	r3, #34	; 0x22
 800baa0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 800baa4:	6903      	ldr	r3, [r0, #16]
 800baa6:	b123      	cbz	r3, 800bab2 <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800baa8:	6802      	ldr	r2, [r0, #0]
 800baaa:	68d3      	ldr	r3, [r2, #12]
 800baac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bab0:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bab2:	6802      	ldr	r2, [r0, #0]
 800bab4:	6953      	ldr	r3, [r2, #20]
 800bab6:	f043 0301 	orr.w	r3, r3, #1
 800baba:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800babc:	6802      	ldr	r2, [r0, #0]
 800babe:	68d3      	ldr	r3, [r2, #12]
 800bac0:	f043 0320 	orr.w	r3, r3, #32
 800bac4:	60d3      	str	r3, [r2, #12]
}
 800bac6:	2000      	movs	r0, #0
 800bac8:	4770      	bx	lr

0800baca <HAL_UART_Receive_IT>:
{
 800baca:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800bacc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b20      	cmp	r3, #32
 800bad4:	d108      	bne.n	800bae8 <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 800bad6:	b149      	cbz	r1, 800baec <HAL_UART_Receive_IT+0x22>
 800bad8:	b90a      	cbnz	r2, 800bade <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 800bada:	2001      	movs	r0, #1
}
 800badc:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bade:	2300      	movs	r3, #0
 800bae0:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 800bae2:	f7ff ffd7 	bl	800ba94 <UART_Start_Receive_IT>
 800bae6:	e7f9      	b.n	800badc <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 800bae8:	2002      	movs	r0, #2
 800baea:	e7f7      	b.n	800badc <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 800baec:	2001      	movs	r0, #1
 800baee:	e7f5      	b.n	800badc <HAL_UART_Receive_IT+0x12>

0800baf0 <__libc_init_array>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	2600      	movs	r6, #0
 800baf4:	4d0c      	ldr	r5, [pc, #48]	; (800bb28 <__libc_init_array+0x38>)
 800baf6:	4c0d      	ldr	r4, [pc, #52]	; (800bb2c <__libc_init_array+0x3c>)
 800baf8:	1b64      	subs	r4, r4, r5
 800bafa:	10a4      	asrs	r4, r4, #2
 800bafc:	42a6      	cmp	r6, r4
 800bafe:	d109      	bne.n	800bb14 <__libc_init_array+0x24>
 800bb00:	f000 f822 	bl	800bb48 <_init>
 800bb04:	2600      	movs	r6, #0
 800bb06:	4d0a      	ldr	r5, [pc, #40]	; (800bb30 <__libc_init_array+0x40>)
 800bb08:	4c0a      	ldr	r4, [pc, #40]	; (800bb34 <__libc_init_array+0x44>)
 800bb0a:	1b64      	subs	r4, r4, r5
 800bb0c:	10a4      	asrs	r4, r4, #2
 800bb0e:	42a6      	cmp	r6, r4
 800bb10:	d105      	bne.n	800bb1e <__libc_init_array+0x2e>
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb18:	4798      	blx	r3
 800bb1a:	3601      	adds	r6, #1
 800bb1c:	e7ee      	b.n	800bafc <__libc_init_array+0xc>
 800bb1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb22:	4798      	blx	r3
 800bb24:	3601      	adds	r6, #1
 800bb26:	e7f2      	b.n	800bb0e <__libc_init_array+0x1e>
 800bb28:	0800bba0 	.word	0x0800bba0
 800bb2c:	0800bba0 	.word	0x0800bba0
 800bb30:	0800bba0 	.word	0x0800bba0
 800bb34:	0800bba4 	.word	0x0800bba4

0800bb38 <memset>:
 800bb38:	4603      	mov	r3, r0
 800bb3a:	4402      	add	r2, r0
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d100      	bne.n	800bb42 <memset+0xa>
 800bb40:	4770      	bx	lr
 800bb42:	f803 1b01 	strb.w	r1, [r3], #1
 800bb46:	e7f9      	b.n	800bb3c <memset+0x4>

0800bb48 <_init>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	bf00      	nop
 800bb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4e:	bc08      	pop	{r3}
 800bb50:	469e      	mov	lr, r3
 800bb52:	4770      	bx	lr

0800bb54 <_fini>:
 800bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb56:	bf00      	nop
 800bb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5a:	bc08      	pop	{r3}
 800bb5c:	469e      	mov	lr, r3
 800bb5e:	4770      	bx	lr
